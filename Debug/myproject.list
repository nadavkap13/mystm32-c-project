
myproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800a594  0800a594  0001a594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8ac  0800a8ac  00020488  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8ac  0800a8ac  0001a8ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b4  0800a8b4  00020488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b8  0800a8b8  0001a8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000488  20000000  0800a8bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd4  20000488  0800ad44  00020488  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000115c  0800ad44  0002115c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020488  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fc3f  00000000  00000000  000204b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004773  00000000  00000000  000400f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  00044870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001678  00000000  00000000  000460d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c26c  00000000  00000000  00047748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f04a  00000000  00000000  000739b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00109f86  00000000  00000000  000929fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019c984  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007004  00000000  00000000  0019c9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000488 	.word	0x20000488
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a57c 	.word	0x0800a57c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000048c 	.word	0x2000048c
 80001cc:	0800a57c 	.word	0x0800a57c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <cmdLedon>:
static uint32_t  tick=0;
static uint32_t sec = 0;
static uint32_t min =0;
static uint32_t hour =0;
void cmdLedon(void* obj,char* params)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(ledblue.htim, ledblue.CHANNEL);
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <cmdLedon+0x2c>)
 80005b0:	699b      	ldr	r3, [r3, #24]
 80005b2:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <cmdLedon+0x2c>)
 80005b4:	6952      	ldr	r2, [r2, #20]
 80005b6:	4611      	mov	r1, r2
 80005b8:	4618      	mov	r0, r3
 80005ba:	f005 fff9 	bl	80065b0 <HAL_TIM_PWM_Stop_IT>
	LED* led = (LED*)obj;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	60fb      	str	r3, [r7, #12]
	ledOn(led);
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f000 fa90 	bl	8000ae8 <ledOn>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000077c 	.word	0x2000077c

080005d4 <cmdLedoff>:
void cmdLedoff(void* obj,char* params)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(ledblue.htim, ledblue.CHANNEL);
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <cmdLedoff+0x2c>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a07      	ldr	r2, [pc, #28]	; (8000600 <cmdLedoff+0x2c>)
 80005e4:	6952      	ldr	r2, [r2, #20]
 80005e6:	4611      	mov	r1, r2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f005 ffe1 	bl	80065b0 <HAL_TIM_PWM_Stop_IT>
	LED* led = (LED*)obj;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	60fb      	str	r3, [r7, #12]
	ledOff(led);
 80005f2:	68f8      	ldr	r0, [r7, #12]
 80005f4:	f000 fa9c 	bl	8000b30 <ledOff>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000077c 	.word	0x2000077c

08000604 <cmdledblink>:
void cmdledblink(void* obj,char* params)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Stop_IT(ledblue.htim, ledblue.CHANNEL);
 800060e:	4b0b      	ldr	r3, [pc, #44]	; (800063c <cmdledblink+0x38>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <cmdledblink+0x38>)
 8000614:	6952      	ldr	r2, [r2, #20]
 8000616:	4611      	mov	r1, r2
 8000618:	4618      	mov	r0, r3
 800061a:	f005 ffc9 	bl	80065b0 <HAL_TIM_PWM_Stop_IT>
	LED* led = (LED*)obj;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	60fb      	str	r3, [r7, #12]
	int blink= atoi(params);
 8000622:	6838      	ldr	r0, [r7, #0]
 8000624:	f008 fa64 	bl	8008af0 <atoi>
 8000628:	60b8      	str	r0, [r7, #8]
	ledBlink(led, blink);
 800062a:	68b9      	ldr	r1, [r7, #8]
 800062c:	68f8      	ldr	r0, [r7, #12]
 800062e:	f000 fa99 	bl	8000b64 <ledBlink>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000077c 	.word	0x2000077c

08000640 <cmdledbright>:
void cmdledbright(void* obj,char* params)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	LED* led = (LED*)obj;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	60fb      	str	r3, [r7, #12]
	int bright= atoi(params);
 800064e:	6838      	ldr	r0, [r7, #0]
 8000650:	f008 fa4e 	bl	8008af0 <atoi>
 8000654:	60b8      	str	r0, [r7, #8]
	ledsetbrightness(led, bright);
 8000656:	68b9      	ldr	r1, [r7, #8]
 8000658:	68f8      	ldr	r0, [r7, #12]
 800065a:	f000 fac5 	bl	8000be8 <ledsetbrightness>
	HAL_TIM_PWM_Start_IT(ledblue.htim, ledblue.CHANNEL);
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <cmdledbright+0x38>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <cmdledbright+0x38>)
 8000664:	6952      	ldr	r2, [r2, #20]
 8000666:	4611      	mov	r1, r2
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fe4d 	bl	8006308 <HAL_TIM_PWM_Start_IT>
}
 800066e:	bf00      	nop
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	2000077c 	.word	0x2000077c

0800067c <cmdClockTick>:
void cmdClockTick(void* obj,char* params)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
	CLOCK* clock = (CLOCK*)obj;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	60fb      	str	r3, [r7, #12]
	getClockTick(clock,&tick);
 800068a:	4907      	ldr	r1, [pc, #28]	; (80006a8 <cmdClockTick+0x2c>)
 800068c:	68f8      	ldr	r0, [r7, #12]
 800068e:	f000 fbd3 	bl	8000e38 <getClockTick>
	printf("tick is %lu\n\r", tick);
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <cmdClockTick+0x2c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4619      	mov	r1, r3
 8000698:	4804      	ldr	r0, [pc, #16]	; (80006ac <cmdClockTick+0x30>)
 800069a:	f008 fa5f 	bl	8008b5c <iprintf>
}
 800069e:	bf00      	nop
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200004a4 	.word	0x200004a4
 80006ac:	0800a594 	.word	0x0800a594

080006b0 <cmdClockTime>:
void cmdClockTime(void* obj,char* params)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
	CLOCK* clock = (CLOCK*)obj;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	60fb      	str	r3, [r7, #12]
	getTime(clock, &sec, &min, &hour);
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <cmdClockTime+0x34>)
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <cmdClockTime+0x38>)
 80006c2:	490a      	ldr	r1, [pc, #40]	; (80006ec <cmdClockTime+0x3c>)
 80006c4:	68f8      	ldr	r0, [r7, #12]
 80006c6:	f000 fbc7 	bl	8000e58 <getTime>
	printf("time is %lu,%lu,%lu\n\r", hour, min, sec);
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <cmdClockTime+0x34>)
 80006cc:	6819      	ldr	r1, [r3, #0]
 80006ce:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <cmdClockTime+0x38>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <cmdClockTime+0x3c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <cmdClockTime+0x40>)
 80006d8:	f008 fa40 	bl	8008b5c <iprintf>
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200004b0 	.word	0x200004b0
 80006e8:	200004ac 	.word	0x200004ac
 80006ec:	200004a8 	.word	0x200004a8
 80006f0:	0800a5a4 	.word	0x0800a5a4

080006f4 <cmdBuzzerStartPlay>:

void cmdBuzzerStartPlay(void* obj,char* params)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
	BUZZER* buzzer = (BUZZER*)obj;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]
	buzzerStartPlay(buzzer,song, length);
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <cmdBuzzerStartPlay+0x20>)
 8000704:	4904      	ldr	r1, [pc, #16]	; (8000718 <cmdBuzzerStartPlay+0x24>)
 8000706:	68f8      	ldr	r0, [r7, #12]
 8000708:	f001 f824 	bl	8001754 <buzzerStartPlay>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200001f8 	.word	0x200001f8
 8000718:	20000000 	.word	0x20000000

0800071c <cmdBuzzerStopPlay>:
void cmdBuzzerStopPlay(void* obj,char* params)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	BUZZER* buzzer = (BUZZER*)obj;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60fb      	str	r3, [r7, #12]
	buzzerStopPlay(buzzer);
 800072a:	68f8      	ldr	r0, [r7, #12]
 800072c:	f001 f85e 	bl	80017ec <buzzerStopPlay>
}
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <cmdGetTempAndHumidity>:
void cmdGetTempAndHumidity(void* obj,char* params){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	DHT* dht =(DHT*)obj;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	60fb      	str	r3, [r7, #12]
	Dht_readAsync(dht);
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f000 f89e 	bl	8000888 <Dht_readAsync>

}
 800074c:	bf00      	nop
 800074e:	3710      	adds	r7, #16
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <initCLI>:
void initCLI()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	 RegisterCommand("ledon",cmdLedon,&ledblue);
 8000758:	4a17      	ldr	r2, [pc, #92]	; (80007b8 <initCLI+0x64>)
 800075a:	4918      	ldr	r1, [pc, #96]	; (80007bc <initCLI+0x68>)
 800075c:	4818      	ldr	r0, [pc, #96]	; (80007c0 <initCLI+0x6c>)
 800075e:	f000 fbcf 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("ledoff",cmdLedoff,&ledblue);
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <initCLI+0x64>)
 8000764:	4917      	ldr	r1, [pc, #92]	; (80007c4 <initCLI+0x70>)
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <initCLI+0x74>)
 8000768:	f000 fbca 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("ledblink",cmdledblink,&ledblue);
 800076c:	4a12      	ldr	r2, [pc, #72]	; (80007b8 <initCLI+0x64>)
 800076e:	4917      	ldr	r1, [pc, #92]	; (80007cc <initCLI+0x78>)
 8000770:	4817      	ldr	r0, [pc, #92]	; (80007d0 <initCLI+0x7c>)
 8000772:	f000 fbc5 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("ledset",cmdledbright,&ledblue);
 8000776:	4a10      	ldr	r2, [pc, #64]	; (80007b8 <initCLI+0x64>)
 8000778:	4916      	ldr	r1, [pc, #88]	; (80007d4 <initCLI+0x80>)
 800077a:	4817      	ldr	r0, [pc, #92]	; (80007d8 <initCLI+0x84>)
 800077c:	f000 fbc0 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("gettick",cmdClockTick,&clock);
 8000780:	4a16      	ldr	r2, [pc, #88]	; (80007dc <initCLI+0x88>)
 8000782:	4917      	ldr	r1, [pc, #92]	; (80007e0 <initCLI+0x8c>)
 8000784:	4817      	ldr	r0, [pc, #92]	; (80007e4 <initCLI+0x90>)
 8000786:	f000 fbbb 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("gettime",cmdClockTime,&clock);
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <initCLI+0x88>)
 800078c:	4916      	ldr	r1, [pc, #88]	; (80007e8 <initCLI+0x94>)
 800078e:	4817      	ldr	r0, [pc, #92]	; (80007ec <initCLI+0x98>)
 8000790:	f000 fbb6 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("buzzerplay",cmdBuzzerStartPlay, &buzz);
 8000794:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <initCLI+0x9c>)
 8000796:	4917      	ldr	r1, [pc, #92]	; (80007f4 <initCLI+0xa0>)
 8000798:	4817      	ldr	r0, [pc, #92]	; (80007f8 <initCLI+0xa4>)
 800079a:	f000 fbb1 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("buzzerstop",cmdBuzzerStopPlay, &buzz);
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <initCLI+0x9c>)
 80007a0:	4916      	ldr	r1, [pc, #88]	; (80007fc <initCLI+0xa8>)
 80007a2:	4817      	ldr	r0, [pc, #92]	; (8000800 <initCLI+0xac>)
 80007a4:	f000 fbac 	bl	8000f00 <RegisterCommand>
	 RegisterCommand("gettemp",cmdGetTempAndHumidity,&dht);
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <initCLI+0xb0>)
 80007aa:	4917      	ldr	r1, [pc, #92]	; (8000808 <initCLI+0xb4>)
 80007ac:	4817      	ldr	r0, [pc, #92]	; (800080c <initCLI+0xb8>)
 80007ae:	f000 fba7 	bl	8000f00 <RegisterCommand>
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	2000077c 	.word	0x2000077c
 80007bc:	080005a5 	.word	0x080005a5
 80007c0:	0800a5bc 	.word	0x0800a5bc
 80007c4:	080005d5 	.word	0x080005d5
 80007c8:	0800a5c4 	.word	0x0800a5c4
 80007cc:	08000605 	.word	0x08000605
 80007d0:	0800a5cc 	.word	0x0800a5cc
 80007d4:	08000641 	.word	0x08000641
 80007d8:	0800a5d8 	.word	0x0800a5d8
 80007dc:	200007ac 	.word	0x200007ac
 80007e0:	0800067d 	.word	0x0800067d
 80007e4:	0800a5e0 	.word	0x0800a5e0
 80007e8:	080006b1 	.word	0x080006b1
 80007ec:	0800a5e8 	.word	0x0800a5e8
 80007f0:	200007b8 	.word	0x200007b8
 80007f4:	080006f5 	.word	0x080006f5
 80007f8:	0800a5f0 	.word	0x0800a5f0
 80007fc:	0800071d 	.word	0x0800071d
 8000800:	0800a5fc 	.word	0x0800a5fc
 8000804:	20001128 	.word	0x20001128
 8000808:	08000739 	.word	0x08000739
 800080c:	0800a608 	.word	0x0800a608

08000810 <DHT_Init>:
GPIO_InitTypeDef gpioStruct;
extern uint8_t DHT_data[5];
 int delay=0;
extern int startdelay;
extern TIM_HandleTypeDef htim1;
void DHT_Init(DHT* dht,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin){
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	4613      	mov	r3, r2
 800081c:	80fb      	strh	r3, [r7, #6]
	dht->GPIO_Pin = GPIO_Pin;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	88fa      	ldrh	r2, [r7, #6]
 8000822:	811a      	strh	r2, [r3, #8]
	dht->GPIOx= GPIOx;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	605a      	str	r2, [r3, #4]
	dht->dhtPin = WAKING;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
	dht->bitcount=0;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]

}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <setGpioExti>:
	}
return 1;
}

static void setGpioExti(DHT* dht)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b088      	sub	sp, #32
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct = {0};
 800084a:	f107 030c 	add.w	r3, r7, #12
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]
	gpioStruct.Pin = dht->GPIO_Pin;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	891b      	ldrh	r3, [r3, #8]
 800085e:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_IT_FALLING;
 8000860:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000864:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_PULLUP;
 8000866:	2301      	movs	r3, #1
 8000868:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(dht->GPIOx, &gpioStruct);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	f107 020c 	add.w	r2, r7, #12
 8000872:	4611      	mov	r1, r2
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fce7 	bl	8004248 <HAL_GPIO_Init>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800087a:	2017      	movs	r0, #23
 800087c:	f003 fa23 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <Dht_readAsync>:

void Dht_readAsync(DHT* dht)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b088      	sub	sp, #32
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef gpioStruct;
	gpioStruct.Pin = D4_Pin;
 8000890:	2320      	movs	r3, #32
 8000892:	60fb      	str	r3, [r7, #12]
	gpioStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	613b      	str	r3, [r7, #16]
	gpioStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
	gpioStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(D4_GPIO_Port, &gpioStruct);
 80008a0:	f107 030c 	add.w	r3, r7, #12
 80008a4:	4619      	mov	r1, r3
 80008a6:	4809      	ldr	r0, [pc, #36]	; (80008cc <Dht_readAsync+0x44>)
 80008a8:	f003 fcce 	bl	8004248 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin,0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2120      	movs	r1, #32
 80008b0:	4806      	ldr	r0, [pc, #24]	; (80008cc <Dht_readAsync+0x44>)
 80008b2:	f003 fe73 	bl	800459c <HAL_GPIO_WritePin>
	//startdelay=1;
	//MainTimer_registerCallback(mainTimerDht,dht);

	HAL_Delay(18);
 80008b6:	2012      	movs	r0, #18
 80008b8:	f001 fcc0 	bl	800223c <HAL_Delay>
	//if(delay==1){
	setGpioExti(dht);
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f7ff ffc0 	bl	8000842 <setGpioExti>
	//MainTimer_UnregisterCallback(mainTimerDht,dht);
	//}
}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	48000400 	.word	0x48000400

080008d0 <Dht_onGpioInterrupt>:

void Dht_onGpioInterrupt(DHT* dht, uint16_t pin)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	807b      	strh	r3, [r7, #2]
	uint32_t counter;
	if(dht->GPIO_Pin==pin){
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	891b      	ldrh	r3, [r3, #8]
 80008e0:	887a      	ldrh	r2, [r7, #2]
 80008e2:	429a      	cmp	r2, r3
 80008e4:	d17c      	bne.n	80009e0 <Dht_onGpioInterrupt+0x110>
		switch (dht->dhtPin){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d874      	bhi.n	80009d8 <Dht_onGpioInterrupt+0x108>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <Dht_onGpioInterrupt+0x24>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000909 	.word	0x08000909
 80008f8:	08000911 	.word	0x08000911
 80008fc:	08000919 	.word	0x08000919
 8000900:	08000921 	.word	0x08000921
 8000904:	080009d9 	.word	0x080009d9
		case WAKING:
			dht->dhtPin=WAIT_RESPONSE_START;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
			break;
 800090e:	e063      	b.n	80009d8 <Dht_onGpioInterrupt+0x108>
		case WAIT_RESPONSE_START:
			dht->dhtPin=WAIT_RESPONSE_STOP;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2202      	movs	r2, #2
 8000914:	701a      	strb	r2, [r3, #0]
			break;
 8000916:	e05f      	b.n	80009d8 <Dht_onGpioInterrupt+0x108>
		case WAIT_RESPONSE_STOP:
			dht->dhtPin=RECEIVING_BITS;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2203      	movs	r2, #3
 800091c:	701a      	strb	r2, [r3, #0]
			break;
 800091e:	e05b      	b.n	80009d8 <Dht_onGpioInterrupt+0x108>
		case RECEIVING_BITS:
			counter = __HAL_TIM_GET_COUNTER(&htim1);
 8000920:	4b32      	ldr	r3, [pc, #200]	; (80009ec <Dht_onGpioInterrupt+0x11c>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	60fb      	str	r3, [r7, #12]
			if(counter<=100)
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	2b64      	cmp	r3, #100	; 0x64
 800092c:	d812      	bhi.n	8000954 <Dht_onGpioInterrupt+0x84>
			{
				dht_byte&= ~(1<<(7-p));
 800092e:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <Dht_onGpioInterrupt+0x120>)
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	f1c3 0307 	rsb	r3, r3, #7
 8000936:	2201      	movs	r2, #1
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	b25b      	sxtb	r3, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	b25a      	sxtb	r2, r3
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <Dht_onGpioInterrupt+0x124>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	b25b      	sxtb	r3, r3
 8000948:	4013      	ands	r3, r2
 800094a:	b25b      	sxtb	r3, r3
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <Dht_onGpioInterrupt+0x124>)
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	e00f      	b.n	8000974 <Dht_onGpioInterrupt+0xa4>
			}
			else dht_byte|= (1<<(7-p));
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <Dht_onGpioInterrupt+0x120>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f1c3 0307 	rsb	r3, r3, #7
 800095c:	2201      	movs	r2, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	b25a      	sxtb	r2, r3
 8000964:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <Dht_onGpioInterrupt+0x124>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b25b      	sxtb	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b25b      	sxtb	r3, r3
 800096e:	b2da      	uxtb	r2, r3
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <Dht_onGpioInterrupt+0x124>)
 8000972:	701a      	strb	r2, [r3, #0]

			p++;
 8000974:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <Dht_onGpioInterrupt+0x120>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <Dht_onGpioInterrupt+0x120>)
 800097e:	701a      	strb	r2, [r3, #0]
			dht->bitcount++;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	1c5a      	adds	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	60da      	str	r2, [r3, #12]

			if(dht->bitcount%8==0){
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	2b00      	cmp	r3, #0
 8000994:	d112      	bne.n	80009bc <Dht_onGpioInterrupt+0xec>
				DHT_data[m]=dht_byte;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <Dht_onGpioInterrupt+0x128>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <Dht_onGpioInterrupt+0x124>)
 800099e:	7819      	ldrb	r1, [r3, #0]
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <Dht_onGpioInterrupt+0x12c>)
 80009a2:	5499      	strb	r1, [r3, r2]
				dht_byte=0;
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <Dht_onGpioInterrupt+0x124>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
				m++;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <Dht_onGpioInterrupt+0x128>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <Dht_onGpioInterrupt+0x128>)
 80009b4:	701a      	strb	r2, [r3, #0]
				p=0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <Dht_onGpioInterrupt+0x120>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
			}

			if(dht->bitcount>=40){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68db      	ldr	r3, [r3, #12]
 80009c0:	2b27      	cmp	r3, #39	; 0x27
 80009c2:	dd08      	ble.n	80009d6 <Dht_onGpioInterrupt+0x106>
				dht->bitcount=0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
				m=0;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <Dht_onGpioInterrupt+0x128>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]

				dht->dhtPin=DATA_RECEIVED;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2204      	movs	r2, #4
 80009d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80009d6:	bf00      	nop
		case DATA_RECEIVED:
			break;
		}
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 80009d8:	4b04      	ldr	r3, [pc, #16]	; (80009ec <Dht_onGpioInterrupt+0x11c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000594 	.word	0x20000594
 80009f0:	200004b6 	.word	0x200004b6
 80009f4:	200004b4 	.word	0x200004b4
 80009f8:	200004b5 	.word	0x200004b5
 80009fc:	2000113c 	.word	0x2000113c

08000a00 <Dht_hasData>:

int Dht_hasData(DHT* dht){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	if (dht->dhtPin==DATA_RECEIVED){
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b04      	cmp	r3, #4
 8000a0e:	d10a      	bne.n	8000a26 <Dht_hasData+0x26>
		startdelay=0;
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <Dht_hasData+0x34>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
		delay =0;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <Dht_hasData+0x38>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
		dht->dhtPin=WAKING;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
		return 1;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e000      	b.n	8000a28 <Dht_hasData+0x28>
	}
	return 0;
 8000a26:	2300      	movs	r3, #0
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	20001138 	.word	0x20001138
 8000a38:	200004b8 	.word	0x200004b8

08000a3c <pageSelect>:
uint32_t pageerror = 0;
extern DHT dht;
extern uint8_t DHT_data[5];

void pageSelect (FLASH_EraseInitTypeDef * page)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	page->TypeErase = FLASH_TYPEERASE_PAGES;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
	page->Banks = FLASH_BANK_2;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	605a      	str	r2, [r3, #4]
	page->Page = 256;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a56:	609a      	str	r2, [r3, #8]
	page->NbPages = 1;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	60da      	str	r2, [r3, #12]
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <eraseIT>:
	}

}

void eraseIT()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef page;
	pageSelect(&page);
 8000a72:	463b      	mov	r3, r7
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ffe1 	bl	8000a3c <pageSelect>
	HAL_FLASH_Unlock();
 8000a7a:	f003 faa9 	bl	8003fd0 <HAL_FLASH_Unlock>

	if (HAL_FLASHEx_Erase_IT(&page) != HAL_OK) {
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4618      	mov	r0, r3
 8000a82:	f003 fac7 	bl	8004014 <HAL_FLASHEx_Erase_IT>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <eraseIT+0x26>
		printf("Erase failed\r\n");
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <eraseIT+0x30>)
 8000a8e:	f008 f8eb 	bl	8008c68 <puts>
	}

}
 8000a92:	bf00      	nop
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	0800a610 	.word	0x0800a610

08000aa0 <ledInit>:
#include "MainTimer.h"
#include <stdio.h>
extern TIM_HandleTypeDef htim4;
extern int MainTimer_funcounter;

void ledInit(LED* led,GPIO_TypeDef* port, uint16_t pin, uint32_t CHANNEL,TIM_HandleTypeDef* htim){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4613      	mov	r3, r2
 8000aae:	80fb      	strh	r3, [r7, #6]
	led->state = LED_STATE_OFF;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
	led->count = 0;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2200      	movs	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
	led->GPIOx= port;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
	led->GPIO_Pin=pin;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	88fa      	ldrh	r2, [r7, #6]
 8000ac6:	821a      	strh	r2, [r3, #16]
	led->maxcount=0;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
	led->CHANNEL=CHANNEL;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	683a      	ldr	r2, [r7, #0]
 8000ad2:	615a      	str	r2, [r3, #20]
	led->htim = htim;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	619a      	str	r2, [r3, #24]

}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <ledOn>:
void ledOn(LED* led)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	led->state = LED_STATE_ON;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 1);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68d8      	ldr	r0, [r3, #12]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	8a1b      	ldrh	r3, [r3, #16]
 8000afe:	2201      	movs	r2, #1
 8000b00:	4619      	mov	r1, r3
 8000b02:	f003 fd4b 	bl	800459c <HAL_GPIO_WritePin>
	MainTimer_UnregisterCallback(mainTimerLed,led);
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	4806      	ldr	r0, [pc, #24]	; (8000b24 <ledOn+0x3c>)
 8000b0a:	f000 f8ff 	bl	8000d0c <MainTimer_UnregisterCallback>
	printf("count is %d\n\r",MainTimer_funcounter);
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <ledOn+0x40>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <ledOn+0x44>)
 8000b16:	f008 f821 	bl	8008b5c <iprintf>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	08000cbd 	.word	0x08000cbd
 8000b28:	200004bc 	.word	0x200004bc
 8000b2c:	0800a630 	.word	0x0800a630

08000b30 <ledOff>:
void ledOff(LED* led)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	led->state = LED_STATE_OFF;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(led->GPIOx, led->GPIO_Pin, 0);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	68d8      	ldr	r0, [r3, #12]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	8a1b      	ldrh	r3, [r3, #16]
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f003 fd27 	bl	800459c <HAL_GPIO_WritePin>
	MainTimer_UnregisterCallback(mainTimerLed,led);
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <ledOff+0x30>)
 8000b52:	f000 f8db 	bl	8000d0c <MainTimer_UnregisterCallback>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08000cbd 	.word	0x08000cbd

08000b64 <ledBlink>:
void ledBlink(LED* led, int period)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	led->state = LED_STATE_BLINK;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2202      	movs	r2, #2
 8000b72:	701a      	strb	r2, [r3, #0]
	led->maxcount=period;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	683a      	ldr	r2, [r7, #0]
 8000b78:	609a      	str	r2, [r3, #8]
	MainTimer_registerCallback(mainTimerLed,led);
 8000b7a:	6879      	ldr	r1, [r7, #4]
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <ledBlink+0x34>)
 8000b7e:	f000 f87b 	bl	8000c78 <MainTimer_registerCallback>
	printf("count is %d\n\r",MainTimer_funcounter);
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <ledBlink+0x38>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <ledBlink+0x3c>)
 8000b8a:	f007 ffe7 	bl	8008b5c <iprintf>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	08000cbd 	.word	0x08000cbd
 8000b9c:	200004bc 	.word	0x200004bc
 8000ba0:	0800a630 	.word	0x0800a630

08000ba4 <ledOnTimerInterrupt>:
void ledOnTimerInterrupt(LED* led)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	if(led->state== LED_STATE_BLINK){
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b02      	cmp	r3, #2
 8000bb2:	d110      	bne.n	8000bd6 <ledOnTimerInterrupt+0x32>
	if (led->count >= led->maxcount){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	db0a      	blt.n	8000bd6 <ledOnTimerInterrupt+0x32>
			HAL_GPIO_TogglePin(led->GPIOx, led->GPIO_Pin);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	8a1b      	ldrh	r3, [r3, #16]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4610      	mov	r0, r2
 8000bcc:	f003 fcfe 	bl	80045cc <HAL_GPIO_TogglePin>
			led->count = 0;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
		}
	}
			led->count++;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	1c5a      	adds	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	605a      	str	r2, [r3, #4]
}
 8000be0:	bf00      	nop
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <ledsetbrightness>:
	}

	return currentstate;
}
void ledsetbrightness(LED* led,int brightness)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	brightness= (brightness*10);
 8000bf2:	683a      	ldr	r2, [r7, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <ledsetbrightness+0x2a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	683a      	ldr	r2, [r7, #0]
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c10:	e02c      	b.n	8000c6c <ledsetbrightness+0x84>
	__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	695b      	ldr	r3, [r3, #20]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d105      	bne.n	8000c26 <ledsetbrightness+0x3e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	699b      	ldr	r3, [r3, #24]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c24:	e022      	b.n	8000c6c <ledsetbrightness+0x84>
	__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d105      	bne.n	8000c3a <ledsetbrightness+0x52>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000c38:	e018      	b.n	8000c6c <ledsetbrightness+0x84>
	__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	2b0c      	cmp	r3, #12
 8000c40:	d105      	bne.n	8000c4e <ledsetbrightness+0x66>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	699b      	ldr	r3, [r3, #24]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c4c:	e00e      	b.n	8000c6c <ledsetbrightness+0x84>
	__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	2b10      	cmp	r3, #16
 8000c54:	d105      	bne.n	8000c62 <ledsetbrightness+0x7a>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000c60:	e004      	b.n	8000c6c <ledsetbrightness+0x84>
	__HAL_TIM_SET_COMPARE(led->htim,led->CHANNEL, brightness);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <MainTimer_registerCallback>:


void MainTimerInit(MAINTIMER *maintimer, TIM_HandleTypeDef *htim) {
	maintimer->htim = htim;
}
void MainTimer_registerCallback(HandlerMainTimer_Func TIMER_Func, void *obj) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
	MainTimer_arry[MainTimer_funcounter].TIMER_Func = TIMER_Func;
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MainTimer_registerCallback+0x3c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <MainTimer_registerCallback+0x40>)
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	MainTimer_arry[MainTimer_funcounter].obj = obj;
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MainTimer_registerCallback+0x3c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <MainTimer_registerCallback+0x40>)
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	4413      	add	r3, r2
 8000c98:	683a      	ldr	r2, [r7, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
	MainTimer_funcounter++;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <MainTimer_registerCallback+0x3c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <MainTimer_registerCallback+0x3c>)
 8000ca4:	6013      	str	r3, [r2, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200004bc 	.word	0x200004bc
 8000cb8:	20000c78 	.word	0x20000c78

08000cbc <mainTimerLed>:
void mainTimerLed(void *obj) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
	LED *led = (LED*) obj;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	60fb      	str	r3, [r7, #12]
	ledOnTimerInterrupt(led);
 8000cc8:	68f8      	ldr	r0, [r7, #12]
 8000cca:	f7ff ff6b 	bl	8000ba4 <ledOnTimerInterrupt>
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <mainTimerBuzzer>:
void mainTimerBuzzer(void *obj) {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	BUZZER *buzzer = (BUZZER*) obj;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]
	buzzerOnInterrupt(buzzer);
 8000ce2:	68f8      	ldr	r0, [r7, #12]
 8000ce4:	f000 fda4 	bl	8001830 <buzzerOnInterrupt>
}
 8000ce8:	bf00      	nop
 8000cea:	3710      	adds	r7, #16
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <mainTimerClock>:
void mainTimerClock(void *obj) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	CLOCK *clock = (CLOCK*) obj;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	60fb      	str	r3, [r7, #12]
	clockInInterrupt(clock);
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f000 f8ef 	bl	8000ee0 <clockInInterrupt>
}
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <MainTimer_UnregisterCallback>:
void mainTimerDht(void *obj) {
	DHT *dht = (DHT*) obj;
	DHT_onTimerInteruppt(dht);
}

void MainTimer_UnregisterCallback(HandlerMainTimer_Func TIMER_Func, void *obj) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	int remove = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
	int boolcount = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]

	for (int j = 0; j < MainTimer_funcounter; j++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	e021      	b.n	8000d68 <MainTimer_UnregisterCallback+0x5c>
		if (MainTimer_arry[j].TIMER_Func == TIMER_Func && MainTimer_arry[j].obj == obj) {
 8000d24:	4a26      	ldr	r2, [pc, #152]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d117      	bne.n	8000d62 <MainTimer_UnregisterCallback+0x56>
 8000d32:	4a23      	ldr	r2, [pc, #140]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	4413      	add	r3, r2
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	683a      	ldr	r2, [r7, #0]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d10f      	bne.n	8000d62 <MainTimer_UnregisterCallback+0x56>
			MainTimer_arry[j].TIMER_Func = NULL;
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2100      	movs	r1, #0
 8000d48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
			MainTimer_arry[j].obj = NULL;
 8000d4c:	4a1c      	ldr	r2, [pc, #112]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	4413      	add	r3, r2
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
			remove = 1;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
			boolcount = j;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	613b      	str	r3, [r7, #16]
			break;
 8000d60:	e007      	b.n	8000d72 <MainTimer_UnregisterCallback+0x66>
	for (int j = 0; j < MainTimer_funcounter; j++) {
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3301      	adds	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MainTimer_UnregisterCallback+0xb8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68fa      	ldr	r2, [r7, #12]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbd8      	blt.n	8000d24 <MainTimer_UnregisterCallback+0x18>
		}
	}

	if (remove == 1 && MainTimer_funcounter > 0) {
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d11c      	bne.n	8000db2 <MainTimer_UnregisterCallback+0xa6>
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MainTimer_UnregisterCallback+0xb8>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	dd18      	ble.n	8000db2 <MainTimer_UnregisterCallback+0xa6>
		MainTimer_funcounter--;
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MainTimer_UnregisterCallback+0xb8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	4a0f      	ldr	r2, [pc, #60]	; (8000dc4 <MainTimer_UnregisterCallback+0xb8>)
 8000d88:	6013      	str	r3, [r2, #0]
		MainTimer_arry[boolcount].TIMER_Func = MainTimer_arry[MainTimer_funcounter].TIMER_Func;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MainTimer_UnregisterCallback+0xb8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000d90:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000d94:	490a      	ldr	r1, [pc, #40]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		MainTimer_arry[boolcount].obj = MainTimer_arry[MainTimer_funcounter].obj;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MainTimer_UnregisterCallback+0xb8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	4413      	add	r3, r2
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <MainTimer_UnregisterCallback+0xb4>)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	605a      	str	r2, [r3, #4]
	}
}
 8000db2:	bf00      	nop
 8000db4:	371c      	adds	r7, #28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	20000c78 	.word	0x20000c78
 8000dc4:	200004bc 	.word	0x200004bc

08000dc8 <MainTimerInterrupt>:

void MainTimerInterrupt() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	for (int j = 0; j < MainTimer_funcounter; j++) {
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	e00d      	b.n	8000df0 <MainTimerInterrupt+0x28>

		MainTimer_arry[j].TIMER_Func(MainTimer_arry[j].obj);
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <MainTimerInterrupt+0x3c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000ddc:	4909      	ldr	r1, [pc, #36]	; (8000e04 <MainTimerInterrupt+0x3c>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4618      	mov	r0, r3
 8000de8:	4790      	blx	r2
	for (int j = 0; j < MainTimer_funcounter; j++) {
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	3301      	adds	r3, #1
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <MainTimerInterrupt+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	dbec      	blt.n	8000dd4 <MainTimerInterrupt+0xc>
	}

}
 8000dfa:	bf00      	nop
 8000dfc:	bf00      	nop
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000c78 	.word	0x20000c78
 8000e08:	200004bc 	.word	0x200004bc

08000e0c <clockInit>:
#include "main.h"
#include "mymain.h"
#include "clock.h"
#include "MainTimer.h"

void clockInit(CLOCK* clock,TIM_HandleTypeDef *htim){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
	clock->htim = htim;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	683a      	ldr	r2, [r7, #0]
 8000e1a:	601a      	str	r2, [r3, #0]
	clock->tick_counter = 0;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
	//clock->state = CLOCK_STATE_OFF;
	MainTimer_registerCallback(&mainTimerClock,clock);
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <clockInit+0x28>)
 8000e26:	f7ff ff27 	bl	8000c78 <MainTimer_registerCallback>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08000cf1 	.word	0x08000cf1

08000e38 <getClockTick>:
void getClockTick(CLOCK* clock,uint32_t* tick){
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	*tick = clock->tick_counter;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	601a      	str	r2, [r3, #0]
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <getTime>:
void getTime( CLOCK* clock, uint32_t* sec,uint32_t* min, uint32_t* hour){
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
 8000e64:	603b      	str	r3, [r7, #0]
	*sec = (clock->tick_counter/1000);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <getTime+0x80>)
 8000e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e70:	099a      	lsrs	r2, r3, #6
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	601a      	str	r2, [r3, #0]
	*min = *sec / 60;
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a18      	ldr	r2, [pc, #96]	; (8000edc <getTime+0x84>)
 8000e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e80:	095a      	lsrs	r2, r3, #5
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	601a      	str	r2, [r3, #0]
	*sec = *sec % 60;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	6819      	ldr	r1, [r3, #0]
 8000e8a:	4b14      	ldr	r3, [pc, #80]	; (8000edc <getTime+0x84>)
 8000e8c:	fba3 2301 	umull	r2, r3, r3, r1
 8000e90:	095a      	lsrs	r2, r3, #5
 8000e92:	4613      	mov	r3, r2
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	1aca      	subs	r2, r1, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	601a      	str	r2, [r3, #0]
	*hour = *min / 60;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <getTime+0x84>)
 8000ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eaa:	095a      	lsrs	r2, r3, #5
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	601a      	str	r2, [r3, #0]
	*min = *min % 60;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <getTime+0x84>)
 8000eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8000eba:	095a      	lsrs	r2, r3, #5
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	011b      	lsls	r3, r3, #4
 8000ec0:	1a9b      	subs	r3, r3, r2
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	1aca      	subs	r2, r1, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	601a      	str	r2, [r3, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	10624dd3 	.word	0x10624dd3
 8000edc:	88888889 	.word	0x88888889

08000ee0 <clockInInterrupt>:
void clockInInterrupt(CLOCK* clock){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	clock->tick_counter++;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	1c5a      	adds	r2, r3, #1
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	605a      	str	r2, [r3, #4]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <RegisterCommand>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
int cmdprint = 0;
int funcounter = 0;

void RegisterCommand(char *CommandName, HandlerFunc Func, void *obj) {
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
	arry[funcounter].Func = Func;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <RegisterCommand+0x64>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4915      	ldr	r1, [pc, #84]	; (8000f68 <RegisterCommand+0x68>)
 8000f12:	4613      	mov	r3, r2
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	4413      	add	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	440b      	add	r3, r1
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	601a      	str	r2, [r3, #0]
	arry[funcounter].CommandName = CommandName;
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <RegisterCommand+0x64>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4910      	ldr	r1, [pc, #64]	; (8000f68 <RegisterCommand+0x68>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	440b      	add	r3, r1
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	601a      	str	r2, [r3, #0]
	arry[funcounter].obj = obj;
 8000f36:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <RegisterCommand+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	490b      	ldr	r1, [pc, #44]	; (8000f68 <RegisterCommand+0x68>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	3308      	adds	r3, #8
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	601a      	str	r2, [r3, #0]
	funcounter++;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <RegisterCommand+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <RegisterCommand+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000052c 	.word	0x2000052c
 8000f68:	200007c8 	.word	0x200007c8

08000f6c <commTask>:
//	On = onFunc;
//	Off = offFunc;
//	type = object;
}

int commTask() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	uint8_t ch;

	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 8000f72:	1db9      	adds	r1, r7, #6
 8000f74:	230a      	movs	r3, #10
 8000f76:	2201      	movs	r2, #1
 8000f78:	4836      	ldr	r0, [pc, #216]	; (8001054 <commTask+0xe8>)
 8000f7a:	f006 fcd1 	bl	8007920 <HAL_UART_Receive>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK) {
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d020      	beq.n	8000fca <commTask+0x5e>
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0) {
 8000f88:	4b32      	ldr	r3, [pc, #200]	; (8001054 <commTask+0xe8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d011      	beq.n	8000fba <commTask+0x4e>
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000f96:	4b2f      	ldr	r3, [pc, #188]	; (8001054 <commTask+0xe8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	621a      	str	r2, [r3, #32]
		}

		// here we have a time to print the command
		while (cmdprint < cmdcount) {
 8000f9e:	e00c      	b.n	8000fba <commTask+0x4e>
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <commTask+0xec>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	1c5a      	adds	r2, r3, #1
 8000fa6:	492c      	ldr	r1, [pc, #176]	; (8001058 <commTask+0xec>)
 8000fa8:	600a      	str	r2, [r1, #0]
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <commTask+0xf0>)
 8000fac:	1899      	adds	r1, r3, r2
 8000fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4827      	ldr	r0, [pc, #156]	; (8001054 <commTask+0xe8>)
 8000fb6:	f006 fc1f 	bl	80077f8 <HAL_UART_Transmit>
		while (cmdprint < cmdcount) {
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <commTask+0xec>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	4b28      	ldr	r3, [pc, #160]	; (8001060 <commTask+0xf4>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	dbec      	blt.n	8000fa0 <commTask+0x34>
		}

		return 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	e03f      	b.n	800104a <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n') {
 8000fca:	79bb      	ldrb	r3, [r7, #6]
 8000fcc:	2b0d      	cmp	r3, #13
 8000fce:	d023      	beq.n	8001018 <commTask+0xac>
 8000fd0:	79bb      	ldrb	r3, [r7, #6]
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d020      	beq.n	8001018 <commTask+0xac>
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);

		if (cmdcount >= MAX_BUFFER_LENGTH) {
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <commTask+0xf4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b63      	cmp	r3, #99	; 0x63
 8000fdc:	dd05      	ble.n	8000fea <commTask+0x7e>
			cmdcount = 0;
 8000fde:	4b20      	ldr	r3, [pc, #128]	; (8001060 <commTask+0xf4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <commTask+0xec>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
		}

		cmdbuffer[cmdcount++] = ch;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <commTask+0xf4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	491b      	ldr	r1, [pc, #108]	; (8001060 <commTask+0xf4>)
 8000ff2:	600a      	str	r2, [r1, #0]
 8000ff4:	79b9      	ldrb	r1, [r7, #6]
 8000ff6:	4a19      	ldr	r2, [pc, #100]	; (800105c <commTask+0xf0>)
 8000ff8:	54d1      	strb	r1, [r2, r3]
		return 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e025      	b.n	800104a <commTask+0xde>
	}

	// here we have a time to print the command
	while (cmdprint < cmdcount) {
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <commTask+0xec>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1c5a      	adds	r2, r3, #1
 8001004:	4914      	ldr	r1, [pc, #80]	; (8001058 <commTask+0xec>)
 8001006:	600a      	str	r2, [r1, #0]
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <commTask+0xf0>)
 800100a:	1899      	adds	r1, r3, r2
 800100c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001010:	2201      	movs	r2, #1
 8001012:	4810      	ldr	r0, [pc, #64]	; (8001054 <commTask+0xe8>)
 8001014:	f006 fbf0 	bl	80077f8 <HAL_UART_Transmit>
	while (cmdprint < cmdcount) {
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <commTask+0xec>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <commTask+0xf4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbec      	blt.n	8000ffe <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*) "\r\n", 2, 0xFFFF);
 8001024:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001028:	2202      	movs	r2, #2
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <commTask+0xf8>)
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <commTask+0xe8>)
 800102e:	f006 fbe3 	bl	80077f8 <HAL_UART_Transmit>

	cmdbuffer[cmdcount] = 0;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <commTask+0xf4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a09      	ldr	r2, [pc, #36]	; (800105c <commTask+0xf0>)
 8001038:	2100      	movs	r1, #0
 800103a:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <commTask+0xf4>)
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <commTask+0xec>)
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	return 1;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200006c4 	.word	0x200006c4
 8001058:	20000528 	.word	0x20000528
 800105c:	200004c0 	.word	0x200004c0
 8001060:	20000524 	.word	0x20000524
 8001064:	0800a640 	.word	0x0800a640

08001068 <handleCommand>:

void handleCommand() {
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b08d      	sub	sp, #52	; 0x34
 800106c:	af00      	add	r7, sp, #0
	char cmd[20];
	char param[20];


	int params = sscanf((const char*) cmdbuffer, "%s %s", cmd, param);
 800106e:	463b      	mov	r3, r7
 8001070:	f107 0214 	add.w	r2, r7, #20
 8001074:	4921      	ldr	r1, [pc, #132]	; (80010fc <handleCommand+0x94>)
 8001076:	4822      	ldr	r0, [pc, #136]	; (8001100 <handleCommand+0x98>)
 8001078:	f007 fdfe 	bl	8008c78 <siscanf>
 800107c:	62b8      	str	r0, [r7, #40]	; 0x28

	for (int j = 0; j < funcounter; j++) {
 800107e:	2300      	movs	r3, #0
 8001080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001082:	e02a      	b.n	80010da <handleCommand+0x72>
		if (strcmp(cmd, arry[j].CommandName) == 0) {
 8001084:	491f      	ldr	r1, [pc, #124]	; (8001104 <handleCommand+0x9c>)
 8001086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001088:	4613      	mov	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	4413      	add	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	440b      	add	r3, r1
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff f898 	bl	80001d0 <strcmp>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d116      	bne.n	80010d4 <handleCommand+0x6c>
			arry[j].Func(arry[j].obj, param);
 80010a6:	4917      	ldr	r1, [pc, #92]	; (8001104 <handleCommand+0x9c>)
 80010a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010aa:	4613      	mov	r3, r2
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	4413      	add	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	440b      	add	r3, r1
 80010b4:	3304      	adds	r3, #4
 80010b6:	681c      	ldr	r4, [r3, #0]
 80010b8:	4912      	ldr	r1, [pc, #72]	; (8001104 <handleCommand+0x9c>)
 80010ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3308      	adds	r3, #8
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	463a      	mov	r2, r7
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	47a0      	blx	r4
			return;
 80010d2:	e00f      	b.n	80010f4 <handleCommand+0x8c>
	for (int j = 0; j < funcounter; j++) {
 80010d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d6:	3301      	adds	r3, #1
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010da:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <handleCommand+0xa0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010e0:	429a      	cmp	r2, r3
 80010e2:	dbcf      	blt.n	8001084 <handleCommand+0x1c>
		}
	}

	if (params == 0) {
 80010e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <handleCommand+0x8a>
//  else if (strcmp(cmd, "stopbuzzer") == 0)
//   {
//	  buzzerStopPlay();
//   }
	else {
		printf("Invalid command\r\n");
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <handleCommand+0xa4>)
 80010ec:	f007 fdbc 	bl	8008c68 <puts>
 80010f0:	e000      	b.n	80010f4 <handleCommand+0x8c>
		return;
 80010f2:	bf00      	nop
	}
}
 80010f4:	3734      	adds	r7, #52	; 0x34
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd90      	pop	{r4, r7, pc}
 80010fa:	bf00      	nop
 80010fc:	0800a644 	.word	0x0800a644
 8001100:	200004c0 	.word	0x200004c0
 8001104:	200007c8 	.word	0x200007c8
 8001108:	2000052c 	.word	0x2000052c
 800110c:	0800a64c 	.word	0x0800a64c

08001110 <lightsenseInit>:
#include "lightsens.h"
#include "main.h"

void lightsenseInit(LIGHTSENS* sensor, ADC_TypeDef* ADC,uint32_t maxvalue)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	sensor->ADC = ADC;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	601a      	str	r2, [r3, #0]
	sensor->maxvalue = maxvalue;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	609a      	str	r2, [r3, #8]
	//sensor->minvalue = 0;
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001138:	f001 f804 	bl	8002144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113c:	f000 f813 	bl	8001166 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001140:	f000 fa6e 	bl	8001620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001144:	f000 fa3c 	bl	80015c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001148:	f000 f92a 	bl	80013a0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800114c:	f000 fa02 	bl	8001554 <MX_TIM6_Init>
  MX_TIM4_Init();
 8001150:	f000 f980 	bl	8001454 <MX_TIM4_Init>
  MX_ADC1_Init();
 8001154:	f000 f858 	bl	8001208 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001158:	f000 f8ce 	bl	80012f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  mymaininit();
 800115c:	f000 fc3e 	bl	80019dc <mymaininit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	 	 mymainloop();
 8001160:	f000 fcbc 	bl	8001adc <mymainloop>
 8001164:	e7fc      	b.n	8001160 <main+0x2c>

08001166 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b096      	sub	sp, #88	; 0x58
 800116a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2244      	movs	r2, #68	; 0x44
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f007 fce9 	bl	8008b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001188:	f44f 7000 	mov.w	r0, #512	; 0x200
 800118c:	f003 fa5e 	bl	800464c <HAL_PWREx_ControlVoltageScaling>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001196:	f000 fac9 	bl	800172c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a4:	2310      	movs	r3, #16
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a8:	2302      	movs	r3, #2
 80011aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ac:	2302      	movs	r3, #2
 80011ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011b4:	230a      	movs	r3, #10
 80011b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011b8:	2307      	movs	r3, #7
 80011ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011c0:	2302      	movs	r3, #2
 80011c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 fa95 	bl	80046f8 <HAL_RCC_OscConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011d4:	f000 faaa 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	230f      	movs	r3, #15
 80011da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011dc:	2303      	movs	r3, #3
 80011de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	2104      	movs	r1, #4
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 fe5d 	bl	8004eb0 <HAL_RCC_ClockConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80011fc:	f000 fa96 	bl	800172c <Error_Handler>
  }
}
 8001200:	bf00      	nop
 8001202:	3758      	adds	r7, #88	; 0x58
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
 8001228:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <MX_ADC1_Init+0xe4>)
 800122c:	4a30      	ldr	r2, [pc, #192]	; (80012f0 <MX_ADC1_Init+0xe8>)
 800122e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001232:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001236:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001238:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_ADC1_Init+0xe4>)
 800123a:	2210      	movs	r2, #16
 800123c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001240:	2200      	movs	r2, #0
 8001242:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800124a:	4b28      	ldr	r3, [pc, #160]	; (80012ec <MX_ADC1_Init+0xe4>)
 800124c:	2204      	movs	r2, #4
 800124e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001252:	2200      	movs	r2, #0
 8001254:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001258:	2201      	movs	r2, #1
 800125a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <MX_ADC1_Init+0xe4>)
 800125e:	2201      	movs	r2, #1
 8001260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001262:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001264:	2200      	movs	r2, #0
 8001266:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <MX_ADC1_Init+0xe4>)
 800126c:	2200      	movs	r2, #0
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001272:	2200      	movs	r2, #0
 8001274:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800127e:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001280:	2200      	movs	r2, #0
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <MX_ADC1_Init+0xe4>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128c:	4817      	ldr	r0, [pc, #92]	; (80012ec <MX_ADC1_Init+0xe4>)
 800128e:	f001 f9ef 	bl	8002670 <HAL_ADC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001298:	f000 fa48 	bl	800172c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800129c:	2300      	movs	r3, #0
 800129e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4619      	mov	r1, r3
 80012a6:	4811      	ldr	r0, [pc, #68]	; (80012ec <MX_ADC1_Init+0xe4>)
 80012a8:	f002 fb66 	bl	8003978 <HAL_ADCEx_MultiModeConfigChannel>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012b2:	f000 fa3b 	bl	800172c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_ADC1_Init+0xec>)
 80012b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ba:	2306      	movs	r3, #6
 80012bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012c2:	237f      	movs	r3, #127	; 0x7f
 80012c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012c6:	2304      	movs	r3, #4
 80012c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	4619      	mov	r1, r3
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <MX_ADC1_Init+0xe4>)
 80012d4:	f001 fe82 	bl	8002fdc <HAL_ADC_ConfigChannel>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80012de:	f000 fa25 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000530 	.word	0x20000530
 80012f0:	50040000 	.word	0x50040000
 80012f4:	14f00020 	.word	0x14f00020

080012f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001316:	4b20      	ldr	r3, [pc, #128]	; (8001398 <MX_TIM1_Init+0xa0>)
 8001318:	4a20      	ldr	r2, [pc, #128]	; (800139c <MX_TIM1_Init+0xa4>)
 800131a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800131c:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <MX_TIM1_Init+0xa0>)
 800131e:	224f      	movs	r2, #79	; 0x4f
 8001320:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001322:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_TIM1_Init+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 25000;
 8001328:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <MX_TIM1_Init+0xa0>)
 800132a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800132e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_TIM1_Init+0xa0>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <MX_TIM1_Init+0xa0>)
 8001338:	2200      	movs	r2, #0
 800133a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_TIM1_Init+0xa0>)
 800133e:	2200      	movs	r2, #0
 8001340:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001342:	4815      	ldr	r0, [pc, #84]	; (8001398 <MX_TIM1_Init+0xa0>)
 8001344:	f004 fc94 	bl	8005c70 <HAL_TIM_Base_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800134e:	f000 f9ed 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001352:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001356:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	480e      	ldr	r0, [pc, #56]	; (8001398 <MX_TIM1_Init+0xa0>)
 8001360:	f005 fc3e 	bl	8006be0 <HAL_TIM_ConfigClockSource>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800136a:	f000 f9df 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	4619      	mov	r1, r3
 800137e:	4806      	ldr	r0, [pc, #24]	; (8001398 <MX_TIM1_Init+0xa0>)
 8001380:	f006 f946 	bl	8007610 <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800138a:	f000 f9cf 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000594 	.word	0x20000594
 800139c:	40012c00 	.word	0x40012c00

080013a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
 80013c0:	615a      	str	r2, [r3, #20]
 80013c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_TIM3_Init+0xac>)
 80013c6:	4a22      	ldr	r2, [pc, #136]	; (8001450 <MX_TIM3_Init+0xb0>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_TIM3_Init+0xac>)
 80013cc:	f240 321f 	movw	r2, #799	; 0x31f
 80013d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_TIM3_Init+0xac>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM3_Init+0xac>)
 80013da:	22c8      	movs	r2, #200	; 0xc8
 80013dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_TIM3_Init+0xac>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_TIM3_Init+0xac>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <MX_TIM3_Init+0xac>)
 80013ec:	f004 fd98 	bl	8005f20 <HAL_TIM_PWM_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80013f6:	f000 f999 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001402:	f107 031c 	add.w	r3, r7, #28
 8001406:	4619      	mov	r1, r3
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <MX_TIM3_Init+0xac>)
 800140a:	f006 f901 	bl	8007610 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001414:	f000 f98a 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <MX_TIM3_Init+0xac>)
 8001430:	f005 fac2 	bl	80069b8 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800143a:	f000 f977 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800143e:	4803      	ldr	r0, [pc, #12]	; (800144c <MX_TIM3_Init+0xac>)
 8001440:	f000 fcae 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	; 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200005e0 	.word	0x200005e0
 8001450:	40000400 	.word	0x40000400

08001454 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08e      	sub	sp, #56	; 0x38
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	605a      	str	r2, [r3, #4]
 8001464:	609a      	str	r2, [r3, #8]
 8001466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]
 8001482:	615a      	str	r2, [r3, #20]
 8001484:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <MX_TIM4_Init+0xf8>)
 8001488:	4a31      	ldr	r2, [pc, #196]	; (8001550 <MX_TIM4_Init+0xfc>)
 800148a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 799;
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <MX_TIM4_Init+0xf8>)
 800148e:	f240 321f 	movw	r2, #799	; 0x31f
 8001492:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MX_TIM4_Init+0xf8>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 800149a:	4b2c      	ldr	r3, [pc, #176]	; (800154c <MX_TIM4_Init+0xf8>)
 800149c:	2264      	movs	r2, #100	; 0x64
 800149e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <MX_TIM4_Init+0xf8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b29      	ldr	r3, [pc, #164]	; (800154c <MX_TIM4_Init+0xf8>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014ac:	4827      	ldr	r0, [pc, #156]	; (800154c <MX_TIM4_Init+0xf8>)
 80014ae:	f004 fbdf 	bl	8005c70 <HAL_TIM_Base_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80014b8:	f000 f938 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4820      	ldr	r0, [pc, #128]	; (800154c <MX_TIM4_Init+0xf8>)
 80014ca:	f005 fb89 	bl	8006be0 <HAL_TIM_ConfigClockSource>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80014d4:	f000 f92a 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014d8:	481c      	ldr	r0, [pc, #112]	; (800154c <MX_TIM4_Init+0xf8>)
 80014da:	f004 fd21 	bl	8005f20 <HAL_TIM_PWM_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80014e4:	f000 f922 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	4619      	mov	r1, r3
 80014f6:	4815      	ldr	r0, [pc, #84]	; (800154c <MX_TIM4_Init+0xf8>)
 80014f8:	f006 f88a 	bl	8007610 <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001502:	f000 f913 	bl	800172c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001506:	2360      	movs	r3, #96	; 0x60
 8001508:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	480b      	ldr	r0, [pc, #44]	; (800154c <MX_TIM4_Init+0xf8>)
 800151e:	f005 fa4b 	bl	80069b8 <HAL_TIM_PWM_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001528:	f000 f900 	bl	800172c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800152c:	463b      	mov	r3, r7
 800152e:	2204      	movs	r2, #4
 8001530:	4619      	mov	r1, r3
 8001532:	4806      	ldr	r0, [pc, #24]	; (800154c <MX_TIM4_Init+0xf8>)
 8001534:	f005 fa40 	bl	80069b8 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 800153e:	f000 f8f5 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001542:	bf00      	nop
 8001544:	3738      	adds	r7, #56	; 0x38
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000062c 	.word	0x2000062c
 8001550:	40000800 	.word	0x40000800

08001554 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <MX_TIM6_Init+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <MX_TIM6_Init+0x64>)
 800156c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001570:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_TIM6_Init+0x64>)
 800157a:	220a      	movs	r2, #10
 800157c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001584:	480c      	ldr	r0, [pc, #48]	; (80015b8 <MX_TIM6_Init+0x64>)
 8001586:	f004 fb73 	bl	8005c70 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001590:	f000 f8cc 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800159c:	1d3b      	adds	r3, r7, #4
 800159e:	4619      	mov	r1, r3
 80015a0:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_TIM6_Init+0x64>)
 80015a2:	f006 f835 	bl	8007610 <HAL_TIMEx_MasterConfigSynchronization>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80015ac:	f000 f8be 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000678 	.word	0x20000678
 80015bc:	40001000 	.word	0x40001000

080015c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c4:	4b14      	ldr	r3, [pc, #80]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015c6:	4a15      	ldr	r2, [pc, #84]	; (800161c <MX_USART2_UART_Init+0x5c>)
 80015c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ca:	4b13      	ldr	r3, [pc, #76]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015da:	2200      	movs	r2, #0
 80015dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART2_UART_Init+0x58>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART2_UART_Init+0x58>)
 8001604:	f006 f8aa 	bl	800775c <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800160e:	f000 f88d 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200006c4 	.word	0x200006c4
 800161c:	40004400 	.word	0x40004400

08001620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001636:	4b3a      	ldr	r3, [pc, #232]	; (8001720 <MX_GPIO_Init+0x100>)
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a39      	ldr	r2, [pc, #228]	; (8001720 <MX_GPIO_Init+0x100>)
 800163c:	f043 0304 	orr.w	r3, r3, #4
 8001640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001642:	4b37      	ldr	r3, [pc, #220]	; (8001720 <MX_GPIO_Init+0x100>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	f003 0304 	and.w	r3, r3, #4
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <MX_GPIO_Init+0x100>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a33      	ldr	r2, [pc, #204]	; (8001720 <MX_GPIO_Init+0x100>)
 8001654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b31      	ldr	r3, [pc, #196]	; (8001720 <MX_GPIO_Init+0x100>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <MX_GPIO_Init+0x100>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <MX_GPIO_Init+0x100>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <MX_GPIO_Init+0x100>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b28      	ldr	r3, [pc, #160]	; (8001720 <MX_GPIO_Init+0x100>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a27      	ldr	r2, [pc, #156]	; (8001720 <MX_GPIO_Init+0x100>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b25      	ldr	r3, [pc, #148]	; (8001720 <MX_GPIO_Init+0x100>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	2160      	movs	r1, #96	; 0x60
 800169a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169e:	f002 ff7d 	bl	800459c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016a8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4619      	mov	r1, r3
 80016b8:	481a      	ldr	r0, [pc, #104]	; (8001724 <MX_GPIO_Init+0x104>)
 80016ba:	f002 fdc5 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RED_LED_Pin;
 80016be:	2360      	movs	r3, #96	; 0x60
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c2:	2301      	movs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d8:	f002 fdb6 	bl	8004248 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 80016dc:	2320      	movs	r3, #32
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 0314 	add.w	r3, r7, #20
 80016ee:	4619      	mov	r1, r3
 80016f0:	480d      	ldr	r0, [pc, #52]	; (8001728 <MX_GPIO_Init+0x108>)
 80016f2:	f002 fda9 	bl	8004248 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2017      	movs	r0, #23
 80016fc:	f002 fac7 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001700:	2017      	movs	r0, #23
 8001702:	f002 fae0 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2100      	movs	r1, #0
 800170a:	2028      	movs	r0, #40	; 0x28
 800170c:	f002 fabf 	bl	8003c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001710:	2028      	movs	r0, #40	; 0x28
 8001712:	f002 fad8 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40021000 	.word	0x40021000
 8001724:	48000800 	.word	0x48000800
 8001728:	48000400 	.word	0x48000400

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>

08001736 <buzzerInit>:

int count = 0;
uint32_t frame;

void buzzerInit(BUZZER* buzzer,TIM_HandleTypeDef *htim)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
	buzzer->htim = htim;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	601a      	str	r2, [r3, #0]

}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <buzzerStartPlay>:
void buzzerStartPlay(BUZZER* buzzer,int* song, int* frames)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
	buzzer->song = song;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	605a      	str	r2, [r3, #4]
	buzzer->frames = frames;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_AUTORELOAD(&htim3,buzzer->song[count]/2);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685a      	ldr	r2, [r3, #4]
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <buzzerStartPlay+0x8c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	0fda      	lsrs	r2, r3, #31
 800177c:	4413      	add	r3, r2
 800177e:	105b      	asrs	r3, r3, #1
 8001780:	461a      	mov	r2, r3
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <buzzerStartPlay+0x90>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685a      	ldr	r2, [r3, #4]
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <buzzerStartPlay+0x8c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	0fda      	lsrs	r2, r3, #31
 8001798:	4413      	add	r3, r2
 800179a:	105b      	asrs	r3, r3, #1
 800179c:	461a      	mov	r2, r3
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <buzzerStartPlay+0x90>)
 80017a0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,((buzzer->song[count]/2)/2));
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <buzzerStartPlay+0x8c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4413      	add	r3, r2
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da00      	bge.n	80017b6 <buzzerStartPlay+0x62>
 80017b4:	3303      	adds	r3, #3
 80017b6:	109b      	asrs	r3, r3, #2
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <buzzerStartPlay+0x90>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_TIM_Base_Start(&htim3);
 80017c0:	4808      	ldr	r0, [pc, #32]	; (80017e4 <buzzerStartPlay+0x90>)
 80017c2:	f004 faad 	bl	8005d20 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017c6:	2100      	movs	r1, #0
 80017c8:	4806      	ldr	r0, [pc, #24]	; (80017e4 <buzzerStartPlay+0x90>)
 80017ca:	f004 fc01 	bl	8005fd0 <HAL_TIM_PWM_Start>
	MainTimer_registerCallback(mainTimerBuzzer,buzzer);
 80017ce:	68f9      	ldr	r1, [r7, #12]
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <buzzerStartPlay+0x94>)
 80017d2:	f7ff fa51 	bl	8000c78 <MainTimer_registerCallback>
}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000748 	.word	0x20000748
 80017e4:	200005e0 	.word	0x200005e0
 80017e8:	08000cd7 	.word	0x08000cd7

080017ec <buzzerStopPlay>:
void buzzerStopPlay(BUZZER* buzzer)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim3);
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <buzzerStopPlay+0x34>)
 80017f6:	f004 fafb 	bl	8005df0 <HAL_TIM_Base_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80017fa:	2100      	movs	r1, #0
 80017fc:	4808      	ldr	r0, [pc, #32]	; (8001820 <buzzerStopPlay+0x34>)
 80017fe:	f004 fced 	bl	80061dc <HAL_TIM_PWM_Stop>
	MainTimer_UnregisterCallback(mainTimerBuzzer,buzzer);
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <buzzerStopPlay+0x38>)
 8001806:	f7ff fa81 	bl	8000d0c <MainTimer_UnregisterCallback>
	printf("count is %d\n\r",MainTimer_funcounter);
 800180a:	4b07      	ldr	r3, [pc, #28]	; (8001828 <buzzerStopPlay+0x3c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4806      	ldr	r0, [pc, #24]	; (800182c <buzzerStopPlay+0x40>)
 8001812:	f007 f9a3 	bl	8008b5c <iprintf>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200005e0 	.word	0x200005e0
 8001824:	08000cd7 	.word	0x08000cd7
 8001828:	200004bc 	.word	0x200004bc
 800182c:	0800a660 	.word	0x0800a660

08001830 <buzzerOnInterrupt>:

void buzzerOnInterrupt(BUZZER* buzzer)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	frame++;
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <buzzerOnInterrupt+0xcc>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a2f      	ldr	r2, [pc, #188]	; (80018fc <buzzerOnInterrupt+0xcc>)
 8001840:	6013      	str	r3, [r2, #0]
	if(frame >= buzzer->frames[count] ){
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <buzzerOnInterrupt+0xd0>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	461a      	mov	r2, r3
 8001852:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <buzzerOnInterrupt+0xcc>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d835      	bhi.n	80018c6 <buzzerOnInterrupt+0x96>
		__HAL_TIM_SET_COUNTER(&htim3,0);
 800185a:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <buzzerOnInterrupt+0xd4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(&htim3,buzzer->song[count]/2);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4b26      	ldr	r3, [pc, #152]	; (8001900 <buzzerOnInterrupt+0xd0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0fda      	lsrs	r2, r3, #31
 8001872:	4413      	add	r3, r2
 8001874:	105b      	asrs	r3, r3, #1
 8001876:	461a      	mov	r2, r3
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <buzzerOnInterrupt+0xd4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <buzzerOnInterrupt+0xd0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	0fda      	lsrs	r2, r3, #31
 800188e:	4413      	add	r3, r2
 8001890:	105b      	asrs	r3, r3, #1
 8001892:	461a      	mov	r2, r3
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <buzzerOnInterrupt+0xd4>)
 8001896:	60da      	str	r2, [r3, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1,((buzzer->song[count]/2)/2));
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <buzzerOnInterrupt+0xd0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4413      	add	r3, r2
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da00      	bge.n	80018ac <buzzerOnInterrupt+0x7c>
 80018aa:	3303      	adds	r3, #3
 80018ac:	109b      	asrs	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <buzzerOnInterrupt+0xd4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	635a      	str	r2, [r3, #52]	; 0x34
		count++;
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <buzzerOnInterrupt+0xd0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	4a10      	ldr	r2, [pc, #64]	; (8001900 <buzzerOnInterrupt+0xd0>)
 80018be:	6013      	str	r3, [r2, #0]
		frame = 0;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <buzzerOnInterrupt+0xcc>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
	}
	if(buzzer->song[count]==0 && buzzer->frames[count]== 0){
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <buzzerOnInterrupt+0xd0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10b      	bne.n	80018f0 <buzzerOnInterrupt+0xc0>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <buzzerOnInterrupt+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <buzzerOnInterrupt+0xc0>
		count=0;
 80018ea:	4b05      	ldr	r3, [pc, #20]	; (8001900 <buzzerOnInterrupt+0xd0>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
	}
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	2000074c 	.word	0x2000074c
 8001900:	20000748 	.word	0x20000748
 8001904:	200005e0 	.word	0x200005e0

08001908 <_write>:

uint32_t maxvalue = 10;
int DHTcount=0;
 uint8_t DHT_data[5];
int _write(int fd, char* ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
      HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b29a      	uxth	r2, r3
 8001918:	f04f 33ff 	mov.w	r3, #4294967295
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	4804      	ldr	r0, [pc, #16]	; (8001930 <_write+0x28>)
 8001920:	f005 ff6a 	bl	80077f8 <HAL_UART_Transmit>
      return len;
 8001924:	687b      	ldr	r3, [r7, #4]
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200006c4 	.word	0x200006c4

08001934 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	if(htim==&htim4){
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a07      	ldr	r2, [pc, #28]	; (800195c <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d107      	bne.n	8001954 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
			  HAL_GPIO_WritePin(ledblue.GPIOx, ledblue.GPIO_Pin, 0);
 8001944:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4a05      	ldr	r2, [pc, #20]	; (8001960 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 800194a:	8a11      	ldrh	r1, [r2, #16]
 800194c:	2200      	movs	r2, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f002 fe24 	bl	800459c <HAL_GPIO_WritePin>
	}
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	2000062c 	.word	0x2000062c
 8001960:	2000077c 	.word	0x2000077c

08001964 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	//adcOnInterrupt(&adc,&buzz);
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]

	Dht_onGpioInterrupt(&dht, GPIO_PIN_5);
 8001982:	2120      	movs	r1, #32
 8001984:	4803      	ldr	r0, [pc, #12]	; (8001994 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001986:	f7fe ffa3 	bl	80008d0 <Dht_onGpioInterrupt>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20001128 	.word	0x20001128

08001998 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	  if(htim == &htim6){
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d102      	bne.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x16>
		  MainTimerInterrupt();
 80019a8:	f7ff fa0e 	bl	8000dc8 <MainTimerInterrupt>

	  }
	  else if(htim==&htim4){
		  HAL_GPIO_WritePin(ledblue.GPIOx, ledblue.GPIO_Pin, 1);
	    }
}
 80019ac:	e00b      	b.n	80019c6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	  else if(htim==&htim4){
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d107      	bne.n	80019c6 <HAL_TIM_PeriodElapsedCallback+0x2e>
		  HAL_GPIO_WritePin(ledblue.GPIOx, ledblue.GPIO_Pin, 1);
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80019bc:	8a11      	ldrh	r1, [r2, #16]
 80019be:	2201      	movs	r2, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 fdeb 	bl	800459c <HAL_GPIO_WritePin>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000678 	.word	0x20000678
 80019d4:	2000062c 	.word	0x2000062c
 80019d8:	2000077c 	.word	0x2000077c

080019dc <mymaininit>:
//	}
//	return 0;
//}

int mymaininit()
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af02      	add	r7, sp, #8
	HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80019e2:	2036      	movs	r0, #54	; 0x36
 80019e4:	f002 f96f 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019e8:	201e      	movs	r0, #30
 80019ea:	f002 f96c 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019ee:	201d      	movs	r0, #29
 80019f0:	f002 f969 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80019f4:	2012      	movs	r0, #18
 80019f6:	f002 f966 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Start_IT(&htim3);
 80019fa:	4827      	ldr	r0, [pc, #156]	; (8001a98 <mymaininit+0xbc>)
 80019fc:	f004 fa20 	bl	8005e40 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001a00:	4826      	ldr	r0, [pc, #152]	; (8001a9c <mymaininit+0xc0>)
 8001a02:	f004 fa1d 	bl	8005e40 <HAL_TIM_Base_Start_IT>
    HAL_ADC_Start_IT(&hadc1);
 8001a06:	4826      	ldr	r0, [pc, #152]	; (8001aa0 <mymaininit+0xc4>)
 8001a08:	f000 ff88 	bl	800291c <HAL_ADC_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8001a0c:	4825      	ldr	r0, [pc, #148]	; (8001aa4 <mymaininit+0xc8>)
 8001a0e:	f004 fa17 	bl	8005e40 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start(&htim1);
 8001a12:	4825      	ldr	r0, [pc, #148]	; (8001aa8 <mymaininit+0xcc>)
 8001a14:	f004 f984 	bl	8005d20 <HAL_TIM_Base_Start>

    DHT_Init(&dht,GPIOB,GPIO_PIN_5);
 8001a18:	2220      	movs	r2, #32
 8001a1a:	4924      	ldr	r1, [pc, #144]	; (8001aac <mymaininit+0xd0>)
 8001a1c:	4824      	ldr	r0, [pc, #144]	; (8001ab0 <mymaininit+0xd4>)
 8001a1e:	f7fe fef7 	bl	8000810 <DHT_Init>
    adcInit(&adc,&hadc1);
 8001a22:	491f      	ldr	r1, [pc, #124]	; (8001aa0 <mymaininit+0xc4>)
 8001a24:	4823      	ldr	r0, [pc, #140]	; (8001ab4 <mymaininit+0xd8>)
 8001a26:	f000 f897 	bl	8001b58 <adcInit>
	lightsenseInit(&sensor, &hadc1, maxvalue);
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <mymaininit+0xdc>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	491b      	ldr	r1, [pc, #108]	; (8001aa0 <mymaininit+0xc4>)
 8001a32:	4822      	ldr	r0, [pc, #136]	; (8001abc <mymaininit+0xe0>)
 8001a34:	f7ff fb6c 	bl	8001110 <lightsenseInit>
	buttoninit(&button, SWO_GPIO_Port, SWO_Pin);
 8001a38:	2208      	movs	r2, #8
 8001a3a:	491c      	ldr	r1, [pc, #112]	; (8001aac <mymaininit+0xd0>)
 8001a3c:	4820      	ldr	r0, [pc, #128]	; (8001ac0 <mymaininit+0xe4>)
 8001a3e:	f000 f86f 	bl	8001b20 <buttoninit>
	ledInit(&ledred, RED_LED_GPIO_Port, RED_LED_Pin,TIM_CHANNEL_1,&htim4);
 8001a42:	4b18      	ldr	r3, [pc, #96]	; (8001aa4 <mymaininit+0xc8>)
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2300      	movs	r3, #0
 8001a48:	2240      	movs	r2, #64	; 0x40
 8001a4a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a4e:	481d      	ldr	r0, [pc, #116]	; (8001ac4 <mymaininit+0xe8>)
 8001a50:	f7ff f826 	bl	8000aa0 <ledInit>
	ledInit(&ledblue, GPIOA, GPIO_PIN_5,TIM_CHANNEL_2,&htim4);
 8001a54:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <mymaininit+0xc8>)
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2304      	movs	r3, #4
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001a60:	4819      	ldr	r0, [pc, #100]	; (8001ac8 <mymaininit+0xec>)
 8001a62:	f7ff f81d 	bl	8000aa0 <ledInit>

	clockInit(&clock,&htim6);
 8001a66:	490d      	ldr	r1, [pc, #52]	; (8001a9c <mymaininit+0xc0>)
 8001a68:	4818      	ldr	r0, [pc, #96]	; (8001acc <mymaininit+0xf0>)
 8001a6a:	f7ff f9cf 	bl	8000e0c <clockInit>
	buzzerInit(&buzz,&htim3);
 8001a6e:	490a      	ldr	r1, [pc, #40]	; (8001a98 <mymaininit+0xbc>)
 8001a70:	4817      	ldr	r0, [pc, #92]	; (8001ad0 <mymaininit+0xf4>)
 8001a72:	f7ff fe60 	bl	8001736 <buzzerInit>
	initCLI();
 8001a76:	f7fe fe6d 	bl	8000754 <initCLI>
	eraseIT();
 8001a7a:	f7fe fff7 	bl	8000a6c <eraseIT>

	char * read = (char*)(flashdata);
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <mymaininit+0xf8>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	607b      	str	r3, [r7, #4]
	printf(" string is %s\n\r",read);
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4814      	ldr	r0, [pc, #80]	; (8001ad8 <mymaininit+0xfc>)
 8001a88:	f007 f868 	bl	8008b5c <iprintf>


	return 0;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200005e0 	.word	0x200005e0
 8001a9c:	20000678 	.word	0x20000678
 8001aa0:	20000530 	.word	0x20000530
 8001aa4:	2000062c 	.word	0x2000062c
 8001aa8:	20000594 	.word	0x20000594
 8001aac:	48000400 	.word	0x48000400
 8001ab0:	20001128 	.word	0x20001128
 8001ab4:	200007c4 	.word	0x200007c4
 8001ab8:	200003f4 	.word	0x200003f4
 8001abc:	20000750 	.word	0x20000750
 8001ac0:	20000798 	.word	0x20000798
 8001ac4:	20000760 	.word	0x20000760
 8001ac8:	2000077c 	.word	0x2000077c
 8001acc:	200007ac 	.word	0x200007ac
 8001ad0:	200007b8 	.word	0x200007b8
 8001ad4:	200003f0 	.word	0x200003f0
 8001ad8:	0800a670 	.word	0x0800a670

08001adc <mymainloop>:

int mymainloop()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if (commTask()){
 8001ae0:	f7ff fa44 	bl	8000f6c <commTask>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <mymainloop+0x12>
		 handleCommand();
 8001aea:	f7ff fabd 	bl	8001068 <handleCommand>
	}

	if(Dht_hasData(&dht)){
 8001aee:	4809      	ldr	r0, [pc, #36]	; (8001b14 <mymainloop+0x38>)
 8001af0:	f7fe ff86 	bl	8000a00 <Dht_hasData>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <mymainloop+0x30>
		 printf("temp is : %d\n\r humid is : %d\r\n", DHT_data[2],DHT_data[0]);
 8001afa:	4b07      	ldr	r3, [pc, #28]	; (8001b18 <mymainloop+0x3c>)
 8001afc:	789b      	ldrb	r3, [r3, #2]
 8001afe:	4619      	mov	r1, r3
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <mymainloop+0x3c>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <mymainloop+0x40>)
 8001b08:	f007 f828 	bl	8008b5c <iprintf>
	}
	return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20001128 	.word	0x20001128
 8001b18:	2000113c 	.word	0x2000113c
 8001b1c:	0800a680 	.word	0x0800a680

08001b20 <buttoninit>:
#include "new_button.h"
#include "main.h"

void buttoninit(BUTTON* button, GPIO_TypeDef* GPIOx,uint16_t GPIO_Pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	80fb      	strh	r3, [r7, #6]
	button->GPIOx= GPIOx;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	68ba      	ldr	r2, [r7, #8]
 8001b32:	601a      	str	r2, [r3, #0]
	button->GPIO_Pin=GPIO_Pin;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	809a      	strh	r2, [r3, #4]
	 button->pushtime = 0;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
	 button->relesetime = 0;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
	 button->state=STATE_NOT_PRESSED;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	741a      	strb	r2, [r3, #16]
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <adcInit>:

int tone=0;
int value=0;
extern TIM_HandleTypeDef htim3;

void adcInit(ADC* adc,ADC_HandleTypeDef *hadc){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	adc->hadc= hadc;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	601a      	str	r2, [r3, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	4b12      	ldr	r3, [pc, #72]	; (8001bc4 <HAL_MspInit+0x50>)
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	4a11      	ldr	r2, [pc, #68]	; (8001bc4 <HAL_MspInit+0x50>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6613      	str	r3, [r2, #96]	; 0x60
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <HAL_MspInit+0x50>)
 8001b88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	4b0c      	ldr	r3, [pc, #48]	; (8001bc4 <HAL_MspInit+0x50>)
 8001b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <HAL_MspInit+0x50>)
 8001b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_MspInit+0x50>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	2004      	movs	r0, #4
 8001bb0:	f002 f86d 	bl	8003c8e <HAL_NVIC_SetPriority>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001bb4:	2004      	movs	r0, #4
 8001bb6:	f002 f886 	bl	8003cc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000

08001bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b0ac      	sub	sp, #176	; 0xb0
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001be0:	f107 0314 	add.w	r3, r7, #20
 8001be4:	2288      	movs	r2, #136	; 0x88
 8001be6:	2100      	movs	r1, #0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f006 ffaf 	bl	8008b4c <memset>
  if(hadc->Instance==ADC1)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_ADC_MspInit+0xd8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d14f      	bne.n	8001c98 <HAL_ADC_MspInit+0xd0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bfc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bfe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001c0e:	2308      	movs	r3, #8
 8001c10:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001c12:	2307      	movs	r3, #7
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c16:	2302      	movs	r3, #2
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fb65 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001c34:	f7ff fd7a 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c38:	4b1a      	ldr	r3, [pc, #104]	; (8001ca4 <HAL_ADC_MspInit+0xdc>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	4a19      	ldr	r2, [pc, #100]	; (8001ca4 <HAL_ADC_MspInit+0xdc>)
 8001c3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c44:	4b17      	ldr	r3, [pc, #92]	; (8001ca4 <HAL_ADC_MspInit+0xdc>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_ADC_MspInit+0xdc>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	4a13      	ldr	r2, [pc, #76]	; (8001ca4 <HAL_ADC_MspInit+0xdc>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_ADC_MspInit+0xdc>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c6e:	230b      	movs	r3, #11
 8001c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c84:	f002 fae0 	bl	8004248 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2012      	movs	r0, #18
 8001c8e:	f001 fffe 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c92:	2012      	movs	r0, #18
 8001c94:	f002 f817 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c98:	bf00      	nop
 8001c9a:	37b0      	adds	r7, #176	; 0xb0
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	50040000 	.word	0x50040000
 8001ca4:	40021000 	.word	0x40021000

08001ca8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a23      	ldr	r2, [pc, #140]	; (8001d44 <HAL_TIM_Base_MspInit+0x9c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001cc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001cd2:	e032      	b.n	8001d3a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM4)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <HAL_TIM_Base_MspInit+0xa4>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d114      	bne.n	8001d08 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cde:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce2:	4a19      	ldr	r2, [pc, #100]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	6593      	str	r3, [r2, #88]	; 0x58
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	201e      	movs	r0, #30
 8001cfc:	f001 ffc7 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d00:	201e      	movs	r0, #30
 8001d02:	f001 ffe0 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
}
 8001d06:	e018      	b.n	8001d3a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM6)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_TIM_Base_MspInit+0xa8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d113      	bne.n	8001d3a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d16:	4a0c      	ldr	r2, [pc, #48]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001d18:	f043 0310 	orr.w	r3, r3, #16
 8001d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	; (8001d48 <HAL_TIM_Base_MspInit+0xa0>)
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2036      	movs	r0, #54	; 0x36
 8001d30:	f001 ffad 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d34:	2036      	movs	r0, #54	; 0x36
 8001d36:	f001 ffc6 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40012c00 	.word	0x40012c00
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	40000800 	.word	0x40000800
 8001d50:	40001000 	.word	0x40001000

08001d54 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <HAL_TIM_PWM_MspInit+0x44>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d113      	bne.n	8001d8e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_TIM_PWM_MspInit+0x48>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <HAL_TIM_PWM_MspInit+0x48>)
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	6593      	str	r3, [r2, #88]	; 0x58
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_TIM_PWM_MspInit+0x48>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2100      	movs	r1, #0
 8001d82:	201d      	movs	r0, #29
 8001d84:	f001 ff83 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d88:	201d      	movs	r0, #29
 8001d8a:	f001 ff9c 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_TIM_MspPostInit+0x64>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11b      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001dda:	2310      	movs	r3, #16
 8001ddc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001df6:	f002 fa27 	bl	8004248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	48000400 	.word	0x48000400

08001e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b0ac      	sub	sp, #176	; 0xb0
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2288      	movs	r2, #136	; 0x88
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f006 fe8b 	bl	8008b4c <memset>
  if(huart->Instance==USART2)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a25      	ldr	r2, [pc, #148]	; (8001ed0 <HAL_UART_MspInit+0xc0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d143      	bne.n	8001ec8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fa53 	bl	80052f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e58:	f7ff fc68 	bl	800172c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_UART_MspInit+0xc4>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a1c      	ldr	r2, [pc, #112]	; (8001ed4 <HAL_UART_MspInit+0xc4>)
 8001e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_UART_MspInit+0xc4>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_UART_MspInit+0xc4>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_UART_MspInit+0xc4>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_UART_MspInit+0xc4>)
 8001e82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea4:	2307      	movs	r3, #7
 8001ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f002 f9c8 	bl	8004248 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	2026      	movs	r0, #38	; 0x26
 8001ebe:	f001 fee6 	bl	8003c8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec2:	2026      	movs	r0, #38	; 0x26
 8001ec4:	f001 feff 	bl	8003cc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	37b0      	adds	r7, #176	; 0xb0
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40004400 	.word	0x40004400
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001edc:	e7fe      	b.n	8001edc <NMI_Handler+0x4>

08001ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee2:	e7fe      	b.n	8001ee2 <HardFault_Handler+0x4>

08001ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee8:	e7fe      	b.n	8001ee8 <MemManage_Handler+0x4>

08001eea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eea:	b480      	push	{r7}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eee:	e7fe      	b.n	8001eee <BusFault_Handler+0x4>

08001ef0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <UsageFault_Handler+0x4>

08001ef6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f24:	f000 f96a 	bl	80021fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001f30:	f001 ff62 	bl	8003df8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */
//  programIT();

  /* USER CODE END FLASH_IRQn 1 */
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <ADC1_2_IRQHandler+0x10>)
 8001f3e:	f000 fe1f 	bl	8002b80 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000530 	.word	0x20000530

08001f4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(D4_Pin);
 8001f50:	2020      	movs	r0, #32
 8001f52:	f002 fb55 	bl	8004600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM3_IRQHandler+0x10>)
 8001f62:	f004 fc09 	bl	8006778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	200005e0 	.word	0x200005e0

08001f70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f74:	4802      	ldr	r0, [pc, #8]	; (8001f80 <TIM4_IRQHandler+0x10>)
 8001f76:	f004 fbff 	bl	8006778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000062c 	.word	0x2000062c

08001f84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <USART2_IRQHandler+0x10>)
 8001f8a:	f005 fd9b 	bl	8007ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200006c4 	.word	0x200006c4

08001f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fa0:	f002 fb2e 	bl	8004600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM6_DAC_IRQHandler+0x10>)
 8001fae:	f004 fbe3 	bl	8006778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000678 	.word	0x20000678

08001fbc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00a      	b.n	8001fe4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fce:	f3af 8000 	nop.w
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf0      	blt.n	8001fce <_read+0x12>
	}

return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	b083      	sub	sp, #12
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ffe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002002:	4618      	mov	r0, r3
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
 8002016:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800201e:	605a      	str	r2, [r3, #4]
	return 0;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <_isatty>:

int _isatty(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
	return 1;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
	return 0;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <_sbrk+0x5c>)
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <_sbrk+0x60>)
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <_sbrk+0x64>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d102      	bne.n	8002082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <_sbrk+0x64>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <_sbrk+0x68>)
 8002080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	429a      	cmp	r2, r3
 800208e:	d207      	bcs.n	80020a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002090:	f006 fd32 	bl	8008af8 <__errno>
 8002094:	4603      	mov	r3, r0
 8002096:	220c      	movs	r2, #12
 8002098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209a:	f04f 33ff 	mov.w	r3, #4294967295
 800209e:	e009      	b.n	80020b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a0:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <_sbrk+0x64>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <_sbrk+0x64>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	4a05      	ldr	r2, [pc, #20]	; (80020c4 <_sbrk+0x64>)
 80020b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b2:	68fb      	ldr	r3, [r7, #12]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20018000 	.word	0x20018000
 80020c0:	00000400 	.word	0x00000400
 80020c4:	20001144 	.word	0x20001144
 80020c8:	20001160 	.word	0x20001160

080020cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <SystemInit+0x20>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <SystemInit+0x20>)
 80020d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002128 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f4:	f7ff ffea 	bl	80020cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <LoopForever+0x6>)
  ldr r1, =_edata
 80020fa:	490d      	ldr	r1, [pc, #52]	; (8002130 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <LoopForever+0xe>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002100:	e002      	b.n	8002108 <LoopCopyDataInit>

08002102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002106:	3304      	adds	r3, #4

08002108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800210a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800210c:	d3f9      	bcc.n	8002102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002110:	4c0a      	ldr	r4, [pc, #40]	; (800213c <LoopForever+0x16>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002114:	e001      	b.n	800211a <LoopFillZerobss>

08002116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002118:	3204      	adds	r2, #4

0800211a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800211a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800211c:	d3fb      	bcc.n	8002116 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211e:	f006 fcf1 	bl	8008b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002122:	f7ff f807 	bl	8001134 <main>

08002126 <LoopForever>:

LoopForever:
    b LoopForever
 8002126:	e7fe      	b.n	8002126 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002128:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800212c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002130:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8002134:	0800a8bc 	.word	0x0800a8bc
  ldr r2, =_sbss
 8002138:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 800213c:	2000115c 	.word	0x2000115c

08002140 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002140:	e7fe      	b.n	8002140 <ADC3_IRQHandler>
	...

08002144 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800214a:	2300      	movs	r3, #0
 800214c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214e:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_Init+0x3c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_Init+0x3c>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215a:	2003      	movs	r0, #3
 800215c:	f001 fd8c 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002160:	2000      	movs	r0, #0
 8002162:	f000 f80f 	bl	8002184 <HAL_InitTick>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	e001      	b.n	8002176 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002172:	f7ff fcff 	bl	8001b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002176:	79fb      	ldrb	r3, [r7, #7]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40022000 	.word	0x40022000

08002184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002190:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <HAL_InitTick+0x6c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d023      	beq.n	80021e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_InitTick+0x70>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_InitTick+0x6c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	4619      	mov	r1, r3
 80021a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 fd97 	bl	8003ce2 <HAL_SYSTICK_Config>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10f      	bne.n	80021da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b0f      	cmp	r3, #15
 80021be:	d809      	bhi.n	80021d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c0:	2200      	movs	r2, #0
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	f04f 30ff 	mov.w	r0, #4294967295
 80021c8:	f001 fd61 	bl	8003c8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021cc:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_InitTick+0x74>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e007      	b.n	80021e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e004      	b.n	80021e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	73fb      	strb	r3, [r7, #15]
 80021de:	e001      	b.n	80021e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000400 	.word	0x20000400
 80021f4:	200003f8 	.word	0x200003f8
 80021f8:	200003fc 	.word	0x200003fc

080021fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002200:	4b06      	ldr	r3, [pc, #24]	; (800221c <HAL_IncTick+0x20>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b06      	ldr	r3, [pc, #24]	; (8002220 <HAL_IncTick+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a04      	ldr	r2, [pc, #16]	; (8002220 <HAL_IncTick+0x24>)
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000400 	.word	0x20000400
 8002220:	20001148 	.word	0x20001148

08002224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTick;
 8002228:	4b03      	ldr	r3, [pc, #12]	; (8002238 <HAL_GetTick+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20001148 	.word	0x20001148

0800223c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002244:	f7ff ffee 	bl	8002224 <HAL_GetTick>
 8002248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002254:	d005      	beq.n	8002262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_Delay+0x44>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	461a      	mov	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	4413      	add	r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002262:	bf00      	nop
 8002264:	f7ff ffde 	bl	8002224 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	429a      	cmp	r2, r3
 8002272:	d8f7      	bhi.n	8002264 <HAL_Delay+0x28>
  {
  }
}
 8002274:	bf00      	nop
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000400 	.word	0x20000400

08002284 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	609a      	str	r2, [r3, #8]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	3360      	adds	r3, #96	; 0x60
 80022fe:	461a      	mov	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <LL_ADC_SetOffset+0x44>)
 800230e:	4013      	ands	r3, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	430a      	orrs	r2, r1
 800231a:	4313      	orrs	r3, r2
 800231c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	03fff000 	.word	0x03fff000

08002334 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3360      	adds	r3, #96	; 0x60
 8002342:	461a      	mov	r2, r3
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3360      	adds	r3, #96	; 0x60
 8002370:	461a      	mov	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	431a      	orrs	r2, r3
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800238a:	bf00      	nop
 800238c:	371c      	adds	r7, #28
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80023bc:	b480      	push	{r7}
 80023be:	b087      	sub	sp, #28
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3330      	adds	r3, #48	; 0x30
 80023cc:	461a      	mov	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	0a1b      	lsrs	r3, r3, #8
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	4413      	add	r3, r2
 80023da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	211f      	movs	r1, #31
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	43db      	mvns	r3, r3
 80023ee:	401a      	ands	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0e9b      	lsrs	r3, r3, #26
 80023f4:	f003 011f 	and.w	r1, r3, #31
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 031f 	and.w	r3, r3, #31
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	431a      	orrs	r2, r3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002408:	bf00      	nop
 800240a:	371c      	adds	r7, #28
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002420:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800243a:	b480      	push	{r7}
 800243c:	b087      	sub	sp, #28
 800243e:	af00      	add	r7, sp, #0
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3314      	adds	r3, #20
 800244a:	461a      	mov	r2, r3
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	0e5b      	lsrs	r3, r3, #25
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	4413      	add	r3, r2
 8002458:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	0d1b      	lsrs	r3, r3, #20
 8002462:	f003 031f 	and.w	r3, r3, #31
 8002466:	2107      	movs	r1, #7
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	401a      	ands	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	0d1b      	lsrs	r3, r3, #20
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	431a      	orrs	r2, r3
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002484:	bf00      	nop
 8002486:	371c      	adds	r7, #28
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a8:	43db      	mvns	r3, r3
 80024aa:	401a      	ands	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f003 0318 	and.w	r3, r3, #24
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80024b4:	40d9      	lsrs	r1, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	400b      	ands	r3, r1
 80024ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024be:	431a      	orrs	r2, r3
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	0007ffff 	.word	0x0007ffff

080024d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 031f 	and.w	r3, r3, #31
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002504:	4618      	mov	r0, r3
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002524:	687a      	ldr	r2, [r7, #4]
 8002526:	6093      	str	r3, [r2, #8]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002544:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002548:	d101      	bne.n	800254e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800256c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002570:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002598:	d101      	bne.n	800259e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c0:	f043 0201 	orr.w	r2, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <LL_ADC_IsEnabled+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_ADC_IsEnabled+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800260a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800260e:	f043 0204 	orr.w	r2, r3, #4
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b04      	cmp	r3, #4
 8002634:	d101      	bne.n	800263a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b08      	cmp	r3, #8
 800265a:	d101      	bne.n	8002660 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800265c:	2301      	movs	r3, #1
 800265e:	e000      	b.n	8002662 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002670:	b590      	push	{r4, r7, lr}
 8002672:	b089      	sub	sp, #36	; 0x24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e136      	b.n	80028f8 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff fa95 	bl	8001bc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff ff3f 	bl	8002534 <LL_ADC_IsDeepPowerDownEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d004      	beq.n	80026c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff25 	bl	8002510 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff ff5a 	bl	8002584 <LL_ADC_IsInternalRegulatorEnabled>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d115      	bne.n	8002702 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff3e 	bl	800255c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026e0:	4b87      	ldr	r3, [pc, #540]	; (8002900 <HAL_ADC_Init+0x290>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	4a87      	ldr	r2, [pc, #540]	; (8002904 <HAL_ADC_Init+0x294>)
 80026e8:	fba2 2303 	umull	r2, r3, r2, r3
 80026ec:	099b      	lsrs	r3, r3, #6
 80026ee:	3301      	adds	r3, #1
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026f4:	e002      	b.n	80026fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f9      	bne.n	80026f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff3c 	bl	8002584 <LL_ADC_IsInternalRegulatorEnabled>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f043 0210 	orr.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff75 	bl	8002622 <LL_ADC_REG_IsConversionOngoing>
 8002738:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b00      	cmp	r3, #0
 8002744:	f040 80cf 	bne.w	80028e6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 80cb 	bne.w	80028e6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002758:	f043 0202 	orr.w	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff35 	bl	80025d4 <LL_ADC_IsEnabled>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d115      	bne.n	800279c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002770:	4865      	ldr	r0, [pc, #404]	; (8002908 <HAL_ADC_Init+0x298>)
 8002772:	f7ff ff2f 	bl	80025d4 <LL_ADC_IsEnabled>
 8002776:	4604      	mov	r4, r0
 8002778:	4864      	ldr	r0, [pc, #400]	; (800290c <HAL_ADC_Init+0x29c>)
 800277a:	f7ff ff2b 	bl	80025d4 <LL_ADC_IsEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	431c      	orrs	r4, r3
 8002782:	4863      	ldr	r0, [pc, #396]	; (8002910 <HAL_ADC_Init+0x2a0>)
 8002784:	f7ff ff26 	bl	80025d4 <LL_ADC_IsEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	4323      	orrs	r3, r4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	4619      	mov	r1, r3
 8002796:	485f      	ldr	r0, [pc, #380]	; (8002914 <HAL_ADC_Init+0x2a4>)
 8002798:	f7ff fd74 	bl	8002284 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	7e5b      	ldrb	r3, [r3, #25]
 80027a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80027ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80027b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d106      	bne.n	80027d8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	3b01      	subs	r3, #1
 80027d0:	045b      	lsls	r3, r3, #17
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d009      	beq.n	80027f4 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b47      	ldr	r3, [pc, #284]	; (8002918 <HAL_ADC_Init+0x2a8>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	69b9      	ldr	r1, [r7, #24]
 8002804:	430b      	orrs	r3, r1
 8002806:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7ff ff08 	bl	8002622 <LL_ADC_REG_IsConversionOngoing>
 8002812:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff15 	bl	8002648 <LL_ADC_INJ_IsConversionOngoing>
 800281e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d13d      	bne.n	80028a2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d13a      	bne.n	80028a2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002830:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002838:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002848:	f023 0302 	bic.w	r3, r3, #2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	69b9      	ldr	r1, [r7, #24]
 8002852:	430b      	orrs	r3, r1
 8002854:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800285c:	2b01      	cmp	r3, #1
 800285e:	d118      	bne.n	8002892 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002882:	430a      	orrs	r2, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	611a      	str	r2, [r3, #16]
 8002890:	e007      	b.n	80028a2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d10c      	bne.n	80028c4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f023 010f 	bic.w	r1, r3, #15
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	1e5a      	subs	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	631a      	str	r2, [r3, #48]	; 0x30
 80028c2:	e007      	b.n	80028d4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 020f 	bic.w	r2, r2, #15
 80028d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d8:	f023 0303 	bic.w	r3, r3, #3
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	; 0x54
 80028e4:	e007      	b.n	80028f6 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f043 0210 	orr.w	r2, r3, #16
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3724      	adds	r7, #36	; 0x24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}
 8002900:	200003f8 	.word	0x200003f8
 8002904:	053e2d63 	.word	0x053e2d63
 8002908:	50040000 	.word	0x50040000
 800290c:	50040100 	.word	0x50040100
 8002910:	50040200 	.word	0x50040200
 8002914:	50040300 	.word	0x50040300
 8002918:	fff0c007 	.word	0xfff0c007

0800291c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002924:	4893      	ldr	r0, [pc, #588]	; (8002b74 <HAL_ADC_Start_IT+0x258>)
 8002926:	f7ff fdd7 	bl	80024d8 <LL_ADC_GetMultimode>
 800292a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fe76 	bl	8002622 <LL_ADC_REG_IsConversionOngoing>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 8111 	bne.w	8002b60 <HAL_ADC_Start_IT+0x244>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002944:	2b01      	cmp	r3, #1
 8002946:	d101      	bne.n	800294c <HAL_ADC_Start_IT+0x30>
 8002948:	2302      	movs	r3, #2
 800294a:	e10e      	b.n	8002b6a <HAL_ADC_Start_IT+0x24e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 ff31 	bl	80037bc <ADC_Enable>
 800295a:	4603      	mov	r3, r0
 800295c:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800295e:	7dfb      	ldrb	r3, [r7, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	f040 80f8 	bne.w	8002b56 <HAL_ADC_Start_IT+0x23a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800296e:	f023 0301 	bic.w	r3, r3, #1
 8002972:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7e      	ldr	r2, [pc, #504]	; (8002b78 <HAL_ADC_Start_IT+0x25c>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d002      	beq.n	800298a <HAL_ADC_Start_IT+0x6e>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e000      	b.n	800298c <HAL_ADC_Start_IT+0x70>
 800298a:	4b7c      	ldr	r3, [pc, #496]	; (8002b7c <HAL_ADC_Start_IT+0x260>)
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6812      	ldr	r2, [r2, #0]
 8002990:	4293      	cmp	r3, r2
 8002992:	d002      	beq.n	800299a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d006      	beq.n	80029c0 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f023 0206 	bic.w	r2, r3, #6
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	659a      	str	r2, [r3, #88]	; 0x58
 80029be:	e002      	b.n	80029c6 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	221c      	movs	r2, #28
 80029cc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 021c 	bic.w	r2, r2, #28
 80029e4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d108      	bne.n	8002a00 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0208 	orr.w	r2, r2, #8
 80029fc:	605a      	str	r2, [r3, #4]
          break;
 80029fe:	e008      	b.n	8002a12 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0204 	orr.w	r2, r2, #4
 8002a0e:	605a      	str	r2, [r3, #4]
          break;
 8002a10:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0210 	orr.w	r2, r2, #16
 8002a28:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a52      	ldr	r2, [pc, #328]	; (8002b78 <HAL_ADC_Start_IT+0x25c>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d002      	beq.n	8002a3a <HAL_ADC_Start_IT+0x11e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	e000      	b.n	8002a3c <HAL_ADC_Start_IT+0x120>
 8002a3a:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_ADC_Start_IT+0x260>)
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d008      	beq.n	8002a56 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	2b05      	cmp	r3, #5
 8002a4e:	d002      	beq.n	8002a56 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	2b09      	cmp	r3, #9
 8002a54:	d13b      	bne.n	8002ace <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02d      	beq.n	8002ac0 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d110      	bne.n	8002a9e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0220 	bic.w	r2, r2, #32
 8002a8a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a9a:	605a      	str	r2, [r3, #4]
              break;
 8002a9c:	e011      	b.n	8002ac2 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aac:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	605a      	str	r2, [r3, #4]
              break;
 8002abe:	e000      	b.n	8002ac2 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002ac0:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fd97 	bl	80025fa <LL_ADC_REG_StartConversion>
 8002acc:	e04c      	b.n	8002b68 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a26      	ldr	r2, [pc, #152]	; (8002b78 <HAL_ADC_Start_IT+0x25c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d002      	beq.n	8002aea <HAL_ADC_Start_IT+0x1ce>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	e000      	b.n	8002aec <HAL_ADC_Start_IT+0x1d0>
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_ADC_Start_IT+0x260>)
 8002aec:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d035      	beq.n	8002b66 <HAL_ADC_Start_IT+0x24a>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d110      	bne.n	8002b34 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0220 	bic.w	r2, r2, #32
 8002b20:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b30:	605a      	str	r2, [r3, #4]
              break;
 8002b32:	e019      	b.n	8002b68 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b42:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0220 	orr.w	r2, r2, #32
 8002b52:	605a      	str	r2, [r3, #4]
              break;
 8002b54:	e008      	b.n	8002b68 <HAL_ADC_Start_IT+0x24c>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002b5e:	e003      	b.n	8002b68 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002b60:	2302      	movs	r3, #2
 8002b62:	75fb      	strb	r3, [r7, #23]
 8002b64:	e000      	b.n	8002b68 <HAL_ADC_Start_IT+0x24c>
        }
 8002b66:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8002b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	50040300 	.word	0x50040300
 8002b78:	50040100 	.word	0x50040100
 8002b7c:	50040000 	.word	0x50040000

08002b80 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b9c:	4882      	ldr	r0, [pc, #520]	; (8002da8 <HAL_ADC_IRQHandler+0x228>)
 8002b9e:	f7ff fc9b 	bl	80024d8 <LL_ADC_GetMultimode>
 8002ba2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d017      	beq.n	8002bde <HAL_ADC_IRQHandler+0x5e>
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fec7 	bl	8003964 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f003 0304 	and.w	r3, r3, #4
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_ADC_IRQHandler+0x72>
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10a      	bne.n	8002c08 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8083 	beq.w	8002d04 <HAL_ADC_IRQHandler+0x184>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d07d      	beq.n	8002d04 <HAL_ADC_IRQHandler+0x184>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fbb6 	bl	8002396 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d062      	beq.n	8002cf6 <HAL_ADC_IRQHandler+0x176>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a5d      	ldr	r2, [pc, #372]	; (8002dac <HAL_ADC_IRQHandler+0x22c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d002      	beq.n	8002c40 <HAL_ADC_IRQHandler+0xc0>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	e000      	b.n	8002c42 <HAL_ADC_IRQHandler+0xc2>
 8002c40:	4b5b      	ldr	r3, [pc, #364]	; (8002db0 <HAL_ADC_IRQHandler+0x230>)
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d008      	beq.n	8002c5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d005      	beq.n	8002c5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b05      	cmp	r3, #5
 8002c54:	d002      	beq.n	8002c5c <HAL_ADC_IRQHandler+0xdc>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b09      	cmp	r3, #9
 8002c5a:	d104      	bne.n	8002c66 <HAL_ADC_IRQHandler+0xe6>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	623b      	str	r3, [r7, #32]
 8002c64:	e00c      	b.n	8002c80 <HAL_ADC_IRQHandler+0x100>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a50      	ldr	r2, [pc, #320]	; (8002dac <HAL_ADC_IRQHandler+0x22c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d002      	beq.n	8002c76 <HAL_ADC_IRQHandler+0xf6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	e000      	b.n	8002c78 <HAL_ADC_IRQHandler+0xf8>
 8002c76:	4b4e      	ldr	r3, [pc, #312]	; (8002db0 <HAL_ADC_IRQHandler+0x230>)
 8002c78:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d135      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x176>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d12e      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x176>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fcc0 	bl	8002622 <LL_ADC_REG_IsConversionOngoing>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d11a      	bne.n	8002cde <HAL_ADC_IRQHandler+0x15e>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 020c 	bic.w	r2, r2, #12
 8002cb6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d112      	bne.n	8002cf6 <HAL_ADC_IRQHandler+0x176>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd4:	f043 0201 	orr.w	r2, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	; 0x54
 8002cdc:	e00b      	b.n	8002cf6 <HAL_ADC_IRQHandler+0x176>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce2:	f043 0210 	orr.w	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7fe fe34 	bl	8001964 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	220c      	movs	r2, #12
 8002d02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d004      	beq.n	8002d18 <HAL_ADC_IRQHandler+0x198>
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 809f 	beq.w	8002e62 <HAL_ADC_IRQHandler+0x2e2>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8099 	beq.w	8002e62 <HAL_ADC_IRQHandler+0x2e2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d105      	bne.n	8002d48 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fb61 	bl	8002414 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002d52:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff fb1c 	bl	8002396 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d5e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a11      	ldr	r2, [pc, #68]	; (8002dac <HAL_ADC_IRQHandler+0x22c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d002      	beq.n	8002d70 <HAL_ADC_IRQHandler+0x1f0>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	e000      	b.n	8002d72 <HAL_ADC_IRQHandler+0x1f2>
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_ADC_IRQHandler+0x230>)
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d008      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d002      	beq.n	8002d8c <HAL_ADC_IRQHandler+0x20c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b07      	cmp	r3, #7
 8002d8a:	d104      	bne.n	8002d96 <HAL_ADC_IRQHandler+0x216>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	623b      	str	r3, [r7, #32]
 8002d94:	e013      	b.n	8002dbe <HAL_ADC_IRQHandler+0x23e>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_ADC_IRQHandler+0x22c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_ADC_IRQHandler+0x234>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	e007      	b.n	8002db6 <HAL_ADC_IRQHandler+0x236>
 8002da6:	bf00      	nop
 8002da8:	50040300 	.word	0x50040300
 8002dac:	50040100 	.word	0x50040100
 8002db0:	50040000 	.word	0x50040000
 8002db4:	4b7d      	ldr	r3, [pc, #500]	; (8002fac <HAL_ADC_IRQHandler+0x42c>)
 8002db6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d047      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x2d4>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002dc4:	6a3b      	ldr	r3, [r7, #32]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d007      	beq.n	8002dde <HAL_ADC_IRQHandler+0x25e>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03f      	beq.n	8002e54 <HAL_ADC_IRQHandler+0x2d4>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d13a      	bne.n	8002e54 <HAL_ADC_IRQHandler+0x2d4>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d133      	bne.n	8002e54 <HAL_ADC_IRQHandler+0x2d4>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d12e      	bne.n	8002e54 <HAL_ADC_IRQHandler+0x2d4>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fc24 	bl	8002648 <LL_ADC_INJ_IsConversionOngoing>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d11a      	bne.n	8002e3c <HAL_ADC_IRQHandler+0x2bc>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e14:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d112      	bne.n	8002e54 <HAL_ADC_IRQHandler+0x2d4>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e32:	f043 0201 	orr.w	r2, r3, #1
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	655a      	str	r2, [r3, #84]	; 0x54
 8002e3a:	e00b      	b.n	8002e54 <HAL_ADC_IRQHandler+0x2d4>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e40:	f043 0210 	orr.w	r2, r3, #16
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f043 0201 	orr.w	r2, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fd5d 	bl	8003914 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2260      	movs	r2, #96	; 0x60
 8002e60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d011      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x310>
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00c      	beq.n	8002e90 <HAL_ADC_IRQHandler+0x310>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f896 	bl	8002fb4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x340>
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_ADC_IRQHandler+0x340>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fd43 	bl	800393c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ebe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d012      	beq.n	8002ef0 <HAL_ADC_IRQHandler+0x370>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_ADC_IRQHandler+0x370>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fd35 	bl	8003950 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f003 0310 	and.w	r3, r3, #16
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d036      	beq.n	8002f68 <HAL_ADC_IRQHandler+0x3e8>
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d031      	beq.n	8002f68 <HAL_ADC_IRQHandler+0x3e8>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d102      	bne.n	8002f12 <HAL_ADC_IRQHandler+0x392>
    {
      overrun_error = 1UL;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f10:	e014      	b.n	8002f3c <HAL_ADC_IRQHandler+0x3bc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_ADC_IRQHandler+0x3aa>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f18:	4825      	ldr	r0, [pc, #148]	; (8002fb0 <HAL_ADC_IRQHandler+0x430>)
 8002f1a:	f7ff faeb 	bl	80024f4 <LL_ADC_GetMultiDMATransfer>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00b      	beq.n	8002f3c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
 8002f28:	e008      	b.n	8002f3c <HAL_ADC_IRQHandler+0x3bc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_ADC_IRQHandler+0x3bc>
        {
          overrun_error = 1UL;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d10e      	bne.n	8002f60 <HAL_ADC_IRQHandler+0x3e0>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f043 0202 	orr.w	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f834 	bl	8002fc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2210      	movs	r2, #16
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d018      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x424>
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_ADC_IRQHandler+0x424>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8c:	f043 0208 	orr.w	r2, r3, #8
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f9c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fcc2 	bl	8003928 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002fa4:	bf00      	nop
 8002fa6:	3728      	adds	r7, #40	; 0x28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	50040000 	.word	0x50040000
 8002fb0:	50040300 	.word	0x50040300

08002fb4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b0b6      	sub	sp, #216	; 0xd8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_ADC_ConfigChannel+0x22>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e3c7      	b.n	800378e <HAL_ADC_ConfigChannel+0x7b2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff fb09 	bl	8002622 <LL_ADC_REG_IsConversionOngoing>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	f040 83a8 	bne.w	8003768 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d824      	bhi.n	800306a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	3b02      	subs	r3, #2
 8003026:	2b03      	cmp	r3, #3
 8003028:	d81b      	bhi.n	8003062 <HAL_ADC_ConfigChannel+0x86>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <HAL_ADC_ConfigChannel+0x54>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003041 	.word	0x08003041
 8003034:	08003049 	.word	0x08003049
 8003038:	08003051 	.word	0x08003051
 800303c:	08003059 	.word	0x08003059
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	220c      	movs	r2, #12
 8003044:	605a      	str	r2, [r3, #4]
          break;
 8003046:	e011      	b.n	800306c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2212      	movs	r2, #18
 800304c:	605a      	str	r2, [r3, #4]
          break;
 800304e:	e00d      	b.n	800306c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2218      	movs	r2, #24
 8003054:	605a      	str	r2, [r3, #4]
          break;
 8003056:	e009      	b.n	800306c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800305e:	605a      	str	r2, [r3, #4]
          break;
 8003060:	e004      	b.n	800306c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2206      	movs	r2, #6
 8003066:	605a      	str	r2, [r3, #4]
          break;
 8003068:	e000      	b.n	800306c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800306a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6859      	ldr	r1, [r3, #4]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	f7ff f99f 	bl	80023bc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff facd 	bl	8002622 <LL_ADC_REG_IsConversionOngoing>
 8003088:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fad9 	bl	8002648 <LL_ADC_INJ_IsConversionOngoing>
 8003096:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800309a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 81a6 	bne.w	80033f0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80030a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f040 81a1 	bne.w	80033f0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff f9bd 	bl	800243a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d00a      	beq.n	80030f8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6919      	ldr	r1, [r3, #16]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030f2:	f7ff f8fb 	bl	80022ec <LL_ADC_SetOffset>
 80030f6:	e17b      	b.n	80033f0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2100      	movs	r1, #0
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff f918 	bl	8002334 <LL_ADC_GetOffsetChannel>
 8003104:	4603      	mov	r3, r0
 8003106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10a      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x148>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2100      	movs	r1, #0
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff f90d 	bl	8002334 <LL_ADC_GetOffsetChannel>
 800311a:	4603      	mov	r3, r0
 800311c:	0e9b      	lsrs	r3, r3, #26
 800311e:	f003 021f 	and.w	r2, r3, #31
 8003122:	e01e      	b.n	8003162 <HAL_ADC_ConfigChannel+0x186>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff f902 	bl	8002334 <LL_ADC_GetOffsetChannel>
 8003130:	4603      	mov	r3, r0
 8003132:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003136:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800313a:	fa93 f3a3 	rbit	r3, r3
 800313e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003146:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800314a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8003152:	2320      	movs	r3, #32
 8003154:	e004      	b.n	8003160 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8003156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800315a:	fab3 f383 	clz	r3, r3
 800315e:	b2db      	uxtb	r3, r3
 8003160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316a:	2b00      	cmp	r3, #0
 800316c:	d105      	bne.n	800317a <HAL_ADC_ConfigChannel+0x19e>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	0e9b      	lsrs	r3, r3, #26
 8003174:	f003 031f 	and.w	r3, r3, #31
 8003178:	e018      	b.n	80031ac <HAL_ADC_ConfigChannel+0x1d0>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800318e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003192:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800319e:	2320      	movs	r3, #32
 80031a0:	e004      	b.n	80031ac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80031a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d106      	bne.n	80031be <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f8d1 	bl	8002360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7ff f8b5 	bl	8002334 <LL_ADC_GetOffsetChannel>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x20e>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2101      	movs	r1, #1
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f8aa 	bl	8002334 <LL_ADC_GetOffsetChannel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	0e9b      	lsrs	r3, r3, #26
 80031e4:	f003 021f 	and.w	r2, r3, #31
 80031e8:	e01e      	b.n	8003228 <HAL_ADC_ConfigChannel+0x24c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2101      	movs	r1, #1
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff f89f 	bl	8002334 <LL_ADC_GetOffsetChannel>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800320c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e004      	b.n	8003226 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800321c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	b2db      	uxtb	r3, r3
 8003226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x264>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	0e9b      	lsrs	r3, r3, #26
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	e018      	b.n	8003272 <HAL_ADC_ConfigChannel+0x296>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800324c:	fa93 f3a3 	rbit	r3, r3
 8003250:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003254:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800325c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8003264:	2320      	movs	r3, #32
 8003266:	e004      	b.n	8003272 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8003268:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800326c:	fab3 f383 	clz	r3, r3
 8003270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003272:	429a      	cmp	r2, r3
 8003274:	d106      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2200      	movs	r2, #0
 800327c:	2101      	movs	r1, #1
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f86e 	bl	8002360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2102      	movs	r1, #2
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff f852 	bl	8002334 <LL_ADC_GetOffsetChannel>
 8003290:	4603      	mov	r3, r0
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x2d4>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff f847 	bl	8002334 <LL_ADC_GetOffsetChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	0e9b      	lsrs	r3, r3, #26
 80032aa:	f003 021f 	and.w	r2, r3, #31
 80032ae:	e01e      	b.n	80032ee <HAL_ADC_ConfigChannel+0x312>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2102      	movs	r1, #2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f83c 	bl	8002334 <LL_ADC_GetOffsetChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80032de:	2320      	movs	r3, #32
 80032e0:	e004      	b.n	80032ec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80032e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d105      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x32a>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e9b      	lsrs	r3, r3, #26
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	e016      	b.n	8003334 <HAL_ADC_ConfigChannel+0x358>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800331a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800331e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8003326:	2320      	movs	r3, #32
 8003328:	e004      	b.n	8003334 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800332a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003334:	429a      	cmp	r2, r3
 8003336:	d106      	bne.n	8003346 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f80d 	bl	8002360 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2103      	movs	r1, #3
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe fff1 	bl	8002334 <LL_ADC_GetOffsetChannel>
 8003352:	4603      	mov	r3, r0
 8003354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x396>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2103      	movs	r1, #3
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe ffe6 	bl	8002334 <LL_ADC_GetOffsetChannel>
 8003368:	4603      	mov	r3, r0
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	e017      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x3c6>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2103      	movs	r1, #3
 8003378:	4618      	mov	r0, r3
 800337a:	f7fe ffdb 	bl	8002334 <LL_ADC_GetOffsetChannel>
 800337e:	4603      	mov	r3, r0
 8003380:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003384:	fa93 f3a3 	rbit	r3, r3
 8003388:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800338a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800338c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800338e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003394:	2320      	movs	r3, #32
 8003396:	e003      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x3de>
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	0e9b      	lsrs	r3, r3, #26
 80033b4:	f003 031f 	and.w	r3, r3, #31
 80033b8:	e011      	b.n	80033de <HAL_ADC_ConfigChannel+0x402>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 80033d2:	2320      	movs	r3, #32
 80033d4:	e003      	b.n	80033de <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80033d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d8:	fab3 f383 	clz	r3, r3
 80033dc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033de:	429a      	cmp	r2, r3
 80033e0:	d106      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2200      	movs	r2, #0
 80033e8:	2103      	movs	r1, #3
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe ffb8 	bl	8002360 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff f8ed 	bl	80025d4 <LL_ADC_IsEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 813f 	bne.w	8003680 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6819      	ldr	r1, [r3, #0]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	461a      	mov	r2, r3
 8003410:	f7ff f83e 	bl	8002490 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	4a8e      	ldr	r2, [pc, #568]	; (8003654 <HAL_ADC_ConfigChannel+0x678>)
 800341a:	4293      	cmp	r3, r2
 800341c:	f040 8130 	bne.w	8003680 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x46c>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	3301      	adds	r3, #1
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2b09      	cmp	r3, #9
 800343e:	bf94      	ite	ls
 8003440:	2301      	movls	r3, #1
 8003442:	2300      	movhi	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	e019      	b.n	800347c <HAL_ADC_ConfigChannel+0x4a0>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003450:	fa93 f3a3 	rbit	r3, r3
 8003454:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003458:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800345a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003460:	2320      	movs	r3, #32
 8003462:	e003      	b.n	800346c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003464:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	3301      	adds	r3, #1
 800346e:	f003 031f 	and.w	r3, r3, #31
 8003472:	2b09      	cmp	r3, #9
 8003474:	bf94      	ite	ls
 8003476:	2301      	movls	r3, #1
 8003478:	2300      	movhi	r3, #0
 800347a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347c:	2b00      	cmp	r3, #0
 800347e:	d079      	beq.n	8003574 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003488:	2b00      	cmp	r3, #0
 800348a:	d107      	bne.n	800349c <HAL_ADC_ConfigChannel+0x4c0>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	0e9b      	lsrs	r3, r3, #26
 8003492:	3301      	adds	r3, #1
 8003494:	069b      	lsls	r3, r3, #26
 8003496:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800349a:	e015      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x4ec>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80034ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80034b4:	2320      	movs	r3, #32
 80034b6:	e003      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80034b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	3301      	adds	r3, #1
 80034c2:	069b      	lsls	r3, r3, #26
 80034c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d109      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x50c>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	0e9b      	lsrs	r3, r3, #26
 80034da:	3301      	adds	r3, #1
 80034dc:	f003 031f 	and.w	r3, r3, #31
 80034e0:	2101      	movs	r1, #1
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	e017      	b.n	8003518 <HAL_ADC_ConfigChannel+0x53c>
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034f0:	fa93 f3a3 	rbit	r3, r3
 80034f4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003500:	2320      	movs	r3, #32
 8003502:	e003      	b.n	800350c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003506:	fab3 f383 	clz	r3, r3
 800350a:	b2db      	uxtb	r3, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2101      	movs	r1, #1
 8003514:	fa01 f303 	lsl.w	r3, r1, r3
 8003518:	ea42 0103 	orr.w	r1, r2, r3
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <HAL_ADC_ConfigChannel+0x562>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	3301      	adds	r3, #1
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	051b      	lsls	r3, r3, #20
 800353c:	e018      	b.n	8003570 <HAL_ADC_ConfigChannel+0x594>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	fa93 f3a3 	rbit	r3, r3
 800354a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800354c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003556:	2320      	movs	r3, #32
 8003558:	e003      	b.n	8003562 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	3301      	adds	r3, #1
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003570:	430b      	orrs	r3, r1
 8003572:	e080      	b.n	8003676 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d107      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x5b4>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	3301      	adds	r3, #1
 8003588:	069b      	lsls	r3, r3, #26
 800358a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800358e:	e015      	b.n	80035bc <HAL_ADC_ConfigChannel+0x5e0>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e003      	b.n	80035b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	069b      	lsls	r3, r3, #26
 80035b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x600>
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	0e9b      	lsrs	r3, r3, #26
 80035ce:	3301      	adds	r3, #1
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	e017      	b.n	800360c <HAL_ADC_ConfigChannel+0x630>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	fa93 f3a3 	rbit	r3, r3
 80035e8:	61fb      	str	r3, [r7, #28]
  return result;
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80035f4:	2320      	movs	r3, #32
 80035f6:	e003      	b.n	8003600 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	ea42 0103 	orr.w	r1, r2, r3
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10d      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x65c>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	0e9b      	lsrs	r3, r3, #26
 8003622:	3301      	adds	r3, #1
 8003624:	f003 021f 	and.w	r2, r3, #31
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	3b1e      	subs	r3, #30
 8003630:	051b      	lsls	r3, r3, #20
 8003632:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003636:	e01d      	b.n	8003674 <HAL_ADC_ConfigChannel+0x698>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	613b      	str	r3, [r7, #16]
  return result;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800364a:	69bb      	ldr	r3, [r7, #24]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	e005      	b.n	8003660 <HAL_ADC_ConfigChannel+0x684>
 8003654:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f003 021f 	and.w	r2, r3, #31
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	3b1e      	subs	r3, #30
 800366e:	051b      	lsls	r3, r3, #20
 8003670:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	430b      	orrs	r3, r1
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	4619      	mov	r1, r3
 800367c:	f7fe fedd 	bl	800243a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4b44      	ldr	r3, [pc, #272]	; (8003798 <HAL_ADC_ConfigChannel+0x7bc>)
 8003686:	4013      	ands	r3, r2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d07a      	beq.n	8003782 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800368c:	4843      	ldr	r0, [pc, #268]	; (800379c <HAL_ADC_ConfigChannel+0x7c0>)
 800368e:	f7fe fe1f 	bl	80022d0 <LL_ADC_GetCommonPathInternalCh>
 8003692:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a41      	ldr	r2, [pc, #260]	; (80037a0 <HAL_ADC_ConfigChannel+0x7c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d12c      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d126      	bne.n	80036fa <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x6e4>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3b      	ldr	r2, [pc, #236]	; (80037a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d15d      	bne.n	800377c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036c8:	4619      	mov	r1, r3
 80036ca:	4834      	ldr	r0, [pc, #208]	; (800379c <HAL_ADC_ConfigChannel+0x7c0>)
 80036cc:	f7fe fded 	bl	80022aa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036d0:	4b36      	ldr	r3, [pc, #216]	; (80037ac <HAL_ADC_ConfigChannel+0x7d0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	099b      	lsrs	r3, r3, #6
 80036d6:	4a36      	ldr	r2, [pc, #216]	; (80037b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	4613      	mov	r3, r2
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f9      	bne.n	80036ec <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036f8:	e040      	b.n	800377c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a2d      	ldr	r2, [pc, #180]	; (80037b4 <HAL_ADC_ConfigChannel+0x7d8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d118      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x75a>
 8003704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003708:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d112      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_ADC_ConfigChannel+0x748>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a22      	ldr	r2, [pc, #136]	; (80037a8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d12d      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372c:	4619      	mov	r1, r3
 800372e:	481b      	ldr	r0, [pc, #108]	; (800379c <HAL_ADC_ConfigChannel+0x7c0>)
 8003730:	f7fe fdbb 	bl	80022aa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003734:	e024      	b.n	8003780 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <HAL_ADC_ConfigChannel+0x7dc>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d120      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11a      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a14      	ldr	r2, [pc, #80]	; (80037a4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d115      	bne.n	8003782 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003756:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800375a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800375e:	4619      	mov	r1, r3
 8003760:	480e      	ldr	r0, [pc, #56]	; (800379c <HAL_ADC_ConfigChannel+0x7c0>)
 8003762:	f7fe fda2 	bl	80022aa <LL_ADC_SetCommonPathInternalCh>
 8003766:	e00c      	b.n	8003782 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800377a:	e002      	b.n	8003782 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800377c:	bf00      	nop
 800377e:	e000      	b.n	8003782 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003780:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800378a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800378e:	4618      	mov	r0, r3
 8003790:	37d8      	adds	r7, #216	; 0xd8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	80080000 	.word	0x80080000
 800379c:	50040300 	.word	0x50040300
 80037a0:	c7520000 	.word	0xc7520000
 80037a4:	50040000 	.word	0x50040000
 80037a8:	50040200 	.word	0x50040200
 80037ac:	200003f8 	.word	0x200003f8
 80037b0:	053e2d63 	.word	0x053e2d63
 80037b4:	cb840000 	.word	0xcb840000
 80037b8:	80000001 	.word	0x80000001

080037bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe ff01 	bl	80025d4 <LL_ADC_IsEnabled>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d169      	bne.n	80038ac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	4b36      	ldr	r3, [pc, #216]	; (80038b8 <ADC_Enable+0xfc>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00d      	beq.n	8003802 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ea:	f043 0210 	orr.w	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f6:	f043 0201 	orr.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e055      	b.n	80038ae <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fed0 	bl	80025ac <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800380c:	482b      	ldr	r0, [pc, #172]	; (80038bc <ADC_Enable+0x100>)
 800380e:	f7fe fd5f 	bl	80022d0 <LL_ADC_GetCommonPathInternalCh>
 8003812:	4603      	mov	r3, r0
 8003814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d013      	beq.n	8003844 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <ADC_Enable+0x104>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	099b      	lsrs	r3, r3, #6
 8003822:	4a28      	ldr	r2, [pc, #160]	; (80038c4 <ADC_Enable+0x108>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	099b      	lsrs	r3, r3, #6
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	4613      	mov	r3, r2
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003836:	e002      	b.n	800383e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	3b01      	subs	r3, #1
 800383c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f9      	bne.n	8003838 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003844:	f7fe fcee 	bl	8002224 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800384a:	e028      	b.n	800389e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7fe febf 	bl	80025d4 <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fea3 	bl	80025ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003866:	f7fe fcdd 	bl	8002224 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d914      	bls.n	800389e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b01      	cmp	r3, #1
 8003880:	d00d      	beq.n	800389e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f043 0210 	orr.w	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003892:	f043 0201 	orr.w	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e007      	b.n	80038ae <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d1cf      	bne.n	800384c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	8000003f 	.word	0x8000003f
 80038bc:	50040300 	.word	0x50040300
 80038c0:	200003f8 	.word	0x200003f8
 80038c4:	053e2d63 	.word	0x053e2d63

080038c8 <LL_ADC_IsEnabled>:
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d101      	bne.n	80038e0 <LL_ADC_IsEnabled+0x18>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <LL_ADC_IsEnabled+0x1a>
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <LL_ADC_REG_IsConversionOngoing>:
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d101      	bne.n	8003906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b09f      	sub	sp, #124	; 0x7c
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003992:	2302      	movs	r3, #2
 8003994:	e093      	b.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800399e:	2300      	movs	r3, #0
 80039a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80039a2:	2300      	movs	r3, #0
 80039a4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a47      	ldr	r2, [pc, #284]	; (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d102      	bne.n	80039b6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039b0:	4b46      	ldr	r3, [pc, #280]	; (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	e001      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e072      	b.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff87 	bl	80038ee <LL_ADC_REG_IsConversionOngoing>
 80039e0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff81 	bl	80038ee <LL_ADC_REG_IsConversionOngoing>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d154      	bne.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d151      	bne.n	8003a9c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039f8:	4b35      	ldr	r3, [pc, #212]	; (8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80039fa:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d02c      	beq.n	8003a5e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a16:	035b      	lsls	r3, r3, #13
 8003a18:	430b      	orrs	r3, r1
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a20:	4829      	ldr	r0, [pc, #164]	; (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a22:	f7ff ff51 	bl	80038c8 <LL_ADC_IsEnabled>
 8003a26:	4604      	mov	r4, r0
 8003a28:	4828      	ldr	r0, [pc, #160]	; (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a2a:	f7ff ff4d 	bl	80038c8 <LL_ADC_IsEnabled>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	431c      	orrs	r4, r3
 8003a32:	4828      	ldr	r0, [pc, #160]	; (8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003a34:	f7ff ff48 	bl	80038c8 <LL_ADC_IsEnabled>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	4323      	orrs	r3, r4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d137      	bne.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a48:	f023 030f 	bic.w	r3, r3, #15
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	6811      	ldr	r1, [r2, #0]
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	431a      	orrs	r2, r3
 8003a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a5c:	e028      	b.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a6a:	4817      	ldr	r0, [pc, #92]	; (8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003a6c:	f7ff ff2c 	bl	80038c8 <LL_ADC_IsEnabled>
 8003a70:	4604      	mov	r4, r0
 8003a72:	4816      	ldr	r0, [pc, #88]	; (8003acc <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003a74:	f7ff ff28 	bl	80038c8 <LL_ADC_IsEnabled>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	431c      	orrs	r4, r3
 8003a7c:	4815      	ldr	r0, [pc, #84]	; (8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003a7e:	f7ff ff23 	bl	80038c8 <LL_ADC_IsEnabled>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4323      	orrs	r3, r4
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d112      	bne.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003a8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a92:	f023 030f 	bic.w	r3, r3, #15
 8003a96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a98:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a9a:	e009      	b.n	8003ab0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa0:	f043 0220 	orr.w	r2, r3, #32
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003aae:	e000      	b.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003aba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	377c      	adds	r7, #124	; 0x7c
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd90      	pop	{r4, r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	50040000 	.word	0x50040000
 8003acc:	50040100 	.word	0x50040100
 8003ad0:	50040300 	.word	0x50040300
 8003ad4:	50040200 	.word	0x50040200

08003ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af4:	4013      	ands	r3, r2
 8003af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0a:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	60d3      	str	r3, [r2, #12]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	e000ed00 	.word	0xe000ed00

08003b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b24:	4b04      	ldr	r3, [pc, #16]	; (8003b38 <__NVIC_GetPriorityGrouping+0x18>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	0a1b      	lsrs	r3, r3, #8
 8003b2a:	f003 0307 	and.w	r3, r3, #7
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	4603      	mov	r3, r0
 8003b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	db0b      	blt.n	8003b66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b4e:	79fb      	ldrb	r3, [r7, #7]
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4907      	ldr	r1, [pc, #28]	; (8003b74 <__NVIC_EnableIRQ+0x38>)
 8003b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5a:	095b      	lsrs	r3, r3, #5
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	6039      	str	r1, [r7, #0]
 8003b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	db0a      	blt.n	8003ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	490c      	ldr	r1, [pc, #48]	; (8003bc4 <__NVIC_SetPriority+0x4c>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	0112      	lsls	r2, r2, #4
 8003b98:	b2d2      	uxtb	r2, r2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba0:	e00a      	b.n	8003bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	4908      	ldr	r1, [pc, #32]	; (8003bc8 <__NVIC_SetPriority+0x50>)
 8003ba8:	79fb      	ldrb	r3, [r7, #7]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	0112      	lsls	r2, r2, #4
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	761a      	strb	r2, [r3, #24]
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000e100 	.word	0xe000e100
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 0307 	and.w	r3, r3, #7
 8003bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f1c3 0307 	rsb	r3, r3, #7
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	bf28      	it	cs
 8003bea:	2304      	movcs	r3, #4
 8003bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d902      	bls.n	8003bfc <NVIC_EncodePriority+0x30>
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	3b03      	subs	r3, #3
 8003bfa:	e000      	b.n	8003bfe <NVIC_EncodePriority+0x32>
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c00:	f04f 32ff 	mov.w	r2, #4294967295
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	401a      	ands	r2, r3
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c14:	f04f 31ff 	mov.w	r1, #4294967295
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c1e:	43d9      	mvns	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c24:	4313      	orrs	r3, r2
         );
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3724      	adds	r7, #36	; 0x24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c44:	d301      	bcc.n	8003c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <SysTick_Config+0x40>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c52:	210f      	movs	r1, #15
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f7ff ff8e 	bl	8003b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <SysTick_Config+0x40>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <SysTick_Config+0x40>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f7ff ff29 	bl	8003ad8 <__NVIC_SetPriorityGrouping>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	4603      	mov	r3, r0
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ca0:	f7ff ff3e 	bl	8003b20 <__NVIC_GetPriorityGrouping>
 8003ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	68b9      	ldr	r1, [r7, #8]
 8003caa:	6978      	ldr	r0, [r7, #20]
 8003cac:	f7ff ff8e 	bl	8003bcc <NVIC_EncodePriority>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb6:	4611      	mov	r1, r2
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7ff ff5d 	bl	8003b78 <__NVIC_SetPriority>
}
 8003cbe:	bf00      	nop
 8003cc0:	3718      	adds	r7, #24
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7ff ff31 	bl	8003b3c <__NVIC_EnableIRQ>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b082      	sub	sp, #8
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7ff ffa2 	bl	8003c34 <SysTick_Config>
 8003cf0:	4603      	mov	r3, r0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b480      	push	{r7}
 8003cfc:	b085      	sub	sp, #20
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d008      	beq.n	8003d24 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2204      	movs	r2, #4
 8003d16:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e022      	b.n	8003d6a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 020e 	bic.w	r2, r2, #14
 8003d32:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d48:	f003 021c 	and.w	r2, r3, #28
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	2101      	movs	r1, #1
 8003d52:	fa01 f202 	lsl.w	r2, r1, r2
 8003d56:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d005      	beq.n	8003d9a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2204      	movs	r2, #4
 8003d92:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e029      	b.n	8003dee <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 020e 	bic.w	r2, r2, #14
 8003da8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbe:	f003 021c 	and.w	r2, r3, #28
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dcc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	4798      	blx	r3
    }
  }
  return status;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8003dfe:	4b68      	ldr	r3, [pc, #416]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e00:	695b      	ldr	r3, [r3, #20]
 8003e02:	4a67      	ldr	r2, [pc, #412]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e08:	f023 0307 	bic.w	r3, r3, #7
 8003e0c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8003e0e:	4b64      	ldr	r3, [pc, #400]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	4a63      	ldr	r2, [pc, #396]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e18:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8003e1a:	4b62      	ldr	r3, [pc, #392]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e1c:	7a1b      	ldrb	r3, [r3, #8]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d105      	bne.n	8003e30 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8003e24:	4b5e      	ldr	r3, [pc, #376]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4a5d      	ldr	r2, [pc, #372]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e2e:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003e30:	4b5b      	ldr	r3, [pc, #364]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e32:	691a      	ldr	r2, [r3, #16]
 8003e34:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d045      	beq.n	8003ece <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8003e42:	4b58      	ldr	r3, [pc, #352]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	4a56      	ldr	r2, [pc, #344]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e4c:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d007      	beq.n	8003e68 <HAL_FLASH_IRQHandler+0x70>
 8003e58:	4b51      	ldr	r3, [pc, #324]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8003e62:	494f      	ldr	r1, [pc, #316]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e64:	4313      	orrs	r3, r2
 8003e66:	618b      	str	r3, [r1, #24]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <HAL_FLASH_IRQHandler+0x84>
 8003e72:	4a4b      	ldr	r2, [pc, #300]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e7a:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8003e7c:	f000 f99a 	bl	80041b4 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8003e80:	4b48      	ldr	r3, [pc, #288]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e82:	7a1b      	ldrb	r3, [r3, #8]
 8003e84:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8003e86:	7afb      	ldrb	r3, [r7, #11]
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d105      	bne.n	8003e98 <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8003e8c:	4b45      	ldr	r3, [pc, #276]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 f893 	bl	8003fbc <HAL_FLASH_OperationErrorCallback>
 8003e96:	e017      	b.n	8003ec8 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8003e98:	7afb      	ldrb	r3, [r7, #11]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d105      	bne.n	8003eaa <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8003e9e:	4b41      	ldr	r3, [pc, #260]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 f88a 	bl	8003fbc <HAL_FLASH_OperationErrorCallback>
 8003ea8:	e00e      	b.n	8003ec8 <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d002      	beq.n	8003eb6 <HAL_FLASH_IRQHandler+0xbe>
 8003eb0:	7afb      	ldrb	r3, [r7, #11]
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d105      	bne.n	8003ec2 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8003eb6:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 f87e 	bl	8003fbc <HAL_FLASH_OperationErrorCallback>
 8003ec0:	e002      	b.n	8003ec8 <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	f000 f87a 	bl	8003fbc <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003ec8:	4b36      	ldr	r3, [pc, #216]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8003ece:	4b34      	ldr	r3, [pc, #208]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d04f      	beq.n	8003f7a <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003edc:	2201      	movs	r2, #1
 8003ede:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8003ee0:	4b30      	ldr	r3, [pc, #192]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ee2:	7a1b      	ldrb	r3, [r3, #8]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d12b      	bne.n	8003f42 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8003eea:	4b2e      	ldr	r3, [pc, #184]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ef2:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8003ef4:	4b2b      	ldr	r3, [pc, #172]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003ef6:	699b      	ldr	r3, [r3, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d013      	beq.n	8003f24 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f851 	bl	8003fa8 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f0e:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8003f10:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8003f16:	4b23      	ldr	r3, [pc, #140]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f913 	bl	8004148 <FLASH_PageErase>
 8003f22:	e02a      	b.n	8003f7a <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8003f24:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f2c:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8003f32:	f000 f93f 	bl	80041b4 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f834 	bl	8003fa8 <HAL_FLASH_EndOfOperationCallback>
 8003f40:	e01b      	b.n	8003f7a <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8003f42:	f000 f937 	bl	80041b4 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8003f46:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f48:	7a1b      	ldrb	r3, [r3, #8]
 8003f4a:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8003f4c:	7afb      	ldrb	r3, [r7, #11]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d105      	bne.n	8003f5e <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8003f52:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f000 f826 	bl	8003fa8 <HAL_FLASH_EndOfOperationCallback>
 8003f5c:	e00a      	b.n	8003f74 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8003f5e:	7afb      	ldrb	r3, [r7, #11]
 8003f60:	2b03      	cmp	r3, #3
 8003f62:	d002      	beq.n	8003f6a <HAL_FLASH_IRQHandler+0x172>
 8003f64:	7afb      	ldrb	r3, [r7, #11]
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d104      	bne.n	8003f74 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 f81a 	bl	8003fa8 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f7c:	7a1b      	ldrb	r3, [r3, #8]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d108      	bne.n	8003f96 <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	4a05      	ldr	r2, [pc, #20]	; (8003fa0 <HAL_FLASH_IRQHandler+0x1a8>)
 8003f8a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003f8e:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <HAL_FLASH_IRQHandler+0x1ac>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	701a      	strb	r2, [r3, #0]
  }
}
 8003f96:	bf00      	nop
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40022000 	.word	0x40022000
 8003fa4:	20000404 	.word	0x20000404

08003fa8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8003fc4:	bf00      	nop
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fda:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <HAL_FLASH_Unlock+0x38>)
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	da0b      	bge.n	8003ffa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003fe2:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_FLASH_Unlock+0x38>)
 8003fe4:	4a09      	ldr	r2, [pc, #36]	; (800400c <HAL_FLASH_Unlock+0x3c>)
 8003fe6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003fe8:	4b07      	ldr	r3, [pc, #28]	; (8004008 <HAL_FLASH_Unlock+0x38>)
 8003fea:	4a09      	ldr	r2, [pc, #36]	; (8004010 <HAL_FLASH_Unlock+0x40>)
 8003fec:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003fee:	4b06      	ldr	r3, [pc, #24]	; (8004008 <HAL_FLASH_Unlock+0x38>)
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da01      	bge.n	8003ffa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	40022000 	.word	0x40022000
 800400c:	45670123 	.word	0x45670123
 8004010:	cdef89ab 	.word	0xcdef89ab

08004014 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004020:	4b33      	ldr	r3, [pc, #204]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_FLASHEx_Erase_IT+0x18>
 8004028:	2302      	movs	r3, #2
 800402a:	e05d      	b.n	80040e8 <HAL_FLASHEx_Erase_IT+0xd4>
 800402c:	4b30      	ldr	r3, [pc, #192]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004032:	4b2f      	ldr	r3, [pc, #188]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004034:	2200      	movs	r2, #0
 8004036:	605a      	str	r2, [r3, #4]

  /* Deactivate the cache if they are activated to avoid data misbehavior */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8004038:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004040:	2b00      	cmp	r3, #0
 8004042:	d013      	beq.n	800406c <HAL_FLASHEx_Erase_IT+0x58>
  {
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8004044:	4b2b      	ldr	r3, [pc, #172]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800404c:	2b00      	cmp	r3, #0
 800404e:	d009      	beq.n	8004064 <HAL_FLASHEx_Erase_IT+0x50>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8004050:	4b28      	ldr	r3, [pc, #160]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a27      	ldr	r2, [pc, #156]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800405a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800405c:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 800405e:	2203      	movs	r2, #3
 8004060:	771a      	strb	r2, [r3, #28]
 8004062:	e016      	b.n	8004092 <HAL_FLASHEx_Erase_IT+0x7e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8004064:	4b22      	ldr	r3, [pc, #136]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004066:	2201      	movs	r2, #1
 8004068:	771a      	strb	r2, [r3, #28]
 800406a:	e012      	b.n	8004092 <HAL_FLASHEx_Erase_IT+0x7e>
    }
  }
  else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800406c:	4b21      	ldr	r3, [pc, #132]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HAL_FLASHEx_Erase_IT+0x78>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a1d      	ldr	r2, [pc, #116]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 800407e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004082:	6013      	str	r3, [r2, #0]
    pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8004084:	4b1a      	ldr	r3, [pc, #104]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 8004086:	2202      	movs	r2, #2
 8004088:	771a      	strb	r2, [r3, #28]
 800408a:	e002      	b.n	8004092 <HAL_FLASHEx_Erase_IT+0x7e>
  }
  else
  {
    pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800408c:	4b18      	ldr	r3, [pc, #96]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 800408e:	2200      	movs	r2, #0
 8004090:	771a      	strb	r2, [r3, #28]
  }

  /* Enable End of Operation and Error interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8004092:	4b18      	ldr	r3, [pc, #96]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	4a17      	ldr	r2, [pc, #92]	; (80040f4 <HAL_FLASHEx_Erase_IT+0xe0>)
 8004098:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800409c:	6153      	str	r3, [r2, #20]

  pFlash.Bank = pEraseInit->Banks;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 80040a4:	6113      	str	r3, [r2, #16]

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d108      	bne.n	80040c0 <HAL_FLASHEx_Erase_IT+0xac>
  {
    /* Mass erase to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_MASS_ERASE;
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 80040b0:	2202      	movs	r2, #2
 80040b2:	721a      	strb	r2, [r3, #8]
    FLASH_MassErase(pEraseInit->Banks);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f81d 	bl	80040f8 <FLASH_MassErase>
 80040be:	e012      	b.n	80040e6 <HAL_FLASHEx_Erase_IT+0xd2>
  }
  else
  {
    /* Erase by page to be done */
    pFlash.ProcedureOnGoing = FLASH_PROC_PAGE_ERASE;
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	721a      	strb	r2, [r3, #8]
    pFlash.NbPagesToErase = pEraseInit->NbPages;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4a09      	ldr	r2, [pc, #36]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 80040cc:	6193      	str	r3, [r2, #24]
    pFlash.Page = pEraseInit->Page;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	4a07      	ldr	r2, [pc, #28]	; (80040f0 <HAL_FLASHEx_Erase_IT+0xdc>)
 80040d4:	6153      	str	r3, [r2, #20]

    /*Erase 1st page and wait for IT */
    FLASH_PageErase(pEraseInit->Page, pEraseInit->Banks);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4619      	mov	r1, r3
 80040e0:	4610      	mov	r0, r2
 80040e2:	f000 f831 	bl	8004148 <FLASH_PageErase>
  }

  return status;
 80040e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20000404 	.word	0x20000404
 80040f4:	40022000 	.word	0x40022000

080040f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800410a:	4b0e      	ldr	r3, [pc, #56]	; (8004144 <FLASH_MassErase+0x4c>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <FLASH_MassErase+0x4c>)
 8004110:	f043 0304 	orr.w	r3, r3, #4
 8004114:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8004120:	4b08      	ldr	r3, [pc, #32]	; (8004144 <FLASH_MassErase+0x4c>)
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	4a07      	ldr	r2, [pc, #28]	; (8004144 <FLASH_MassErase+0x4c>)
 8004126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800412c:	4b05      	ldr	r3, [pc, #20]	; (8004144 <FLASH_MassErase+0x4c>)
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <FLASH_MassErase+0x4c>)
 8004132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004136:	6153      	str	r3, [r2, #20]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40022000 	.word	0x40022000

08004148 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d006      	beq.n	800416a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <FLASH_PageErase+0x68>)
 800415e:	695b      	ldr	r3, [r3, #20]
 8004160:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <FLASH_PageErase+0x68>)
 8004162:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004166:	6153      	str	r3, [r2, #20]
 8004168:	e005      	b.n	8004176 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800416a:	4b11      	ldr	r3, [pc, #68]	; (80041b0 <FLASH_PageErase+0x68>)
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	4a10      	ldr	r2, [pc, #64]	; (80041b0 <FLASH_PageErase+0x68>)
 8004170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004174:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8004176:	4b0e      	ldr	r3, [pc, #56]	; (80041b0 <FLASH_PageErase+0x68>)
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8004186:	490a      	ldr	r1, [pc, #40]	; (80041b0 <FLASH_PageErase+0x68>)
 8004188:	4313      	orrs	r3, r2
 800418a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800418c:	4b08      	ldr	r3, [pc, #32]	; (80041b0 <FLASH_PageErase+0x68>)
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	4a07      	ldr	r2, [pc, #28]	; (80041b0 <FLASH_PageErase+0x68>)
 8004192:	f043 0302 	orr.w	r3, r3, #2
 8004196:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <FLASH_PageErase+0x68>)
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	4a04      	ldr	r2, [pc, #16]	; (80041b0 <FLASH_PageErase+0x68>)
 800419e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041a2:	6153      	str	r3, [r2, #20]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	40022000 	.word	0x40022000

080041b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80041ba:	4b21      	ldr	r3, [pc, #132]	; (8004240 <FLASH_FlushCaches+0x8c>)
 80041bc:	7f1b      	ldrb	r3, [r3, #28]
 80041be:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d002      	beq.n	80041cc <FLASH_FlushCaches+0x18>
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	2b03      	cmp	r3, #3
 80041ca:	d117      	bne.n	80041fc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80041cc:	4b1d      	ldr	r3, [pc, #116]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1c      	ldr	r2, [pc, #112]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80041d8:	4b1a      	ldr	r3, [pc, #104]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b17      	ldr	r3, [pc, #92]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a16      	ldr	r2, [pc, #88]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041f0:	4b14      	ldr	r3, [pc, #80]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a13      	ldr	r2, [pc, #76]	; (8004244 <FLASH_FlushCaches+0x90>)
 80041f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d002      	beq.n	8004208 <FLASH_FlushCaches+0x54>
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b03      	cmp	r3, #3
 8004206:	d111      	bne.n	800422c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <FLASH_FlushCaches+0x90>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <FLASH_FlushCaches+0x90>)
 800420e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <FLASH_FlushCaches+0x90>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <FLASH_FlushCaches+0x90>)
 800421a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800421e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004220:	4b08      	ldr	r3, [pc, #32]	; (8004244 <FLASH_FlushCaches+0x90>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a07      	ldr	r2, [pc, #28]	; (8004244 <FLASH_FlushCaches+0x90>)
 8004226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800422a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <FLASH_FlushCaches+0x8c>)
 800422e:	2200      	movs	r2, #0
 8004230:	771a      	strb	r2, [r3, #28]
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000404 	.word	0x20000404
 8004244:	40022000 	.word	0x40022000

08004248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004256:	e17f      	b.n	8004558 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2101      	movs	r1, #1
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	fa01 f303 	lsl.w	r3, r1, r3
 8004264:	4013      	ands	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8171 	beq.w	8004552 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d005      	beq.n	8004288 <HAL_GPIO_Init+0x40>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 0303 	and.w	r3, r3, #3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d130      	bne.n	80042ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	2203      	movs	r2, #3
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	4013      	ands	r3, r2
 800429e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042be:	2201      	movs	r2, #1
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43db      	mvns	r3, r3
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	4013      	ands	r3, r2
 80042cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	091b      	lsrs	r3, r3, #4
 80042d4:	f003 0201 	and.w	r2, r3, #1
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d118      	bne.n	8004328 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80042fc:	2201      	movs	r2, #1
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	08db      	lsrs	r3, r3, #3
 8004312:	f003 0201 	and.w	r2, r3, #1
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f003 0303 	and.w	r3, r3, #3
 8004330:	2b03      	cmp	r3, #3
 8004332:	d017      	beq.n	8004364 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	2203      	movs	r2, #3
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689a      	ldr	r2, [r3, #8]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b02      	cmp	r3, #2
 800436e:	d123      	bne.n	80043b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	08da      	lsrs	r2, r3, #3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3208      	adds	r2, #8
 8004378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800437c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	220f      	movs	r2, #15
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	08da      	lsrs	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	6939      	ldr	r1, [r7, #16]
 80043b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	2203      	movs	r2, #3
 80043c4:	fa02 f303 	lsl.w	r3, r2, r3
 80043c8:	43db      	mvns	r3, r3
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	4013      	ands	r3, r2
 80043ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0203 	and.w	r2, r3, #3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 80ac 	beq.w	8004552 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043fa:	4b5f      	ldr	r3, [pc, #380]	; (8004578 <HAL_GPIO_Init+0x330>)
 80043fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043fe:	4a5e      	ldr	r2, [pc, #376]	; (8004578 <HAL_GPIO_Init+0x330>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6613      	str	r3, [r2, #96]	; 0x60
 8004406:	4b5c      	ldr	r3, [pc, #368]	; (8004578 <HAL_GPIO_Init+0x330>)
 8004408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	60bb      	str	r3, [r7, #8]
 8004410:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004412:	4a5a      	ldr	r2, [pc, #360]	; (800457c <HAL_GPIO_Init+0x334>)
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	089b      	lsrs	r3, r3, #2
 8004418:	3302      	adds	r3, #2
 800441a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800441e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	220f      	movs	r2, #15
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800443c:	d025      	beq.n	800448a <HAL_GPIO_Init+0x242>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a4f      	ldr	r2, [pc, #316]	; (8004580 <HAL_GPIO_Init+0x338>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d01f      	beq.n	8004486 <HAL_GPIO_Init+0x23e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a4e      	ldr	r2, [pc, #312]	; (8004584 <HAL_GPIO_Init+0x33c>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d019      	beq.n	8004482 <HAL_GPIO_Init+0x23a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a4d      	ldr	r2, [pc, #308]	; (8004588 <HAL_GPIO_Init+0x340>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_GPIO_Init+0x236>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a4c      	ldr	r2, [pc, #304]	; (800458c <HAL_GPIO_Init+0x344>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00d      	beq.n	800447a <HAL_GPIO_Init+0x232>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a4b      	ldr	r2, [pc, #300]	; (8004590 <HAL_GPIO_Init+0x348>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d007      	beq.n	8004476 <HAL_GPIO_Init+0x22e>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a4a      	ldr	r2, [pc, #296]	; (8004594 <HAL_GPIO_Init+0x34c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d101      	bne.n	8004472 <HAL_GPIO_Init+0x22a>
 800446e:	2306      	movs	r3, #6
 8004470:	e00c      	b.n	800448c <HAL_GPIO_Init+0x244>
 8004472:	2307      	movs	r3, #7
 8004474:	e00a      	b.n	800448c <HAL_GPIO_Init+0x244>
 8004476:	2305      	movs	r3, #5
 8004478:	e008      	b.n	800448c <HAL_GPIO_Init+0x244>
 800447a:	2304      	movs	r3, #4
 800447c:	e006      	b.n	800448c <HAL_GPIO_Init+0x244>
 800447e:	2303      	movs	r3, #3
 8004480:	e004      	b.n	800448c <HAL_GPIO_Init+0x244>
 8004482:	2302      	movs	r3, #2
 8004484:	e002      	b.n	800448c <HAL_GPIO_Init+0x244>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <HAL_GPIO_Init+0x244>
 800448a:	2300      	movs	r3, #0
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	f002 0203 	and.w	r2, r2, #3
 8004492:	0092      	lsls	r2, r2, #2
 8004494:	4093      	lsls	r3, r2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800449c:	4937      	ldr	r1, [pc, #220]	; (800457c <HAL_GPIO_Init+0x334>)
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	089b      	lsrs	r3, r3, #2
 80044a2:	3302      	adds	r3, #2
 80044a4:	693a      	ldr	r2, [r7, #16]
 80044a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80044aa:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <HAL_GPIO_Init+0x350>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	43db      	mvns	r3, r3
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044ce:	4a32      	ldr	r2, [pc, #200]	; (8004598 <HAL_GPIO_Init+0x350>)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_GPIO_Init+0x350>)
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	43db      	mvns	r3, r3
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4013      	ands	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044f8:	4a27      	ldr	r2, [pc, #156]	; (8004598 <HAL_GPIO_Init+0x350>)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80044fe:	4b26      	ldr	r3, [pc, #152]	; (8004598 <HAL_GPIO_Init+0x350>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	43db      	mvns	r3, r3
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004522:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <HAL_GPIO_Init+0x350>)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <HAL_GPIO_Init+0x350>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	43db      	mvns	r3, r3
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800454c:	4a12      	ldr	r2, [pc, #72]	; (8004598 <HAL_GPIO_Init+0x350>)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	3301      	adds	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	f47f ae78 	bne.w	8004258 <HAL_GPIO_Init+0x10>
  }
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	40010000 	.word	0x40010000
 8004580:	48000400 	.word	0x48000400
 8004584:	48000800 	.word	0x48000800
 8004588:	48000c00 	.word	0x48000c00
 800458c:	48001000 	.word	0x48001000
 8004590:	48001400 	.word	0x48001400
 8004594:	48001800 	.word	0x48001800
 8004598:	40010400 	.word	0x40010400

0800459c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	807b      	strh	r3, [r7, #2]
 80045a8:	4613      	mov	r3, r2
 80045aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045ac:	787b      	ldrb	r3, [r7, #1]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045b2:	887a      	ldrh	r2, [r7, #2]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045b8:	e002      	b.n	80045c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045ba:	887a      	ldrh	r2, [r7, #2]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	460b      	mov	r3, r1
 80045d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4013      	ands	r3, r2
 80045e4:	041a      	lsls	r2, r3, #16
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	43d9      	mvns	r1, r3
 80045ea:	887b      	ldrh	r3, [r7, #2]
 80045ec:	400b      	ands	r3, r1
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	619a      	str	r2, [r3, #24]
}
 80045f4:	bf00      	nop
 80045f6:	3714      	adds	r7, #20
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800460a:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	4013      	ands	r3, r2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d006      	beq.n	8004624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004616:	4a05      	ldr	r2, [pc, #20]	; (800462c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	4618      	mov	r0, r3
 8004620:	f7fd f9aa 	bl	8001978 <HAL_GPIO_EXTI_Callback>
  }
}
 8004624:	bf00      	nop
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40010400 	.word	0x40010400

08004630 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <HAL_PWREx_GetVoltageRange+0x18>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800463c:	4618      	mov	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40007000 	.word	0x40007000

0800464c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465a:	d130      	bne.n	80046be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800465c:	4b23      	ldr	r3, [pc, #140]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004668:	d038      	beq.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800466a:	4b20      	ldr	r3, [pc, #128]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004674:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004678:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2232      	movs	r2, #50	; 0x32
 8004680:	fb02 f303 	mul.w	r3, r2, r3
 8004684:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	0c9b      	lsrs	r3, r3, #18
 800468c:	3301      	adds	r3, #1
 800468e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004690:	e002      	b.n	8004698 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3b01      	subs	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004698:	4b14      	ldr	r3, [pc, #80]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046a4:	d102      	bne.n	80046ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f2      	bne.n	8004692 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d110      	bne.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e00f      	b.n	80046de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ca:	d007      	beq.n	80046dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80046cc:	4b07      	ldr	r3, [pc, #28]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046d4:	4a05      	ldr	r2, [pc, #20]	; (80046ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80046d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40007000 	.word	0x40007000
 80046f0:	200003f8 	.word	0x200003f8
 80046f4:	431bde83 	.word	0x431bde83

080046f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e3ca      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800470a:	4b97      	ldr	r3, [pc, #604]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 030c 	and.w	r3, r3, #12
 8004712:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004714:	4b94      	ldr	r3, [pc, #592]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0303 	and.w	r3, r3, #3
 800471c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80e4 	beq.w	80048f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_RCC_OscConfig+0x4a>
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	2b0c      	cmp	r3, #12
 8004736:	f040 808b 	bne.w	8004850 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b01      	cmp	r3, #1
 800473e:	f040 8087 	bne.w	8004850 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004742:	4b89      	ldr	r3, [pc, #548]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0302 	and.w	r3, r3, #2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_RCC_OscConfig+0x62>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e3a2      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	4b82      	ldr	r3, [pc, #520]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0308 	and.w	r3, r3, #8
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_RCC_OscConfig+0x7c>
 800476a:	4b7f      	ldr	r3, [pc, #508]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004772:	e005      	b.n	8004780 <HAL_RCC_OscConfig+0x88>
 8004774:	4b7c      	ldr	r3, [pc, #496]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	091b      	lsrs	r3, r3, #4
 800477c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004780:	4293      	cmp	r3, r2
 8004782:	d223      	bcs.n	80047cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fd55 	bl	8005238 <RCC_SetFlashLatencyFromMSIRange>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e383      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004798:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a72      	ldr	r2, [pc, #456]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800479e:	f043 0308 	orr.w	r3, r3, #8
 80047a2:	6013      	str	r3, [r2, #0]
 80047a4:	4b70      	ldr	r3, [pc, #448]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	496d      	ldr	r1, [pc, #436]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047b6:	4b6c      	ldr	r3, [pc, #432]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	021b      	lsls	r3, r3, #8
 80047c4:	4968      	ldr	r1, [pc, #416]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	604b      	str	r3, [r1, #4]
 80047ca:	e025      	b.n	8004818 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80047cc:	4b66      	ldr	r3, [pc, #408]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a65      	ldr	r2, [pc, #404]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047d2:	f043 0308 	orr.w	r3, r3, #8
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	4b63      	ldr	r3, [pc, #396]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	4960      	ldr	r1, [pc, #384]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047ea:	4b5f      	ldr	r3, [pc, #380]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	495b      	ldr	r1, [pc, #364]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fd15 	bl	8005238 <RCC_SetFlashLatencyFromMSIRange>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e343      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004818:	f000 fc4a 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b52      	ldr	r3, [pc, #328]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	091b      	lsrs	r3, r3, #4
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	4950      	ldr	r1, [pc, #320]	; (800496c <HAL_RCC_OscConfig+0x274>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	4a4e      	ldr	r2, [pc, #312]	; (8004970 <HAL_RCC_OscConfig+0x278>)
 8004836:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004838:	4b4e      	ldr	r3, [pc, #312]	; (8004974 <HAL_RCC_OscConfig+0x27c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f7fd fca1 	bl	8002184 <HAL_InitTick>
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d052      	beq.n	80048f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	e327      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d032      	beq.n	80048be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004858:	4b43      	ldr	r3, [pc, #268]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a42      	ldr	r2, [pc, #264]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004864:	f7fd fcde 	bl	8002224 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800486c:	f7fd fcda 	bl	8002224 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e310      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800487e:	4b3a      	ldr	r3, [pc, #232]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800488a:	4b37      	ldr	r3, [pc, #220]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a36      	ldr	r2, [pc, #216]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	4931      	ldr	r1, [pc, #196]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048a8:	4b2f      	ldr	r3, [pc, #188]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	021b      	lsls	r3, r3, #8
 80048b6:	492c      	ldr	r1, [pc, #176]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
 80048bc:	e01a      	b.n	80048f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80048be:	4b2a      	ldr	r3, [pc, #168]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a29      	ldr	r2, [pc, #164]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80048ca:	f7fd fcab 	bl	8002224 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048d0:	e008      	b.n	80048e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80048d2:	f7fd fca7 	bl	8002224 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e2dd      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048e4:	4b20      	ldr	r3, [pc, #128]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1f0      	bne.n	80048d2 <HAL_RCC_OscConfig+0x1da>
 80048f0:	e000      	b.n	80048f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d074      	beq.n	80049ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b08      	cmp	r3, #8
 8004904:	d005      	beq.n	8004912 <HAL_RCC_OscConfig+0x21a>
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b0c      	cmp	r3, #12
 800490a:	d10e      	bne.n	800492a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b03      	cmp	r3, #3
 8004910:	d10b      	bne.n	800492a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004912:	4b15      	ldr	r3, [pc, #84]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d064      	beq.n	80049e8 <HAL_RCC_OscConfig+0x2f0>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d160      	bne.n	80049e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e2ba      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004932:	d106      	bne.n	8004942 <HAL_RCC_OscConfig+0x24a>
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a0b      	ldr	r2, [pc, #44]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800493a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e026      	b.n	8004990 <HAL_RCC_OscConfig+0x298>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800494a:	d115      	bne.n	8004978 <HAL_RCC_OscConfig+0x280>
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a05      	ldr	r2, [pc, #20]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 8004952:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	4b03      	ldr	r3, [pc, #12]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a02      	ldr	r2, [pc, #8]	; (8004968 <HAL_RCC_OscConfig+0x270>)
 800495e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	e014      	b.n	8004990 <HAL_RCC_OscConfig+0x298>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	0800a6ac 	.word	0x0800a6ac
 8004970:	200003f8 	.word	0x200003f8
 8004974:	200003fc 	.word	0x200003fc
 8004978:	4ba0      	ldr	r3, [pc, #640]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a9f      	ldr	r2, [pc, #636]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 800497e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4b9d      	ldr	r3, [pc, #628]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a9c      	ldr	r2, [pc, #624]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 800498a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004998:	f7fd fc44 	bl	8002224 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a0:	f7fd fc40 	bl	8002224 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e276      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b2:	4b92      	ldr	r3, [pc, #584]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0x2a8>
 80049be:	e014      	b.n	80049ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fd fc30 	bl	8002224 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fd fc2c 	bl	8002224 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e262      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049da:	4b88      	ldr	r3, [pc, #544]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x2d0>
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d060      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_OscConfig+0x310>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b0c      	cmp	r3, #12
 8004a00:	d119      	bne.n	8004a36 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d116      	bne.n	8004a36 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a08:	4b7c      	ldr	r3, [pc, #496]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_OscConfig+0x328>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e23f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a20:	4b76      	ldr	r3, [pc, #472]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	061b      	lsls	r3, r3, #24
 8004a2e:	4973      	ldr	r1, [pc, #460]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a34:	e040      	b.n	8004ab8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d023      	beq.n	8004a86 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a3e:	4b6f      	ldr	r3, [pc, #444]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a6e      	ldr	r2, [pc, #440]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4a:	f7fd fbeb 	bl	8002224 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a52:	f7fd fbe7 	bl	8002224 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e21d      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a64:	4b65      	ldr	r3, [pc, #404]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a70:	4b62      	ldr	r3, [pc, #392]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	061b      	lsls	r3, r3, #24
 8004a7e:	495f      	ldr	r1, [pc, #380]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
 8004a84:	e018      	b.n	8004ab8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a86:	4b5d      	ldr	r3, [pc, #372]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5c      	ldr	r2, [pc, #368]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a92:	f7fd fbc7 	bl	8002224 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a9a:	f7fd fbc3 	bl	8002224 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e1f9      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aac:	4b53      	ldr	r3, [pc, #332]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1f0      	bne.n	8004a9a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d03c      	beq.n	8004b3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d01c      	beq.n	8004b06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004acc:	4b4b      	ldr	r3, [pc, #300]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad2:	4a4a      	ldr	r2, [pc, #296]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fd fba2 	bl	8002224 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7fd fb9e 	bl	8002224 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1d4      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004af6:	4b41      	ldr	r3, [pc, #260]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0ef      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x3ec>
 8004b04:	e01b      	b.n	8004b3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b06:	4b3d      	ldr	r3, [pc, #244]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0c:	4a3b      	ldr	r2, [pc, #236]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b16:	f7fd fb85 	bl	8002224 <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b1e:	f7fd fb81 	bl	8002224 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e1b7      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b30:	4b32      	ldr	r3, [pc, #200]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1ef      	bne.n	8004b1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 80a6 	beq.w	8004c98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b50:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5c:	4b27      	ldr	r3, [pc, #156]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	4a26      	ldr	r2, [pc, #152]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6593      	str	r3, [r2, #88]	; 0x58
 8004b68:	4b24      	ldr	r3, [pc, #144]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b70:	60bb      	str	r3, [r7, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b78:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d118      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b84:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b90:	f7fd fb48 	bl	8002224 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b98:	f7fd fb44 	bl	8002224 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e17a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <HAL_RCC_OscConfig+0x508>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	d108      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x4d8>
 8004bbe:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc4:	4a0d      	ldr	r2, [pc, #52]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bce:	e029      	b.n	8004c24 <HAL_RCC_OscConfig+0x52c>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	d115      	bne.n	8004c04 <HAL_RCC_OscConfig+0x50c>
 8004bd8:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bde:	4a07      	ldr	r2, [pc, #28]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004be0:	f043 0304 	orr.w	r3, r3, #4
 8004be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bee:	4a03      	ldr	r2, [pc, #12]	; (8004bfc <HAL_RCC_OscConfig+0x504>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bf8:	e014      	b.n	8004c24 <HAL_RCC_OscConfig+0x52c>
 8004bfa:	bf00      	nop
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	40007000 	.word	0x40007000
 8004c04:	4b9c      	ldr	r3, [pc, #624]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0a:	4a9b      	ldr	r2, [pc, #620]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c14:	4b98      	ldr	r3, [pc, #608]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	4a97      	ldr	r2, [pc, #604]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c1c:	f023 0304 	bic.w	r3, r3, #4
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d016      	beq.n	8004c5a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2c:	f7fd fafa 	bl	8002224 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c32:	e00a      	b.n	8004c4a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c34:	f7fd faf6 	bl	8002224 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e12a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4a:	4b8b      	ldr	r3, [pc, #556]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ed      	beq.n	8004c34 <HAL_RCC_OscConfig+0x53c>
 8004c58:	e015      	b.n	8004c86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5a:	f7fd fae3 	bl	8002224 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd fadf 	bl	8002224 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e113      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c78:	4b7f      	ldr	r3, [pc, #508]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1ed      	bne.n	8004c62 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c86:	7ffb      	ldrb	r3, [r7, #31]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d105      	bne.n	8004c98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8c:	4b7a      	ldr	r3, [pc, #488]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c90:	4a79      	ldr	r2, [pc, #484]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 80fe 	beq.w	8004e9e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	f040 80d0 	bne.w	8004e4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004cac:	4b72      	ldr	r3, [pc, #456]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	f003 0203 	and.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d130      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d127      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d11f      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cec:	2a07      	cmp	r2, #7
 8004cee:	bf14      	ite	ne
 8004cf0:	2201      	movne	r2, #1
 8004cf2:	2200      	moveq	r2, #0
 8004cf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d04:	085b      	lsrs	r3, r3, #1
 8004d06:	3b01      	subs	r3, #1
 8004d08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d109      	bne.n	8004d22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d06e      	beq.n	8004e00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b0c      	cmp	r3, #12
 8004d26:	d069      	beq.n	8004dfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004d28:	4b53      	ldr	r3, [pc, #332]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004d34:	4b50      	ldr	r3, [pc, #320]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0ad      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d44:	4b4c      	ldr	r3, [pc, #304]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a4b      	ldr	r2, [pc, #300]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d50:	f7fd fa68 	bl	8002224 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fd fa64 	bl	8002224 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e09a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d6a:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f0      	bne.n	8004d58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d76:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <HAL_RCC_OscConfig+0x784>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d86:	3a01      	subs	r2, #1
 8004d88:	0112      	lsls	r2, r2, #4
 8004d8a:	4311      	orrs	r1, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d90:	0212      	lsls	r2, r2, #8
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d98:	0852      	lsrs	r2, r2, #1
 8004d9a:	3a01      	subs	r2, #1
 8004d9c:	0552      	lsls	r2, r2, #21
 8004d9e:	4311      	orrs	r1, r2
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004da4:	0852      	lsrs	r2, r2, #1
 8004da6:	3a01      	subs	r2, #1
 8004da8:	0652      	lsls	r2, r2, #25
 8004daa:	4311      	orrs	r1, r2
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004db0:	0912      	lsrs	r2, r2, #4
 8004db2:	0452      	lsls	r2, r2, #17
 8004db4:	430a      	orrs	r2, r1
 8004db6:	4930      	ldr	r1, [pc, #192]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b2e      	ldr	r3, [pc, #184]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dc8:	4b2b      	ldr	r3, [pc, #172]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	4a2a      	ldr	r2, [pc, #168]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004dd4:	f7fd fa26 	bl	8002224 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fd fa22 	bl	8002224 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e058      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004dfa:	e050      	b.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e04f      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e00:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d148      	bne.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b1a      	ldr	r3, [pc, #104]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a19      	ldr	r2, [pc, #100]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e18:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	4a16      	ldr	r2, [pc, #88]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e24:	f7fd f9fe 	bl	8002224 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7fd f9fa 	bl	8002224 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e030      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e3e:	4b0e      	ldr	r3, [pc, #56]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x734>
 8004e4a:	e028      	b.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2b0c      	cmp	r3, #12
 8004e50:	d023      	beq.n	8004e9a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e52:	4b09      	ldr	r3, [pc, #36]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <HAL_RCC_OscConfig+0x780>)
 8004e58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5e:	f7fd f9e1 	bl	8002224 <HAL_GetTick>
 8004e62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e64:	e00c      	b.n	8004e80 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e66:	f7fd f9dd 	bl	8002224 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d905      	bls.n	8004e80 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e013      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e80:	4b09      	ldr	r3, [pc, #36]	; (8004ea8 <HAL_RCC_OscConfig+0x7b0>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1ec      	bne.n	8004e66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e8c:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_RCC_OscConfig+0x7b0>)
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	4905      	ldr	r1, [pc, #20]	; (8004ea8 <HAL_RCC_OscConfig+0x7b0>)
 8004e92:	4b06      	ldr	r3, [pc, #24]	; (8004eac <HAL_RCC_OscConfig+0x7b4>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	60cb      	str	r3, [r1, #12]
 8004e98:	e001      	b.n	8004e9e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e000      	b.n	8004ea0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3720      	adds	r7, #32
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	feeefffc 	.word	0xfeeefffc

08004eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0e7      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b75      	ldr	r3, [pc, #468]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d910      	bls.n	8004ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b72      	ldr	r3, [pc, #456]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 0207 	bic.w	r2, r3, #7
 8004eda:	4970      	ldr	r1, [pc, #448]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b6e      	ldr	r3, [pc, #440]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e0cf      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d010      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	4b66      	ldr	r3, [pc, #408]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d908      	bls.n	8004f22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f10:	4b63      	ldr	r3, [pc, #396]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	4960      	ldr	r1, [pc, #384]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0301 	and.w	r3, r3, #1
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d04c      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d107      	bne.n	8004f46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f36:	4b5a      	ldr	r3, [pc, #360]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d121      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e0a6      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f4e:	4b54      	ldr	r3, [pc, #336]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d115      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e09a      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d107      	bne.n	8004f76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f66:	4b4e      	ldr	r3, [pc, #312]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d109      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e08e      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f76:	4b4a      	ldr	r3, [pc, #296]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e086      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f86:	4b46      	ldr	r3, [pc, #280]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f023 0203 	bic.w	r2, r3, #3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	4943      	ldr	r1, [pc, #268]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f98:	f7fd f944 	bl	8002224 <HAL_GetTick>
 8004f9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa0:	f7fd f940 	bl	8002224 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e06e      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb6:	4b3a      	ldr	r3, [pc, #232]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 020c 	and.w	r2, r3, #12
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d1eb      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d010      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d208      	bcs.n	8004ff6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe4:	4b2e      	ldr	r3, [pc, #184]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	492b      	ldr	r1, [pc, #172]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff6:	4b29      	ldr	r3, [pc, #164]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d210      	bcs.n	8005026 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005004:	4b25      	ldr	r3, [pc, #148]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 0207 	bic.w	r2, r3, #7
 800500c:	4923      	ldr	r1, [pc, #140]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	4313      	orrs	r3, r2
 8005012:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005014:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCC_ClockConfig+0x1ec>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0307 	and.w	r3, r3, #7
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e036      	b.n	8005094 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	d008      	beq.n	8005044 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4918      	ldr	r1, [pc, #96]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d009      	beq.n	8005064 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	4910      	ldr	r1, [pc, #64]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005064:	f000 f824 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 8005068:	4602      	mov	r2, r0
 800506a:	4b0d      	ldr	r3, [pc, #52]	; (80050a0 <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	091b      	lsrs	r3, r3, #4
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	490b      	ldr	r1, [pc, #44]	; (80050a4 <HAL_RCC_ClockConfig+0x1f4>)
 8005076:	5ccb      	ldrb	r3, [r1, r3]
 8005078:	f003 031f 	and.w	r3, r3, #31
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	4a09      	ldr	r2, [pc, #36]	; (80050a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005082:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005084:	4b09      	ldr	r3, [pc, #36]	; (80050ac <HAL_RCC_ClockConfig+0x1fc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7fd f87b 	bl	8002184 <HAL_InitTick>
 800508e:	4603      	mov	r3, r0
 8005090:	72fb      	strb	r3, [r7, #11]

  return status;
 8005092:	7afb      	ldrb	r3, [r7, #11]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40022000 	.word	0x40022000
 80050a0:	40021000 	.word	0x40021000
 80050a4:	0800a6ac 	.word	0x0800a6ac
 80050a8:	200003f8 	.word	0x200003f8
 80050ac:	200003fc 	.word	0x200003fc

080050b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b089      	sub	sp, #36	; 0x24
 80050b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	2300      	movs	r3, #0
 80050bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050be:	4b3e      	ldr	r3, [pc, #248]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f003 030c 	and.w	r3, r3, #12
 80050c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050c8:	4b3b      	ldr	r3, [pc, #236]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x34>
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d121      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d11e      	bne.n	8005122 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050e4:	4b34      	ldr	r3, [pc, #208]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80050f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f6:	0a1b      	lsrs	r3, r3, #8
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	61fb      	str	r3, [r7, #28]
 80050fe:	e005      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800510c:	4a2b      	ldr	r2, [pc, #172]	; (80051bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005114:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10d      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005120:	e00a      	b.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	2b04      	cmp	r3, #4
 8005126:	d102      	bne.n	800512e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005128:	4b25      	ldr	r3, [pc, #148]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e004      	b.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d101      	bne.n	8005138 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005134:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005136:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d134      	bne.n	80051a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800513e:	4b1e      	ldr	r3, [pc, #120]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b02      	cmp	r3, #2
 800514c:	d003      	beq.n	8005156 <HAL_RCC_GetSysClockFreq+0xa6>
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d003      	beq.n	800515c <HAL_RCC_GetSysClockFreq+0xac>
 8005154:	e005      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005156:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005158:	617b      	str	r3, [r7, #20]
      break;
 800515a:	e005      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800515c:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800515e:	617b      	str	r3, [r7, #20]
      break;
 8005160:	e002      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	617b      	str	r3, [r7, #20]
      break;
 8005166:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005168:	4b13      	ldr	r3, [pc, #76]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	3301      	adds	r3, #1
 8005174:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005176:	4b10      	ldr	r3, [pc, #64]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	fb03 f202 	mul.w	r2, r3, r2
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	fbb2 f3f3 	udiv	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800518e:	4b0a      	ldr	r3, [pc, #40]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	0e5b      	lsrs	r3, r3, #25
 8005194:	f003 0303 	and.w	r3, r3, #3
 8005198:	3301      	adds	r3, #1
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80051a8:	69bb      	ldr	r3, [r7, #24]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3724      	adds	r7, #36	; 0x24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	40021000 	.word	0x40021000
 80051bc:	0800a6c4 	.word	0x0800a6c4
 80051c0:	00f42400 	.word	0x00f42400
 80051c4:	007a1200 	.word	0x007a1200

080051c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <HAL_RCC_GetHCLKFreq+0x14>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	200003f8 	.word	0x200003f8

080051e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051e4:	f7ff fff0 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b06      	ldr	r3, [pc, #24]	; (8005204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	f003 0307 	and.w	r3, r3, #7
 80051f4:	4904      	ldr	r1, [pc, #16]	; (8005208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051f6:	5ccb      	ldrb	r3, [r1, r3]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005200:	4618      	mov	r0, r3
 8005202:	bd80      	pop	{r7, pc}
 8005204:	40021000 	.word	0x40021000
 8005208:	0800a6bc 	.word	0x0800a6bc

0800520c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005210:	f7ff ffda 	bl	80051c8 <HAL_RCC_GetHCLKFreq>
 8005214:	4602      	mov	r2, r0
 8005216:	4b06      	ldr	r3, [pc, #24]	; (8005230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	0adb      	lsrs	r3, r3, #11
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	4904      	ldr	r1, [pc, #16]	; (8005234 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005222:	5ccb      	ldrb	r3, [r1, r3]
 8005224:	f003 031f 	and.w	r3, r3, #31
 8005228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800522c:	4618      	mov	r0, r3
 800522e:	bd80      	pop	{r7, pc}
 8005230:	40021000 	.word	0x40021000
 8005234:	0800a6bc 	.word	0x0800a6bc

08005238 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005244:	4b2a      	ldr	r3, [pc, #168]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005250:	f7ff f9ee 	bl	8004630 <HAL_PWREx_GetVoltageRange>
 8005254:	6178      	str	r0, [r7, #20]
 8005256:	e014      	b.n	8005282 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005258:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	4a24      	ldr	r2, [pc, #144]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6593      	str	r3, [r2, #88]	; 0x58
 8005264:	4b22      	ldr	r3, [pc, #136]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005270:	f7ff f9de 	bl	8004630 <HAL_PWREx_GetVoltageRange>
 8005274:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005276:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800527a:	4a1d      	ldr	r2, [pc, #116]	; (80052f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800527c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005280:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005288:	d10b      	bne.n	80052a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b80      	cmp	r3, #128	; 0x80
 800528e:	d919      	bls.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2ba0      	cmp	r3, #160	; 0xa0
 8005294:	d902      	bls.n	800529c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005296:	2302      	movs	r3, #2
 8005298:	613b      	str	r3, [r7, #16]
 800529a:	e013      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800529c:	2301      	movs	r3, #1
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	e010      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d902      	bls.n	80052ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80052a8:	2303      	movs	r3, #3
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	e00a      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d102      	bne.n	80052ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80052b4:	2302      	movs	r3, #2
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e004      	b.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b70      	cmp	r3, #112	; 0x70
 80052be:	d101      	bne.n	80052c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80052c0:	2301      	movs	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f023 0207 	bic.w	r2, r3, #7
 80052cc:	4909      	ldr	r1, [pc, #36]	; (80052f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80052d4:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d001      	beq.n	80052e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	40022000 	.word	0x40022000

080052f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005300:	2300      	movs	r3, #0
 8005302:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005304:	2300      	movs	r3, #0
 8005306:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005310:	2b00      	cmp	r3, #0
 8005312:	d041      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005318:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800531c:	d02a      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800531e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005322:	d824      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005324:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005328:	d008      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800532a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800532e:	d81e      	bhi.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005334:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005338:	d010      	beq.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800533a:	e018      	b.n	800536e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800533c:	4b86      	ldr	r3, [pc, #536]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	4a85      	ldr	r2, [pc, #532]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005346:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005348:	e015      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	3304      	adds	r3, #4
 800534e:	2100      	movs	r1, #0
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fabb 	bl	80058cc <RCCEx_PLLSAI1_Config>
 8005356:	4603      	mov	r3, r0
 8005358:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800535a:	e00c      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	3320      	adds	r3, #32
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fba6 	bl	8005ab4 <RCCEx_PLLSAI2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800536c:	e003      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	74fb      	strb	r3, [r7, #19]
      break;
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005374:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10b      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800537c:	4b76      	ldr	r3, [pc, #472]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800538a:	4973      	ldr	r1, [pc, #460]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005392:	e001      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d041      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053ac:	d02a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80053ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80053b2:	d824      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053b8:	d008      	beq.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80053ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053be:	d81e      	bhi.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x106>
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80053c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80053c8:	d010      	beq.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80053ca:	e018      	b.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80053cc:	4b62      	ldr	r3, [pc, #392]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	4a61      	ldr	r2, [pc, #388]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053d8:	e015      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3304      	adds	r3, #4
 80053de:	2100      	movs	r1, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 fa73 	bl	80058cc <RCCEx_PLLSAI1_Config>
 80053e6:	4603      	mov	r3, r0
 80053e8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053ea:	e00c      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3320      	adds	r3, #32
 80053f0:	2100      	movs	r1, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 fb5e 	bl	8005ab4 <RCCEx_PLLSAI2_Config>
 80053f8:	4603      	mov	r3, r0
 80053fa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053fc:	e003      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	74fb      	strb	r3, [r7, #19]
      break;
 8005402:	e000      	b.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005406:	7cfb      	ldrb	r3, [r7, #19]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800540c:	4b52      	ldr	r3, [pc, #328]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005412:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541a:	494f      	ldr	r1, [pc, #316]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005422:	e001      	b.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80a0 	beq.w	8005576 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005436:	2300      	movs	r3, #0
 8005438:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800543a:	4b47      	ldr	r3, [pc, #284]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005446:	2301      	movs	r3, #1
 8005448:	e000      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800544a:	2300      	movs	r3, #0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00d      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005450:	4b41      	ldr	r3, [pc, #260]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	4a40      	ldr	r2, [pc, #256]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800545a:	6593      	str	r3, [r2, #88]	; 0x58
 800545c:	4b3e      	ldr	r3, [pc, #248]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005468:	2301      	movs	r3, #1
 800546a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800546c:	4b3b      	ldr	r3, [pc, #236]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3a      	ldr	r2, [pc, #232]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005476:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005478:	f7fc fed4 	bl	8002224 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800547e:	e009      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005480:	f7fc fed0 	bl	8002224 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d902      	bls.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	74fb      	strb	r3, [r7, #19]
        break;
 8005492:	e005      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005494:	4b31      	ldr	r3, [pc, #196]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0ef      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80054a0:	7cfb      	ldrb	r3, [r7, #19]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d15c      	bne.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054a6:	4b2c      	ldr	r3, [pc, #176]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054b0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01f      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d019      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054c4:	4b24      	ldr	r3, [pc, #144]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054d0:	4b21      	ldr	r3, [pc, #132]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d6:	4a20      	ldr	r2, [pc, #128]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054e0:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e6:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d016      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005502:	f7fc fe8f 	bl	8002224 <HAL_GetTick>
 8005506:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005508:	e00b      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800550a:	f7fc fe8b 	bl	8002224 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	f241 3288 	movw	r2, #5000	; 0x1388
 8005518:	4293      	cmp	r3, r2
 800551a:	d902      	bls.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	74fb      	strb	r3, [r7, #19]
            break;
 8005520:	e006      	b.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0ec      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10c      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005536:	4b08      	ldr	r3, [pc, #32]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005546:	4904      	ldr	r1, [pc, #16]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005548:	4313      	orrs	r3, r2
 800554a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800554e:	e009      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	74bb      	strb	r3, [r7, #18]
 8005554:	e006      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005556:	bf00      	nop
 8005558:	40021000 	.word	0x40021000
 800555c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005564:	7c7b      	ldrb	r3, [r7, #17]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556a:	4b9e      	ldr	r3, [pc, #632]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	4a9d      	ldr	r2, [pc, #628]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005574:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0301 	and.w	r3, r3, #1
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005582:	4b98      	ldr	r3, [pc, #608]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f023 0203 	bic.w	r2, r3, #3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	4994      	ldr	r1, [pc, #592]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0302 	and.w	r3, r3, #2
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055a4:	4b8f      	ldr	r3, [pc, #572]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 020c 	bic.w	r2, r3, #12
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b2:	498c      	ldr	r1, [pc, #560]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0304 	and.w	r3, r3, #4
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055c6:	4b87      	ldr	r3, [pc, #540]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	4983      	ldr	r1, [pc, #524]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055e8:	4b7e      	ldr	r3, [pc, #504]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055f6:	497b      	ldr	r1, [pc, #492]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800560a:	4b76      	ldr	r3, [pc, #472]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005618:	4972      	ldr	r1, [pc, #456]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0320 	and.w	r3, r3, #32
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800562c:	4b6d      	ldr	r3, [pc, #436]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800563a:	496a      	ldr	r1, [pc, #424]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800565c:	4961      	ldr	r1, [pc, #388]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005670:	4b5c      	ldr	r3, [pc, #368]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567e:	4959      	ldr	r1, [pc, #356]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005692:	4b54      	ldr	r3, [pc, #336]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a0:	4950      	ldr	r1, [pc, #320]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b4:	4b4b      	ldr	r3, [pc, #300]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	4948      	ldr	r1, [pc, #288]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d6:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056e4:	493f      	ldr	r1, [pc, #252]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d028      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056f8:	4b3a      	ldr	r3, [pc, #232]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005706:	4937      	ldr	r1, [pc, #220]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005708:	4313      	orrs	r3, r2
 800570a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005712:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005716:	d106      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005718:	4b32      	ldr	r3, [pc, #200]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	4a31      	ldr	r2, [pc, #196]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005722:	60d3      	str	r3, [r2, #12]
 8005724:	e011      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800572a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800572e:	d10c      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	2101      	movs	r1, #1
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f8c8 	bl	80058cc <RCCEx_PLLSAI1_Config>
 800573c:	4603      	mov	r3, r0
 800573e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005740:	7cfb      	ldrb	r3, [r7, #19]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005746:	7cfb      	ldrb	r3, [r7, #19]
 8005748:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d028      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005756:	4b23      	ldr	r3, [pc, #140]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005764:	491f      	ldr	r1, [pc, #124]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005774:	d106      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005776:	4b1b      	ldr	r3, [pc, #108]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	4a1a      	ldr	r2, [pc, #104]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800577c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005780:	60d3      	str	r3, [r2, #12]
 8005782:	e011      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800578c:	d10c      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	2101      	movs	r1, #1
 8005794:	4618      	mov	r0, r3
 8005796:	f000 f899 	bl	80058cc <RCCEx_PLLSAI1_Config>
 800579a:	4603      	mov	r3, r0
 800579c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800579e:	7cfb      	ldrb	r3, [r7, #19]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d001      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80057a4:	7cfb      	ldrb	r3, [r7, #19]
 80057a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d02b      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057b4:	4b0b      	ldr	r3, [pc, #44]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c2:	4908      	ldr	r1, [pc, #32]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d2:	d109      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057d4:	4b03      	ldr	r3, [pc, #12]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	4a02      	ldr	r2, [pc, #8]	; (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057de:	60d3      	str	r3, [r2, #12]
 80057e0:	e014      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057f0:	d10c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3304      	adds	r3, #4
 80057f6:	2101      	movs	r1, #1
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f867 	bl	80058cc <RCCEx_PLLSAI1_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005802:	7cfb      	ldrb	r3, [r7, #19]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005808:	7cfb      	ldrb	r3, [r7, #19]
 800580a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d02f      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005818:	4b2b      	ldr	r3, [pc, #172]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005826:	4928      	ldr	r1, [pc, #160]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005836:	d10d      	bne.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	2102      	movs	r1, #2
 800583e:	4618      	mov	r0, r3
 8005840:	f000 f844 	bl	80058cc <RCCEx_PLLSAI1_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005848:	7cfb      	ldrb	r3, [r7, #19]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d014      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800584e:	7cfb      	ldrb	r3, [r7, #19]
 8005850:	74bb      	strb	r3, [r7, #18]
 8005852:	e011      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800585c:	d10c      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	3320      	adds	r3, #32
 8005862:	2102      	movs	r1, #2
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f925 	bl	8005ab4 <RCCEx_PLLSAI2_Config>
 800586a:	4603      	mov	r3, r0
 800586c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005884:	4b10      	ldr	r3, [pc, #64]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005892:	490d      	ldr	r1, [pc, #52]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00b      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058b6:	4904      	ldr	r1, [pc, #16]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80058be:	7cbb      	ldrb	r3, [r7, #18]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40021000 	.word	0x40021000

080058cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058d6:	2300      	movs	r3, #0
 80058d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058da:	4b75      	ldr	r3, [pc, #468]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0303 	and.w	r3, r3, #3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058e6:	4b72      	ldr	r3, [pc, #456]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0203 	and.w	r2, r3, #3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d10d      	bne.n	8005912 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
       ||
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058fe:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
       ||
 800590e:	429a      	cmp	r2, r3
 8005910:	d047      	beq.n	80059a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	73fb      	strb	r3, [r7, #15]
 8005916:	e044      	b.n	80059a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d018      	beq.n	8005952 <RCCEx_PLLSAI1_Config+0x86>
 8005920:	2b03      	cmp	r3, #3
 8005922:	d825      	bhi.n	8005970 <RCCEx_PLLSAI1_Config+0xa4>
 8005924:	2b01      	cmp	r3, #1
 8005926:	d002      	beq.n	800592e <RCCEx_PLLSAI1_Config+0x62>
 8005928:	2b02      	cmp	r3, #2
 800592a:	d009      	beq.n	8005940 <RCCEx_PLLSAI1_Config+0x74>
 800592c:	e020      	b.n	8005970 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800592e:	4b60      	ldr	r3, [pc, #384]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d11d      	bne.n	8005976 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800593e:	e01a      	b.n	8005976 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005940:	4b5b      	ldr	r3, [pc, #364]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005948:	2b00      	cmp	r3, #0
 800594a:	d116      	bne.n	800597a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005950:	e013      	b.n	800597a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005952:	4b57      	ldr	r3, [pc, #348]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800595e:	4b54      	ldr	r3, [pc, #336]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800596e:	e006      	b.n	800597e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
      break;
 8005974:	e004      	b.n	8005980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005976:	bf00      	nop
 8005978:	e002      	b.n	8005980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597a:	bf00      	nop
 800597c:	e000      	b.n	8005980 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800597e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10d      	bne.n	80059a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005986:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6819      	ldr	r1, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	011b      	lsls	r3, r3, #4
 800599a:	430b      	orrs	r3, r1
 800599c:	4944      	ldr	r1, [pc, #272]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d17d      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80059a8:	4b41      	ldr	r3, [pc, #260]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a40      	ldr	r2, [pc, #256]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b4:	f7fc fc36 	bl	8002224 <HAL_GetTick>
 80059b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059ba:	e009      	b.n	80059d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80059bc:	f7fc fc32 	bl	8002224 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d902      	bls.n	80059d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	73fb      	strb	r3, [r7, #15]
        break;
 80059ce:	e005      	b.n	80059dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80059d0:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1ef      	bne.n	80059bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d160      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d111      	bne.n	8005a0c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059e8:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6892      	ldr	r2, [r2, #8]
 80059f8:	0211      	lsls	r1, r2, #8
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	68d2      	ldr	r2, [r2, #12]
 80059fe:	0912      	lsrs	r2, r2, #4
 8005a00:	0452      	lsls	r2, r2, #17
 8005a02:	430a      	orrs	r2, r1
 8005a04:	492a      	ldr	r1, [pc, #168]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	610b      	str	r3, [r1, #16]
 8005a0a:	e027      	b.n	8005a5c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d112      	bne.n	8005a38 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a12:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005a1a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	6892      	ldr	r2, [r2, #8]
 8005a22:	0211      	lsls	r1, r2, #8
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6912      	ldr	r2, [r2, #16]
 8005a28:	0852      	lsrs	r2, r2, #1
 8005a2a:	3a01      	subs	r2, #1
 8005a2c:	0552      	lsls	r2, r2, #21
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	491f      	ldr	r1, [pc, #124]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	610b      	str	r3, [r1, #16]
 8005a36:	e011      	b.n	8005a5c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005a38:	4b1d      	ldr	r3, [pc, #116]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005a40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6892      	ldr	r2, [r2, #8]
 8005a48:	0211      	lsls	r1, r2, #8
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6952      	ldr	r2, [r2, #20]
 8005a4e:	0852      	lsrs	r2, r2, #1
 8005a50:	3a01      	subs	r2, #1
 8005a52:	0652      	lsls	r2, r2, #25
 8005a54:	430a      	orrs	r2, r1
 8005a56:	4916      	ldr	r1, [pc, #88]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a5c:	4b14      	ldr	r3, [pc, #80]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fc fbdc 	bl	8002224 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a6e:	e009      	b.n	8005a84 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a70:	f7fc fbd8 	bl	8002224 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d902      	bls.n	8005a84 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	73fb      	strb	r3, [r7, #15]
          break;
 8005a82:	e005      	b.n	8005a90 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d0ef      	beq.n	8005a70 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a96:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a98:	691a      	ldr	r2, [r3, #16]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	4904      	ldr	r1, [pc, #16]	; (8005ab0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	40021000 	.word	0x40021000

08005ab4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ac2:	4b6a      	ldr	r3, [pc, #424]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0303 	and.w	r3, r3, #3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d018      	beq.n	8005b00 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ace:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f003 0203 	and.w	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d10d      	bne.n	8005afa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d009      	beq.n	8005afa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005ae6:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	091b      	lsrs	r3, r3, #4
 8005aec:	f003 0307 	and.w	r3, r3, #7
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
       ||
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d047      	beq.n	8005b8a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	73fb      	strb	r3, [r7, #15]
 8005afe:	e044      	b.n	8005b8a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d018      	beq.n	8005b3a <RCCEx_PLLSAI2_Config+0x86>
 8005b08:	2b03      	cmp	r3, #3
 8005b0a:	d825      	bhi.n	8005b58 <RCCEx_PLLSAI2_Config+0xa4>
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d002      	beq.n	8005b16 <RCCEx_PLLSAI2_Config+0x62>
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d009      	beq.n	8005b28 <RCCEx_PLLSAI2_Config+0x74>
 8005b14:	e020      	b.n	8005b58 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005b16:	4b55      	ldr	r3, [pc, #340]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d11d      	bne.n	8005b5e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b26:	e01a      	b.n	8005b5e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005b28:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d116      	bne.n	8005b62 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b38:	e013      	b.n	8005b62 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10f      	bne.n	8005b66 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b46:	4b49      	ldr	r3, [pc, #292]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b56:	e006      	b.n	8005b66 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	e004      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b5e:	bf00      	nop
 8005b60:	e002      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b66:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b68:	7bfb      	ldrb	r3, [r7, #15]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10d      	bne.n	8005b8a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b6e:	4b3f      	ldr	r3, [pc, #252]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6819      	ldr	r1, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	011b      	lsls	r3, r3, #4
 8005b82:	430b      	orrs	r3, r1
 8005b84:	4939      	ldr	r1, [pc, #228]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d167      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b90:	4b36      	ldr	r3, [pc, #216]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a35      	ldr	r2, [pc, #212]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b9c:	f7fc fb42 	bl	8002224 <HAL_GetTick>
 8005ba0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ba2:	e009      	b.n	8005bb8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ba4:	f7fc fb3e 	bl	8002224 <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d902      	bls.n	8005bb8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	73fb      	strb	r3, [r7, #15]
        break;
 8005bb6:	e005      	b.n	8005bc4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005bb8:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1ef      	bne.n	8005ba4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d14a      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d111      	bne.n	8005bf4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bd0:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005bd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6892      	ldr	r2, [r2, #8]
 8005be0:	0211      	lsls	r1, r2, #8
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68d2      	ldr	r2, [r2, #12]
 8005be6:	0912      	lsrs	r2, r2, #4
 8005be8:	0452      	lsls	r2, r2, #17
 8005bea:	430a      	orrs	r2, r1
 8005bec:	491f      	ldr	r1, [pc, #124]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	614b      	str	r3, [r1, #20]
 8005bf2:	e011      	b.n	8005c18 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bf4:	4b1d      	ldr	r3, [pc, #116]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bfc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6892      	ldr	r2, [r2, #8]
 8005c04:	0211      	lsls	r1, r2, #8
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6912      	ldr	r2, [r2, #16]
 8005c0a:	0852      	lsrs	r2, r2, #1
 8005c0c:	3a01      	subs	r2, #1
 8005c0e:	0652      	lsls	r2, r2, #25
 8005c10:	430a      	orrs	r2, r1
 8005c12:	4916      	ldr	r1, [pc, #88]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005c18:	4b14      	ldr	r3, [pc, #80]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c24:	f7fc fafe 	bl	8002224 <HAL_GetTick>
 8005c28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c2a:	e009      	b.n	8005c40 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005c2c:	f7fc fafa 	bl	8002224 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d902      	bls.n	8005c40 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005c3e:	e005      	b.n	8005c4c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0ef      	beq.n	8005c2c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d106      	bne.n	8005c60 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c52:	4b06      	ldr	r3, [pc, #24]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	4904      	ldr	r1, [pc, #16]	; (8005c6c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000

08005c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e049      	b.n	8005d16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fc f806 	bl	8001ca8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f001 f87e 	bl	8006db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d001      	beq.n	8005d38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e047      	b.n	8005dc8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <HAL_TIM_Base_Start+0xb4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01d      	beq.n	8005d86 <HAL_TIM_Base_Start+0x66>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d52:	d018      	beq.n	8005d86 <HAL_TIM_Base_Start+0x66>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_TIM_Base_Start+0xb8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_TIM_Base_Start+0x66>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_TIM_Base_Start+0xbc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_TIM_Base_Start+0x66>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_TIM_Base_Start+0xc0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_TIM_Base_Start+0x66>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <HAL_TIM_Base_Start+0xc4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIM_Base_Start+0x66>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <HAL_TIM_Base_Start+0xc8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d115      	bne.n	8005db2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	4b17      	ldr	r3, [pc, #92]	; (8005dec <HAL_TIM_Base_Start+0xcc>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b06      	cmp	r3, #6
 8005d96:	d015      	beq.n	8005dc4 <HAL_TIM_Base_Start+0xa4>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9e:	d011      	beq.n	8005dc4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db0:	e008      	b.n	8005dc4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e000      	b.n	8005dc6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40013400 	.word	0x40013400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	00010007 	.word	0x00010007

08005df0 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6a1a      	ldr	r2, [r3, #32]
 8005dfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e02:	4013      	ands	r3, r2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10f      	bne.n	8005e28 <HAL_TIM_Base_Stop+0x38>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6a1a      	ldr	r2, [r3, #32]
 8005e0e:	f240 4344 	movw	r3, #1092	; 0x444
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_Base_Stop+0x38>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
	...

08005e40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d001      	beq.n	8005e58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e04f      	b.n	8005ef8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f042 0201 	orr.w	r2, r2, #1
 8005e6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a23      	ldr	r2, [pc, #140]	; (8005f04 <HAL_TIM_Base_Start_IT+0xc4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d01d      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e82:	d018      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <HAL_TIM_Base_Start_IT+0xc8>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d013      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a1e      	ldr	r2, [pc, #120]	; (8005f0c <HAL_TIM_Base_Start_IT+0xcc>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d00e      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIM_Base_Start_IT+0x76>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <HAL_TIM_Base_Start_IT+0xd8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d115      	bne.n	8005ee2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	689a      	ldr	r2, [r3, #8]
 8005ebc:	4b17      	ldr	r3, [pc, #92]	; (8005f1c <HAL_TIM_Base_Start_IT+0xdc>)
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b06      	cmp	r3, #6
 8005ec6:	d015      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0xb4>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ece:	d011      	beq.n	8005ef4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f042 0201 	orr.w	r2, r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee0:	e008      	b.n	8005ef4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f042 0201 	orr.w	r2, r2, #1
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	e000      	b.n	8005ef6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ef4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr
 8005f04:	40012c00 	.word	0x40012c00
 8005f08:	40000400 	.word	0x40000400
 8005f0c:	40000800 	.word	0x40000800
 8005f10:	40000c00 	.word	0x40000c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40014000 	.word	0x40014000
 8005f1c:	00010007 	.word	0x00010007

08005f20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e049      	b.n	8005fc6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fb ff04 	bl	8001d54 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f000 ff26 	bl	8006db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d109      	bne.n	8005ff4 <HAL_TIM_PWM_Start+0x24>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	bf14      	ite	ne
 8005fec:	2301      	movne	r3, #1
 8005fee:	2300      	moveq	r3, #0
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	e03c      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d109      	bne.n	800600e <HAL_TIM_PWM_Start+0x3e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	bf14      	ite	ne
 8006006:	2301      	movne	r3, #1
 8006008:	2300      	moveq	r3, #0
 800600a:	b2db      	uxtb	r3, r3
 800600c:	e02f      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b08      	cmp	r3, #8
 8006012:	d109      	bne.n	8006028 <HAL_TIM_PWM_Start+0x58>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b01      	cmp	r3, #1
 800601e:	bf14      	ite	ne
 8006020:	2301      	movne	r3, #1
 8006022:	2300      	moveq	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	e022      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b0c      	cmp	r3, #12
 800602c:	d109      	bne.n	8006042 <HAL_TIM_PWM_Start+0x72>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b01      	cmp	r3, #1
 8006038:	bf14      	ite	ne
 800603a:	2301      	movne	r3, #1
 800603c:	2300      	moveq	r3, #0
 800603e:	b2db      	uxtb	r3, r3
 8006040:	e015      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b10      	cmp	r3, #16
 8006046:	d109      	bne.n	800605c <HAL_TIM_PWM_Start+0x8c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	e008      	b.n	800606e <HAL_TIM_PWM_Start+0x9e>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	bf14      	ite	ne
 8006068:	2301      	movne	r3, #1
 800606a:	2300      	moveq	r3, #0
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e09c      	b.n	80061b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d104      	bne.n	8006086 <HAL_TIM_PWM_Start+0xb6>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2202      	movs	r2, #2
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006084:	e023      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d104      	bne.n	8006096 <HAL_TIM_PWM_Start+0xc6>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006094:	e01b      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d104      	bne.n	80060a6 <HAL_TIM_PWM_Start+0xd6>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a4:	e013      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b0c      	cmp	r3, #12
 80060aa:	d104      	bne.n	80060b6 <HAL_TIM_PWM_Start+0xe6>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060b4:	e00b      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	2b10      	cmp	r3, #16
 80060ba:	d104      	bne.n	80060c6 <HAL_TIM_PWM_Start+0xf6>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060c4:	e003      	b.n	80060ce <HAL_TIM_PWM_Start+0xfe>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2202      	movs	r2, #2
 80060ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2201      	movs	r2, #1
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f001 fa74 	bl	80075c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a35      	ldr	r2, [pc, #212]	; (80061b8 <HAL_TIM_PWM_Start+0x1e8>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_TIM_PWM_Start+0x13e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a34      	ldr	r2, [pc, #208]	; (80061bc <HAL_TIM_PWM_Start+0x1ec>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d00e      	beq.n	800610e <HAL_TIM_PWM_Start+0x13e>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <HAL_TIM_PWM_Start+0x1f0>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d009      	beq.n	800610e <HAL_TIM_PWM_Start+0x13e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a31      	ldr	r2, [pc, #196]	; (80061c4 <HAL_TIM_PWM_Start+0x1f4>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d004      	beq.n	800610e <HAL_TIM_PWM_Start+0x13e>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <HAL_TIM_PWM_Start+0x1f8>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d101      	bne.n	8006112 <HAL_TIM_PWM_Start+0x142>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_TIM_PWM_Start+0x144>
 8006112:	2300      	movs	r3, #0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d007      	beq.n	8006128 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006126:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a22      	ldr	r2, [pc, #136]	; (80061b8 <HAL_TIM_PWM_Start+0x1e8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01d      	beq.n	800616e <HAL_TIM_PWM_Start+0x19e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800613a:	d018      	beq.n	800616e <HAL_TIM_PWM_Start+0x19e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a22      	ldr	r2, [pc, #136]	; (80061cc <HAL_TIM_PWM_Start+0x1fc>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d013      	beq.n	800616e <HAL_TIM_PWM_Start+0x19e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <HAL_TIM_PWM_Start+0x200>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d00e      	beq.n	800616e <HAL_TIM_PWM_Start+0x19e>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <HAL_TIM_PWM_Start+0x204>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d009      	beq.n	800616e <HAL_TIM_PWM_Start+0x19e>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a17      	ldr	r2, [pc, #92]	; (80061bc <HAL_TIM_PWM_Start+0x1ec>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d004      	beq.n	800616e <HAL_TIM_PWM_Start+0x19e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a15      	ldr	r2, [pc, #84]	; (80061c0 <HAL_TIM_PWM_Start+0x1f0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d115      	bne.n	800619a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	4b18      	ldr	r3, [pc, #96]	; (80061d8 <HAL_TIM_PWM_Start+0x208>)
 8006176:	4013      	ands	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b06      	cmp	r3, #6
 800617e:	d015      	beq.n	80061ac <HAL_TIM_PWM_Start+0x1dc>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006186:	d011      	beq.n	80061ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006198:	e008      	b.n	80061ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	e000      	b.n	80061ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	40012c00 	.word	0x40012c00
 80061bc:	40013400 	.word	0x40013400
 80061c0:	40014000 	.word	0x40014000
 80061c4:	40014400 	.word	0x40014400
 80061c8:	40014800 	.word	0x40014800
 80061cc:	40000400 	.word	0x40000400
 80061d0:	40000800 	.word	0x40000800
 80061d4:	40000c00 	.word	0x40000c00
 80061d8:	00010007 	.word	0x00010007

080061dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2200      	movs	r2, #0
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 f9e8 	bl	80075c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a3e      	ldr	r2, [pc, #248]	; (80062f4 <HAL_TIM_PWM_Stop+0x118>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_TIM_PWM_Stop+0x4a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a3d      	ldr	r2, [pc, #244]	; (80062f8 <HAL_TIM_PWM_Stop+0x11c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <HAL_TIM_PWM_Stop+0x4a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a3b      	ldr	r2, [pc, #236]	; (80062fc <HAL_TIM_PWM_Stop+0x120>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <HAL_TIM_PWM_Stop+0x4a>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a3a      	ldr	r2, [pc, #232]	; (8006300 <HAL_TIM_PWM_Stop+0x124>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <HAL_TIM_PWM_Stop+0x4a>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a38      	ldr	r2, [pc, #224]	; (8006304 <HAL_TIM_PWM_Stop+0x128>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d101      	bne.n	800622a <HAL_TIM_PWM_Stop+0x4e>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <HAL_TIM_PWM_Stop+0x50>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d017      	beq.n	8006260 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a1a      	ldr	r2, [r3, #32]
 8006236:	f241 1311 	movw	r3, #4369	; 0x1111
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10f      	bne.n	8006260 <HAL_TIM_PWM_Stop+0x84>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6a1a      	ldr	r2, [r3, #32]
 8006246:	f240 4344 	movw	r3, #1092	; 0x444
 800624a:	4013      	ands	r3, r2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d107      	bne.n	8006260 <HAL_TIM_PWM_Stop+0x84>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800625e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6a1a      	ldr	r2, [r3, #32]
 8006266:	f241 1311 	movw	r3, #4369	; 0x1111
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10f      	bne.n	8006290 <HAL_TIM_PWM_Stop+0xb4>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6a1a      	ldr	r2, [r3, #32]
 8006276:	f240 4344 	movw	r3, #1092	; 0x444
 800627a:	4013      	ands	r3, r2
 800627c:	2b00      	cmp	r3, #0
 800627e:	d107      	bne.n	8006290 <HAL_TIM_PWM_Stop+0xb4>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f022 0201 	bic.w	r2, r2, #1
 800628e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d104      	bne.n	80062a0 <HAL_TIM_PWM_Stop+0xc4>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800629e:	e023      	b.n	80062e8 <HAL_TIM_PWM_Stop+0x10c>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	d104      	bne.n	80062b0 <HAL_TIM_PWM_Stop+0xd4>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062ae:	e01b      	b.n	80062e8 <HAL_TIM_PWM_Stop+0x10c>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b08      	cmp	r3, #8
 80062b4:	d104      	bne.n	80062c0 <HAL_TIM_PWM_Stop+0xe4>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062be:	e013      	b.n	80062e8 <HAL_TIM_PWM_Stop+0x10c>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2b0c      	cmp	r3, #12
 80062c4:	d104      	bne.n	80062d0 <HAL_TIM_PWM_Stop+0xf4>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062ce:	e00b      	b.n	80062e8 <HAL_TIM_PWM_Stop+0x10c>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b10      	cmp	r3, #16
 80062d4:	d104      	bne.n	80062e0 <HAL_TIM_PWM_Stop+0x104>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062de:	e003      	b.n	80062e8 <HAL_TIM_PWM_Stop+0x10c>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40013400 	.word	0x40013400
 80062fc:	40014000 	.word	0x40014000
 8006300:	40014400 	.word	0x40014400
 8006304:	40014800 	.word	0x40014800

08006308 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d109      	bne.n	8006330 <HAL_TIM_PWM_Start_IT+0x28>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	bf14      	ite	ne
 8006328:	2301      	movne	r3, #1
 800632a:	2300      	moveq	r3, #0
 800632c:	b2db      	uxtb	r3, r3
 800632e:	e03c      	b.n	80063aa <HAL_TIM_PWM_Start_IT+0xa2>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	2b04      	cmp	r3, #4
 8006334:	d109      	bne.n	800634a <HAL_TIM_PWM_Start_IT+0x42>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	bf14      	ite	ne
 8006342:	2301      	movne	r3, #1
 8006344:	2300      	moveq	r3, #0
 8006346:	b2db      	uxtb	r3, r3
 8006348:	e02f      	b.n	80063aa <HAL_TIM_PWM_Start_IT+0xa2>
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2b08      	cmp	r3, #8
 800634e:	d109      	bne.n	8006364 <HAL_TIM_PWM_Start_IT+0x5c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b01      	cmp	r3, #1
 800635a:	bf14      	ite	ne
 800635c:	2301      	movne	r3, #1
 800635e:	2300      	moveq	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	e022      	b.n	80063aa <HAL_TIM_PWM_Start_IT+0xa2>
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2b0c      	cmp	r3, #12
 8006368:	d109      	bne.n	800637e <HAL_TIM_PWM_Start_IT+0x76>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b01      	cmp	r3, #1
 8006374:	bf14      	ite	ne
 8006376:	2301      	movne	r3, #1
 8006378:	2300      	moveq	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	e015      	b.n	80063aa <HAL_TIM_PWM_Start_IT+0xa2>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b10      	cmp	r3, #16
 8006382:	d109      	bne.n	8006398 <HAL_TIM_PWM_Start_IT+0x90>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800638a:	b2db      	uxtb	r3, r3
 800638c:	2b01      	cmp	r3, #1
 800638e:	bf14      	ite	ne
 8006390:	2301      	movne	r3, #1
 8006392:	2300      	moveq	r3, #0
 8006394:	b2db      	uxtb	r3, r3
 8006396:	e008      	b.n	80063aa <HAL_TIM_PWM_Start_IT+0xa2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	bf14      	ite	ne
 80063a4:	2301      	movne	r3, #1
 80063a6:	2300      	moveq	r3, #0
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e0e7      	b.n	8006582 <HAL_TIM_PWM_Start_IT+0x27a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d104      	bne.n	80063c2 <HAL_TIM_PWM_Start_IT+0xba>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063c0:	e023      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x102>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d104      	bne.n	80063d2 <HAL_TIM_PWM_Start_IT+0xca>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063d0:	e01b      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x102>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d104      	bne.n	80063e2 <HAL_TIM_PWM_Start_IT+0xda>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2202      	movs	r2, #2
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063e0:	e013      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x102>
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	2b0c      	cmp	r3, #12
 80063e6:	d104      	bne.n	80063f2 <HAL_TIM_PWM_Start_IT+0xea>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063f0:	e00b      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x102>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d104      	bne.n	8006402 <HAL_TIM_PWM_Start_IT+0xfa>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006400:	e003      	b.n	800640a <HAL_TIM_PWM_Start_IT+0x102>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2202      	movs	r2, #2
 8006406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b0c      	cmp	r3, #12
 800640e:	d841      	bhi.n	8006494 <HAL_TIM_PWM_Start_IT+0x18c>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <HAL_TIM_PWM_Start_IT+0x110>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	0800644d 	.word	0x0800644d
 800641c:	08006495 	.word	0x08006495
 8006420:	08006495 	.word	0x08006495
 8006424:	08006495 	.word	0x08006495
 8006428:	0800645f 	.word	0x0800645f
 800642c:	08006495 	.word	0x08006495
 8006430:	08006495 	.word	0x08006495
 8006434:	08006495 	.word	0x08006495
 8006438:	08006471 	.word	0x08006471
 800643c:	08006495 	.word	0x08006495
 8006440:	08006495 	.word	0x08006495
 8006444:	08006495 	.word	0x08006495
 8006448:	08006483 	.word	0x08006483
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0202 	orr.w	r2, r2, #2
 800645a:	60da      	str	r2, [r3, #12]
      break;
 800645c:	e01d      	b.n	800649a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f042 0204 	orr.w	r2, r2, #4
 800646c:	60da      	str	r2, [r3, #12]
      break;
 800646e:	e014      	b.n	800649a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0208 	orr.w	r2, r2, #8
 800647e:	60da      	str	r2, [r3, #12]
      break;
 8006480:	e00b      	b.n	800649a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0210 	orr.w	r2, r2, #16
 8006490:	60da      	str	r2, [r3, #12]
      break;
 8006492:	e002      	b.n	800649a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
      break;
 8006498:	bf00      	nop
  }

  if (status == HAL_OK)
 800649a:	7bfb      	ldrb	r3, [r7, #15]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d16f      	bne.n	8006580 <HAL_TIM_PWM_Start_IT+0x278>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2201      	movs	r2, #1
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f001 f88b 	bl	80075c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a36      	ldr	r2, [pc, #216]	; (800658c <HAL_TIM_PWM_Start_IT+0x284>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d013      	beq.n	80064e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a34      	ldr	r2, [pc, #208]	; (8006590 <HAL_TIM_PWM_Start_IT+0x288>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00e      	beq.n	80064e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a33      	ldr	r2, [pc, #204]	; (8006594 <HAL_TIM_PWM_Start_IT+0x28c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d009      	beq.n	80064e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a31      	ldr	r2, [pc, #196]	; (8006598 <HAL_TIM_PWM_Start_IT+0x290>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d004      	beq.n	80064e0 <HAL_TIM_PWM_Start_IT+0x1d8>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a30      	ldr	r2, [pc, #192]	; (800659c <HAL_TIM_PWM_Start_IT+0x294>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d101      	bne.n	80064e4 <HAL_TIM_PWM_Start_IT+0x1dc>
 80064e0:	2301      	movs	r3, #1
 80064e2:	e000      	b.n	80064e6 <HAL_TIM_PWM_Start_IT+0x1de>
 80064e4:	2300      	movs	r3, #0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a23      	ldr	r2, [pc, #140]	; (800658c <HAL_TIM_PWM_Start_IT+0x284>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d01d      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x238>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650c:	d018      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x238>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a23      	ldr	r2, [pc, #140]	; (80065a0 <HAL_TIM_PWM_Start_IT+0x298>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d013      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x238>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a21      	ldr	r2, [pc, #132]	; (80065a4 <HAL_TIM_PWM_Start_IT+0x29c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00e      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x238>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a20      	ldr	r2, [pc, #128]	; (80065a8 <HAL_TIM_PWM_Start_IT+0x2a0>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d009      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x238>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a17      	ldr	r2, [pc, #92]	; (8006590 <HAL_TIM_PWM_Start_IT+0x288>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d004      	beq.n	8006540 <HAL_TIM_PWM_Start_IT+0x238>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a16      	ldr	r2, [pc, #88]	; (8006594 <HAL_TIM_PWM_Start_IT+0x28c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d115      	bne.n	800656c <HAL_TIM_PWM_Start_IT+0x264>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	4b19      	ldr	r3, [pc, #100]	; (80065ac <HAL_TIM_PWM_Start_IT+0x2a4>)
 8006548:	4013      	ands	r3, r2
 800654a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2b06      	cmp	r3, #6
 8006550:	d015      	beq.n	800657e <HAL_TIM_PWM_Start_IT+0x276>
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006558:	d011      	beq.n	800657e <HAL_TIM_PWM_Start_IT+0x276>
      {
        __HAL_TIM_ENABLE(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0201 	orr.w	r2, r2, #1
 8006568:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800656a:	e008      	b.n	800657e <HAL_TIM_PWM_Start_IT+0x276>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	e000      	b.n	8006580 <HAL_TIM_PWM_Start_IT+0x278>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	40012c00 	.word	0x40012c00
 8006590:	40013400 	.word	0x40013400
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400
 800659c:	40014800 	.word	0x40014800
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	00010007 	.word	0x00010007

080065b0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ba:	2300      	movs	r3, #0
 80065bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	d841      	bhi.n	8006648 <HAL_TIM_PWM_Stop_IT+0x98>
 80065c4:	a201      	add	r2, pc, #4	; (adr r2, 80065cc <HAL_TIM_PWM_Stop_IT+0x1c>)
 80065c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065ca:	bf00      	nop
 80065cc:	08006601 	.word	0x08006601
 80065d0:	08006649 	.word	0x08006649
 80065d4:	08006649 	.word	0x08006649
 80065d8:	08006649 	.word	0x08006649
 80065dc:	08006613 	.word	0x08006613
 80065e0:	08006649 	.word	0x08006649
 80065e4:	08006649 	.word	0x08006649
 80065e8:	08006649 	.word	0x08006649
 80065ec:	08006625 	.word	0x08006625
 80065f0:	08006649 	.word	0x08006649
 80065f4:	08006649 	.word	0x08006649
 80065f8:	08006649 	.word	0x08006649
 80065fc:	08006637 	.word	0x08006637
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f022 0202 	bic.w	r2, r2, #2
 800660e:	60da      	str	r2, [r3, #12]
      break;
 8006610:	e01d      	b.n	800664e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f022 0204 	bic.w	r2, r2, #4
 8006620:	60da      	str	r2, [r3, #12]
      break;
 8006622:	e014      	b.n	800664e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0208 	bic.w	r2, r2, #8
 8006632:	60da      	str	r2, [r3, #12]
      break;
 8006634:	e00b      	b.n	800664e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f022 0210 	bic.w	r2, r2, #16
 8006644:	60da      	str	r2, [r3, #12]
      break;
 8006646:	e002      	b.n	800664e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]
      break;
 800664c:	bf00      	nop
  }

  if (status == HAL_OK)
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 8081 	bne.w	8006758 <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	6839      	ldr	r1, [r7, #0]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 ffb0 	bl	80075c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a3e      	ldr	r2, [pc, #248]	; (8006764 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_TIM_PWM_Stop_IT+0xe6>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a3d      	ldr	r2, [pc, #244]	; (8006768 <HAL_TIM_PWM_Stop_IT+0x1b8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d00e      	beq.n	8006696 <HAL_TIM_PWM_Stop_IT+0xe6>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a3b      	ldr	r2, [pc, #236]	; (800676c <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_TIM_PWM_Stop_IT+0xe6>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a3a      	ldr	r2, [pc, #232]	; (8006770 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIM_PWM_Stop_IT+0xe6>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a38      	ldr	r2, [pc, #224]	; (8006774 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d101      	bne.n	800669a <HAL_TIM_PWM_Stop_IT+0xea>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <HAL_TIM_PWM_Stop_IT+0xec>
 800669a:	2300      	movs	r3, #0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d017      	beq.n	80066d0 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6a1a      	ldr	r2, [r3, #32]
 80066a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10f      	bne.n	80066d0 <HAL_TIM_PWM_Stop_IT+0x120>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6a1a      	ldr	r2, [r3, #32]
 80066b6:	f240 4344 	movw	r3, #1092	; 0x444
 80066ba:	4013      	ands	r3, r2
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d107      	bne.n	80066d0 <HAL_TIM_PWM_Stop_IT+0x120>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6a1a      	ldr	r2, [r3, #32]
 80066d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80066da:	4013      	ands	r3, r2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10f      	bne.n	8006700 <HAL_TIM_PWM_Stop_IT+0x150>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a1a      	ldr	r2, [r3, #32]
 80066e6:	f240 4344 	movw	r3, #1092	; 0x444
 80066ea:	4013      	ands	r3, r2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d107      	bne.n	8006700 <HAL_TIM_PWM_Stop_IT+0x150>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d104      	bne.n	8006710 <HAL_TIM_PWM_Stop_IT+0x160>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800670e:	e023      	b.n	8006758 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b04      	cmp	r3, #4
 8006714:	d104      	bne.n	8006720 <HAL_TIM_PWM_Stop_IT+0x170>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800671e:	e01b      	b.n	8006758 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2b08      	cmp	r3, #8
 8006724:	d104      	bne.n	8006730 <HAL_TIM_PWM_Stop_IT+0x180>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800672e:	e013      	b.n	8006758 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b0c      	cmp	r3, #12
 8006734:	d104      	bne.n	8006740 <HAL_TIM_PWM_Stop_IT+0x190>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800673e:	e00b      	b.n	8006758 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b10      	cmp	r3, #16
 8006744:	d104      	bne.n	8006750 <HAL_TIM_PWM_Stop_IT+0x1a0>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674e:	e003      	b.n	8006758 <HAL_TIM_PWM_Stop_IT+0x1a8>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8006758:	7bfb      	ldrb	r3, [r7, #15]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40013400 	.word	0x40013400
 800676c:	40014000 	.word	0x40014000
 8006770:	40014400 	.word	0x40014400
 8006774:	40014800 	.word	0x40014800

08006778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b02      	cmp	r3, #2
 800678c:	d122      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b02      	cmp	r3, #2
 800679a:	d11b      	bne.n	80067d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f06f 0202 	mvn.w	r2, #2
 80067a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f003 0303 	and.w	r3, r3, #3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fae3 	bl	8006d86 <HAL_TIM_IC_CaptureCallback>
 80067c0:	e005      	b.n	80067ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 fad5 	bl	8006d72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7fb f8b3 	bl	8001934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d122      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b04      	cmp	r3, #4
 80067ee:	d11b      	bne.n	8006828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f06f 0204 	mvn.w	r2, #4
 80067f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fab9 	bl	8006d86 <HAL_TIM_IC_CaptureCallback>
 8006814:	e005      	b.n	8006822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 faab 	bl	8006d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7fb f889 	bl	8001934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	f003 0308 	and.w	r3, r3, #8
 8006832:	2b08      	cmp	r3, #8
 8006834:	d122      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b08      	cmp	r3, #8
 8006842:	d11b      	bne.n	800687c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f06f 0208 	mvn.w	r2, #8
 800684c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2204      	movs	r2, #4
 8006852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d003      	beq.n	800686a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fa8f 	bl	8006d86 <HAL_TIM_IC_CaptureCallback>
 8006868:	e005      	b.n	8006876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa81 	bl	8006d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f7fb f85f 	bl	8001934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	f003 0310 	and.w	r3, r3, #16
 8006886:	2b10      	cmp	r3, #16
 8006888:	d122      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f003 0310 	and.w	r3, r3, #16
 8006894:	2b10      	cmp	r3, #16
 8006896:	d11b      	bne.n	80068d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0210 	mvn.w	r2, #16
 80068a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2208      	movs	r2, #8
 80068a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d003      	beq.n	80068be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa65 	bl	8006d86 <HAL_TIM_IC_CaptureCallback>
 80068bc:	e005      	b.n	80068ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fa57 	bl	8006d72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7fb f835 	bl	8001934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d10e      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d107      	bne.n	80068fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f06f 0201 	mvn.w	r2, #1
 80068f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7fb f84e 	bl	8001998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b80      	cmp	r3, #128	; 0x80
 8006908:	d10e      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006914:	2b80      	cmp	r3, #128	; 0x80
 8006916:	d107      	bne.n	8006928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 ff06 	bl	8007734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006936:	d10e      	bne.n	8006956 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d107      	bne.n	8006956 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800694e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 fef9 	bl	8007748 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006960:	2b40      	cmp	r3, #64	; 0x40
 8006962:	d10e      	bne.n	8006982 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d107      	bne.n	8006982 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800697a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fa0c 	bl	8006d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	2b20      	cmp	r3, #32
 800698e:	d10e      	bne.n	80069ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f003 0320 	and.w	r3, r3, #32
 800699a:	2b20      	cmp	r3, #32
 800699c:	d107      	bne.n	80069ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f06f 0220 	mvn.w	r2, #32
 80069a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 feb9 	bl	8007720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069c4:	2300      	movs	r3, #0
 80069c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e0ff      	b.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b14      	cmp	r3, #20
 80069e2:	f200 80f0 	bhi.w	8006bc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80069e6:	a201      	add	r2, pc, #4	; (adr r2, 80069ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ec:	08006a41 	.word	0x08006a41
 80069f0:	08006bc7 	.word	0x08006bc7
 80069f4:	08006bc7 	.word	0x08006bc7
 80069f8:	08006bc7 	.word	0x08006bc7
 80069fc:	08006a81 	.word	0x08006a81
 8006a00:	08006bc7 	.word	0x08006bc7
 8006a04:	08006bc7 	.word	0x08006bc7
 8006a08:	08006bc7 	.word	0x08006bc7
 8006a0c:	08006ac3 	.word	0x08006ac3
 8006a10:	08006bc7 	.word	0x08006bc7
 8006a14:	08006bc7 	.word	0x08006bc7
 8006a18:	08006bc7 	.word	0x08006bc7
 8006a1c:	08006b03 	.word	0x08006b03
 8006a20:	08006bc7 	.word	0x08006bc7
 8006a24:	08006bc7 	.word	0x08006bc7
 8006a28:	08006bc7 	.word	0x08006bc7
 8006a2c:	08006b45 	.word	0x08006b45
 8006a30:	08006bc7 	.word	0x08006bc7
 8006a34:	08006bc7 	.word	0x08006bc7
 8006a38:	08006bc7 	.word	0x08006bc7
 8006a3c:	08006b85 	.word	0x08006b85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fa4c 	bl	8006ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0208 	orr.w	r2, r2, #8
 8006a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699a      	ldr	r2, [r3, #24]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f022 0204 	bic.w	r2, r2, #4
 8006a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6999      	ldr	r1, [r3, #24]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691a      	ldr	r2, [r3, #16]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	619a      	str	r2, [r3, #24]
      break;
 8006a7e:	e0a5      	b.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68b9      	ldr	r1, [r7, #8]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 fabc 	bl	8007004 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6999      	ldr	r1, [r3, #24]
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	021a      	lsls	r2, r3, #8
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	430a      	orrs	r2, r1
 8006abe:	619a      	str	r2, [r3, #24]
      break;
 8006ac0:	e084      	b.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68b9      	ldr	r1, [r7, #8]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f000 fb25 	bl	8007118 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0208 	orr.w	r2, r2, #8
 8006adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69da      	ldr	r2, [r3, #28]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0204 	bic.w	r2, r2, #4
 8006aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	69d9      	ldr	r1, [r3, #28]
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	691a      	ldr	r2, [r3, #16]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	61da      	str	r2, [r3, #28]
      break;
 8006b00:	e064      	b.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68b9      	ldr	r1, [r7, #8]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f000 fb8d 	bl	8007228 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69da      	ldr	r2, [r3, #28]
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69d9      	ldr	r1, [r3, #28]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	021a      	lsls	r2, r3, #8
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	61da      	str	r2, [r3, #28]
      break;
 8006b42:	e043      	b.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fbd6 	bl	80072fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0208 	orr.w	r2, r2, #8
 8006b5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0204 	bic.w	r2, r2, #4
 8006b6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	691a      	ldr	r2, [r3, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b82:	e023      	b.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68b9      	ldr	r1, [r7, #8]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fc1a 	bl	80073c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	021a      	lsls	r2, r3, #8
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bc4:	e002      	b.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006bca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop

08006be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_TIM_ConfigClockSource+0x1c>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e0b6      	b.n	8006d6a <HAL_TIM_ConfigClockSource+0x18a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c38:	d03e      	beq.n	8006cb8 <HAL_TIM_ConfigClockSource+0xd8>
 8006c3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c3e:	f200 8087 	bhi.w	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c46:	f000 8086 	beq.w	8006d56 <HAL_TIM_ConfigClockSource+0x176>
 8006c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4e:	d87f      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c50:	2b70      	cmp	r3, #112	; 0x70
 8006c52:	d01a      	beq.n	8006c8a <HAL_TIM_ConfigClockSource+0xaa>
 8006c54:	2b70      	cmp	r3, #112	; 0x70
 8006c56:	d87b      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c58:	2b60      	cmp	r3, #96	; 0x60
 8006c5a:	d050      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x11e>
 8006c5c:	2b60      	cmp	r3, #96	; 0x60
 8006c5e:	d877      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c60:	2b50      	cmp	r3, #80	; 0x50
 8006c62:	d03c      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0xfe>
 8006c64:	2b50      	cmp	r3, #80	; 0x50
 8006c66:	d873      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d058      	beq.n	8006d1e <HAL_TIM_ConfigClockSource+0x13e>
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d86f      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c70:	2b30      	cmp	r3, #48	; 0x30
 8006c72:	d064      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0x15e>
 8006c74:	2b30      	cmp	r3, #48	; 0x30
 8006c76:	d86b      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c78:	2b20      	cmp	r3, #32
 8006c7a:	d060      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0x15e>
 8006c7c:	2b20      	cmp	r3, #32
 8006c7e:	d867      	bhi.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d05c      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0x15e>
 8006c84:	2b10      	cmp	r3, #16
 8006c86:	d05a      	beq.n	8006d3e <HAL_TIM_ConfigClockSource+0x15e>
 8006c88:	e062      	b.n	8006d50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6899      	ldr	r1, [r3, #8]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	68db      	ldr	r3, [r3, #12]
 8006c9a:	f000 fc73 	bl	8007584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68ba      	ldr	r2, [r7, #8]
 8006cb4:	609a      	str	r2, [r3, #8]
      break;
 8006cb6:	e04f      	b.n	8006d58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6818      	ldr	r0, [r3, #0]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	6899      	ldr	r1, [r3, #8]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f000 fc5c 	bl	8007584 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	689a      	ldr	r2, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cda:	609a      	str	r2, [r3, #8]
      break;
 8006cdc:	e03c      	b.n	8006d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	6859      	ldr	r1, [r3, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	461a      	mov	r2, r3
 8006cec:	f000 fbd0 	bl	8007490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2150      	movs	r1, #80	; 0x50
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 fc29 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006cfc:	e02c      	b.n	8006d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	6859      	ldr	r1, [r3, #4]
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f000 fbef 	bl	80074ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2160      	movs	r1, #96	; 0x60
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 fc19 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006d1c:	e01c      	b.n	8006d58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	6859      	ldr	r1, [r3, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f000 fbb0 	bl	8007490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 fc09 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006d3c:	e00c      	b.n	8006d58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f000 fc00 	bl	800754e <TIM_ITRx_SetConfig>
      break;
 8006d4e:	e003      	b.n	8006d58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
      break;
 8006d54:	e000      	b.n	8006d58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr

08006d86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d86:	b480      	push	{r7}
 8006d88:	b083      	sub	sp, #12
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a40      	ldr	r2, [pc, #256]	; (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d013      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dce:	d00f      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a3d      	ldr	r2, [pc, #244]	; (8006ec8 <TIM_Base_SetConfig+0x118>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d00b      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	4a3c      	ldr	r2, [pc, #240]	; (8006ecc <TIM_Base_SetConfig+0x11c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d007      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a3b      	ldr	r2, [pc, #236]	; (8006ed0 <TIM_Base_SetConfig+0x120>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d003      	beq.n	8006df0 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a3a      	ldr	r2, [pc, #232]	; (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d108      	bne.n	8006e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a2f      	ldr	r2, [pc, #188]	; (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d01f      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e10:	d01b      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a2c      	ldr	r2, [pc, #176]	; (8006ec8 <TIM_Base_SetConfig+0x118>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d017      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	4a2b      	ldr	r2, [pc, #172]	; (8006ecc <TIM_Base_SetConfig+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a2a      	ldr	r2, [pc, #168]	; (8006ed0 <TIM_Base_SetConfig+0x120>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d00f      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a29      	ldr	r2, [pc, #164]	; (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d00b      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a28      	ldr	r2, [pc, #160]	; (8006ed8 <TIM_Base_SetConfig+0x128>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d007      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a27      	ldr	r2, [pc, #156]	; (8006edc <TIM_Base_SetConfig+0x12c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d003      	beq.n	8006e4a <TIM_Base_SetConfig+0x9a>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a26      	ldr	r2, [pc, #152]	; (8006ee0 <TIM_Base_SetConfig+0x130>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d108      	bne.n	8006e5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	689a      	ldr	r2, [r3, #8]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a10      	ldr	r2, [pc, #64]	; (8006ec4 <TIM_Base_SetConfig+0x114>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00f      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a12      	ldr	r2, [pc, #72]	; (8006ed4 <TIM_Base_SetConfig+0x124>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d00b      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a11      	ldr	r2, [pc, #68]	; (8006ed8 <TIM_Base_SetConfig+0x128>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d007      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a10      	ldr	r2, [pc, #64]	; (8006edc <TIM_Base_SetConfig+0x12c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d003      	beq.n	8006ea8 <TIM_Base_SetConfig+0xf8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a0f      	ldr	r2, [pc, #60]	; (8006ee0 <TIM_Base_SetConfig+0x130>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d103      	bne.n	8006eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	615a      	str	r2, [r3, #20]
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40000400 	.word	0x40000400
 8006ecc:	40000800 	.word	0x40000800
 8006ed0:	40000c00 	.word	0x40000c00
 8006ed4:	40013400 	.word	0x40013400
 8006ed8:	40014000 	.word	0x40014000
 8006edc:	40014400 	.word	0x40014400
 8006ee0:	40014800 	.word	0x40014800

08006ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a1b      	ldr	r3, [r3, #32]
 8006ef2:	f023 0201 	bic.w	r2, r3, #1
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0303 	bic.w	r3, r3, #3
 8006f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f023 0302 	bic.w	r3, r3, #2
 8006f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a2c      	ldr	r2, [pc, #176]	; (8006ff0 <TIM_OC1_SetConfig+0x10c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d00f      	beq.n	8006f64 <TIM_OC1_SetConfig+0x80>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a2b      	ldr	r2, [pc, #172]	; (8006ff4 <TIM_OC1_SetConfig+0x110>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d00b      	beq.n	8006f64 <TIM_OC1_SetConfig+0x80>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <TIM_OC1_SetConfig+0x114>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_OC1_SetConfig+0x80>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a29      	ldr	r2, [pc, #164]	; (8006ffc <TIM_OC1_SetConfig+0x118>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC1_SetConfig+0x80>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a28      	ldr	r2, [pc, #160]	; (8007000 <TIM_OC1_SetConfig+0x11c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d10c      	bne.n	8006f7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f023 0308 	bic.w	r3, r3, #8
 8006f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f023 0304 	bic.w	r3, r3, #4
 8006f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1b      	ldr	r2, [pc, #108]	; (8006ff0 <TIM_OC1_SetConfig+0x10c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xc2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <TIM_OC1_SetConfig+0x110>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xc2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a19      	ldr	r2, [pc, #100]	; (8006ff8 <TIM_OC1_SetConfig+0x114>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xc2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a18      	ldr	r2, [pc, #96]	; (8006ffc <TIM_OC1_SetConfig+0x118>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC1_SetConfig+0xc2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a17      	ldr	r2, [pc, #92]	; (8007000 <TIM_OC1_SetConfig+0x11c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d111      	bne.n	8006fca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40013400 	.word	0x40013400
 8006ff8:	40014000 	.word	0x40014000
 8006ffc:	40014400 	.word	0x40014400
 8007000:	40014800 	.word	0x40014800

08007004 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	f023 0210 	bic.w	r2, r3, #16
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800703e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0320 	bic.w	r3, r3, #32
 8007052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	4313      	orrs	r3, r2
 800705e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a28      	ldr	r2, [pc, #160]	; (8007104 <TIM_OC2_SetConfig+0x100>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_OC2_SetConfig+0x6c>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a27      	ldr	r2, [pc, #156]	; (8007108 <TIM_OC2_SetConfig+0x104>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d10d      	bne.n	800708c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	011b      	lsls	r3, r3, #4
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	4313      	orrs	r3, r2
 8007082:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800708a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <TIM_OC2_SetConfig+0x100>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00f      	beq.n	80070b4 <TIM_OC2_SetConfig+0xb0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a1c      	ldr	r2, [pc, #112]	; (8007108 <TIM_OC2_SetConfig+0x104>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00b      	beq.n	80070b4 <TIM_OC2_SetConfig+0xb0>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a1b      	ldr	r2, [pc, #108]	; (800710c <TIM_OC2_SetConfig+0x108>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d007      	beq.n	80070b4 <TIM_OC2_SetConfig+0xb0>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a1a      	ldr	r2, [pc, #104]	; (8007110 <TIM_OC2_SetConfig+0x10c>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_OC2_SetConfig+0xb0>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a19      	ldr	r2, [pc, #100]	; (8007114 <TIM_OC2_SetConfig+0x110>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d113      	bne.n	80070dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68fa      	ldr	r2, [r7, #12]
 80070e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	621a      	str	r2, [r3, #32]
}
 80070f6:	bf00      	nop
 80070f8:	371c      	adds	r7, #28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	40012c00 	.word	0x40012c00
 8007108:	40013400 	.word	0x40013400
 800710c:	40014000 	.word	0x40014000
 8007110:	40014400 	.word	0x40014400
 8007114:	40014800 	.word	0x40014800

08007118 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007118:	b480      	push	{r7}
 800711a:	b087      	sub	sp, #28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800714a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0303 	bic.w	r3, r3, #3
 8007152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	021b      	lsls	r3, r3, #8
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4313      	orrs	r3, r2
 8007170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a27      	ldr	r2, [pc, #156]	; (8007214 <TIM_OC3_SetConfig+0xfc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d003      	beq.n	8007182 <TIM_OC3_SetConfig+0x6a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a26      	ldr	r2, [pc, #152]	; (8007218 <TIM_OC3_SetConfig+0x100>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d10d      	bne.n	800719e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	021b      	lsls	r3, r3, #8
 8007190:	697a      	ldr	r2, [r7, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800719c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a1c      	ldr	r2, [pc, #112]	; (8007214 <TIM_OC3_SetConfig+0xfc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d00f      	beq.n	80071c6 <TIM_OC3_SetConfig+0xae>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a1b      	ldr	r2, [pc, #108]	; (8007218 <TIM_OC3_SetConfig+0x100>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00b      	beq.n	80071c6 <TIM_OC3_SetConfig+0xae>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	4a1a      	ldr	r2, [pc, #104]	; (800721c <TIM_OC3_SetConfig+0x104>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d007      	beq.n	80071c6 <TIM_OC3_SetConfig+0xae>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a19      	ldr	r2, [pc, #100]	; (8007220 <TIM_OC3_SetConfig+0x108>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_OC3_SetConfig+0xae>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a18      	ldr	r2, [pc, #96]	; (8007224 <TIM_OC3_SetConfig+0x10c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d113      	bne.n	80071ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	011b      	lsls	r3, r3, #4
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	621a      	str	r2, [r3, #32]
}
 8007208:	bf00      	nop
 800720a:	371c      	adds	r7, #28
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40013400 	.word	0x40013400
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400
 8007224:	40014800 	.word	0x40014800

08007228 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6a1b      	ldr	r3, [r3, #32]
 8007242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69db      	ldr	r3, [r3, #28]
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007256:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800725a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007262:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	021b      	lsls	r3, r3, #8
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	031b      	lsls	r3, r3, #12
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	4a18      	ldr	r2, [pc, #96]	; (80072e8 <TIM_OC4_SetConfig+0xc0>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d00f      	beq.n	80072ac <TIM_OC4_SetConfig+0x84>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a17      	ldr	r2, [pc, #92]	; (80072ec <TIM_OC4_SetConfig+0xc4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00b      	beq.n	80072ac <TIM_OC4_SetConfig+0x84>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a16      	ldr	r2, [pc, #88]	; (80072f0 <TIM_OC4_SetConfig+0xc8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d007      	beq.n	80072ac <TIM_OC4_SetConfig+0x84>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a15      	ldr	r2, [pc, #84]	; (80072f4 <TIM_OC4_SetConfig+0xcc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d003      	beq.n	80072ac <TIM_OC4_SetConfig+0x84>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <TIM_OC4_SetConfig+0xd0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d109      	bne.n	80072c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	019b      	lsls	r3, r3, #6
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	4313      	orrs	r3, r2
 80072be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	685a      	ldr	r2, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	693a      	ldr	r2, [r7, #16]
 80072d8:	621a      	str	r2, [r3, #32]
}
 80072da:	bf00      	nop
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	40013400 	.word	0x40013400
 80072f0:	40014000 	.word	0x40014000
 80072f4:	40014400 	.word	0x40014400
 80072f8:	40014800 	.word	0x40014800

080072fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b087      	sub	sp, #28
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6a1b      	ldr	r3, [r3, #32]
 8007316:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007340:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	041b      	lsls	r3, r3, #16
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4313      	orrs	r3, r2
 800734c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a17      	ldr	r2, [pc, #92]	; (80073b0 <TIM_OC5_SetConfig+0xb4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00f      	beq.n	8007376 <TIM_OC5_SetConfig+0x7a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a16      	ldr	r2, [pc, #88]	; (80073b4 <TIM_OC5_SetConfig+0xb8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d00b      	beq.n	8007376 <TIM_OC5_SetConfig+0x7a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a15      	ldr	r2, [pc, #84]	; (80073b8 <TIM_OC5_SetConfig+0xbc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d007      	beq.n	8007376 <TIM_OC5_SetConfig+0x7a>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a14      	ldr	r2, [pc, #80]	; (80073bc <TIM_OC5_SetConfig+0xc0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d003      	beq.n	8007376 <TIM_OC5_SetConfig+0x7a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a13      	ldr	r2, [pc, #76]	; (80073c0 <TIM_OC5_SetConfig+0xc4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d109      	bne.n	800738a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	021b      	lsls	r3, r3, #8
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	621a      	str	r2, [r3, #32]
}
 80073a4:	bf00      	nop
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	40012c00 	.word	0x40012c00
 80073b4:	40013400 	.word	0x40013400
 80073b8:	40014000 	.word	0x40014000
 80073bc:	40014400 	.word	0x40014400
 80073c0:	40014800 	.word	0x40014800

080073c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800740a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	051b      	lsls	r3, r3, #20
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	4313      	orrs	r3, r2
 8007416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4a18      	ldr	r2, [pc, #96]	; (800747c <TIM_OC6_SetConfig+0xb8>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d00f      	beq.n	8007440 <TIM_OC6_SetConfig+0x7c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a17      	ldr	r2, [pc, #92]	; (8007480 <TIM_OC6_SetConfig+0xbc>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00b      	beq.n	8007440 <TIM_OC6_SetConfig+0x7c>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a16      	ldr	r2, [pc, #88]	; (8007484 <TIM_OC6_SetConfig+0xc0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d007      	beq.n	8007440 <TIM_OC6_SetConfig+0x7c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a15      	ldr	r2, [pc, #84]	; (8007488 <TIM_OC6_SetConfig+0xc4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <TIM_OC6_SetConfig+0x7c>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a14      	ldr	r2, [pc, #80]	; (800748c <TIM_OC6_SetConfig+0xc8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d109      	bne.n	8007454 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007446:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	029b      	lsls	r3, r3, #10
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40013400 	.word	0x40013400
 8007484:	40014000 	.word	0x40014000
 8007488:	40014400 	.word	0x40014400
 800748c:	40014800 	.word	0x40014800

08007490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f023 0201 	bic.w	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f023 030a 	bic.w	r3, r3, #10
 80074cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	621a      	str	r2, [r3, #32]
}
 80074e2:	bf00      	nop
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b087      	sub	sp, #28
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f023 0210 	bic.w	r2, r3, #16
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	031b      	lsls	r3, r3, #12
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800752a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	697a      	ldr	r2, [r7, #20]
 800753a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800754e:	b480      	push	{r7}
 8007550:	b085      	sub	sp, #20
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007564:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4313      	orrs	r3, r2
 800756c:	f043 0307 	orr.w	r3, r3, #7
 8007570:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	609a      	str	r2, [r3, #8]
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800759e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	431a      	orrs	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	609a      	str	r2, [r3, #8]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	2201      	movs	r2, #1
 80075d8:	fa02 f303 	lsl.w	r3, r2, r3
 80075dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1a      	ldr	r2, [r3, #32]
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	43db      	mvns	r3, r3
 80075e6:	401a      	ands	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1a      	ldr	r2, [r3, #32]
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	6879      	ldr	r1, [r7, #4]
 80075f8:	fa01 f303 	lsl.w	r3, r1, r3
 80075fc:	431a      	orrs	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	621a      	str	r2, [r3, #32]
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
	...

08007610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007620:	2b01      	cmp	r3, #1
 8007622:	d101      	bne.n	8007628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007624:	2302      	movs	r3, #2
 8007626:	e068      	b.n	80076fa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2201      	movs	r2, #1
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2202      	movs	r2, #2
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a2e      	ldr	r2, [pc, #184]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d004      	beq.n	800765c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a2d      	ldr	r2, [pc, #180]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d108      	bne.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007662:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4313      	orrs	r3, r2
 800766c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007674:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a1e      	ldr	r2, [pc, #120]	; (8007708 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d01d      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800769a:	d018      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a1b      	ldr	r2, [pc, #108]	; (8007710 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d013      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1a      	ldr	r2, [pc, #104]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00e      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a18      	ldr	r2, [pc, #96]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d009      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a13      	ldr	r2, [pc, #76]	; (800770c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d004      	beq.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a14      	ldr	r2, [pc, #80]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d10c      	bne.n	80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4313      	orrs	r3, r2
 80076de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40012c00 	.word	0x40012c00
 800770c:	40013400 	.word	0x40013400
 8007710:	40000400 	.word	0x40000400
 8007714:	40000800 	.word	0x40000800
 8007718:	40000c00 	.word	0x40000c00
 800771c:	40014000 	.word	0x40014000

08007720 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e040      	b.n	80077f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007772:	2b00      	cmp	r3, #0
 8007774:	d106      	bne.n	8007784 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f7fa fb46 	bl	8001e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2224      	movs	r2, #36	; 0x24
 8007788:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f022 0201 	bic.w	r2, r2, #1
 8007798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc94 	bl	80080c8 <UART_SetConfig>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d101      	bne.n	80077aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e022      	b.n	80077f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 ff40 	bl	8008638 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685a      	ldr	r2, [r3, #4]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	689a      	ldr	r2, [r3, #8]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f042 0201 	orr.w	r2, r2, #1
 80077e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 ffc7 	bl	800877c <UART_CheckIdleState>
 80077ee:	4603      	mov	r3, r0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	; 0x28
 80077fc:	af02      	add	r7, sp, #8
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	603b      	str	r3, [r7, #0]
 8007804:	4613      	mov	r3, r2
 8007806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800780c:	2b20      	cmp	r3, #32
 800780e:	f040 8082 	bne.w	8007916 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <HAL_UART_Transmit+0x26>
 8007818:	88fb      	ldrh	r3, [r7, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e07a      	b.n	8007918 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_UART_Transmit+0x38>
 800782c:	2302      	movs	r3, #2
 800782e:	e073      	b.n	8007918 <HAL_UART_Transmit+0x120>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2221      	movs	r2, #33	; 0x21
 8007844:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007846:	f7fa fced 	bl	8002224 <HAL_GetTick>
 800784a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	88fa      	ldrh	r2, [r7, #6]
 8007850:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007864:	d108      	bne.n	8007878 <HAL_UART_Transmit+0x80>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	e003      	b.n	8007880 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007888:	e02d      	b.n	80078e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	2200      	movs	r2, #0
 8007892:	2180      	movs	r1, #128	; 0x80
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f000 ffba 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e039      	b.n	8007918 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	881a      	ldrh	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b6:	b292      	uxth	r2, r2
 80078b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	3302      	adds	r3, #2
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	e008      	b.n	80078d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	b292      	uxth	r2, r2
 80078cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	3301      	adds	r3, #1
 80078d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1cb      	bne.n	800788a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2200      	movs	r2, #0
 80078fa:	2140      	movs	r1, #64	; 0x40
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 ff86 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e005      	b.n	8007918 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007912:	2300      	movs	r3, #0
 8007914:	e000      	b.n	8007918 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007916:	2302      	movs	r3, #2
  }
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b08a      	sub	sp, #40	; 0x28
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	603b      	str	r3, [r7, #0]
 800792c:	4613      	mov	r3, r2
 800792e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007934:	2b20      	cmp	r3, #32
 8007936:	f040 80bf 	bne.w	8007ab8 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d002      	beq.n	8007946 <HAL_UART_Receive+0x26>
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e0b7      	b.n	8007aba <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_UART_Receive+0x38>
 8007954:	2302      	movs	r3, #2
 8007956:	e0b0      	b.n	8007aba <HAL_UART_Receive+0x19a>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2222      	movs	r2, #34	; 0x22
 800796c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007974:	f7fa fc56 	bl	8002224 <HAL_GetTick>
 8007978:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	88fa      	ldrh	r2, [r7, #6]
 800797e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	88fa      	ldrh	r2, [r7, #6]
 8007986:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007992:	d10e      	bne.n	80079b2 <HAL_UART_Receive+0x92>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <HAL_UART_Receive+0x88>
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80079a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079a6:	e02d      	b.n	8007a04 <HAL_UART_Receive+0xe4>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	22ff      	movs	r2, #255	; 0xff
 80079ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079b0:	e028      	b.n	8007a04 <HAL_UART_Receive+0xe4>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10d      	bne.n	80079d6 <HAL_UART_Receive+0xb6>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <HAL_UART_Receive+0xac>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	22ff      	movs	r2, #255	; 0xff
 80079c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079ca:	e01b      	b.n	8007a04 <HAL_UART_Receive+0xe4>
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	227f      	movs	r2, #127	; 0x7f
 80079d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079d4:	e016      	b.n	8007a04 <HAL_UART_Receive+0xe4>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079de:	d10d      	bne.n	80079fc <HAL_UART_Receive+0xdc>
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d104      	bne.n	80079f2 <HAL_UART_Receive+0xd2>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	227f      	movs	r2, #127	; 0x7f
 80079ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079f0:	e008      	b.n	8007a04 <HAL_UART_Receive+0xe4>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	223f      	movs	r2, #63	; 0x3f
 80079f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80079fa:	e003      	b.n	8007a04 <HAL_UART_Receive+0xe4>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a0a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a14:	d108      	bne.n	8007a28 <HAL_UART_Receive+0x108>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e003      	b.n	8007a30 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007a38:	e033      	b.n	8007aa2 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	2200      	movs	r2, #0
 8007a42:	2120      	movs	r1, #32
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 fee2 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e032      	b.n	8007aba <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10c      	bne.n	8007a74 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	8a7b      	ldrh	r3, [r7, #18]
 8007a64:	4013      	ands	r3, r2
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	3302      	adds	r3, #2
 8007a70:	61bb      	str	r3, [r7, #24]
 8007a72:	e00d      	b.n	8007a90 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	b2da      	uxtb	r2, r3
 8007a7e:	8a7b      	ldrh	r3, [r7, #18]
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	4013      	ands	r3, r2
 8007a84:	b2da      	uxtb	r2, r3
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	b29a      	uxth	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1c5      	bne.n	8007a3a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2220      	movs	r2, #32
 8007ab2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e000      	b.n	8007aba <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007ab8:	2302      	movs	r3, #2
  }
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3720      	adds	r7, #32
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
	...

08007ac4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b0ba      	sub	sp, #232	; 0xe8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007aea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007aee:	f640 030f 	movw	r3, #2063	; 0x80f
 8007af2:	4013      	ands	r3, r2
 8007af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d115      	bne.n	8007b2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b04:	f003 0320 	and.w	r3, r3, #32
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00f      	beq.n	8007b2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 82a6 	beq.w	800806e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
      }
      return;
 8007b2a:	e2a0      	b.n	800806e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007b2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	f000 8117 	beq.w	8007d64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b3a:	f003 0301 	and.w	r3, r3, #1
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b46:	4b85      	ldr	r3, [pc, #532]	; (8007d5c <HAL_UART_IRQHandler+0x298>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 810a 	beq.w	8007d64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d011      	beq.n	8007b80 <HAL_UART_IRQHandler+0xbc>
 8007b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b76:	f043 0201 	orr.w	r2, r3, #1
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d011      	beq.n	8007bb0 <HAL_UART_IRQHandler+0xec>
 8007b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d00b      	beq.n	8007bb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2202      	movs	r2, #2
 8007b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ba6:	f043 0204 	orr.w	r2, r3, #4
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d011      	beq.n	8007be0 <HAL_UART_IRQHandler+0x11c>
 8007bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc0:	f003 0301 	and.w	r3, r3, #1
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2204      	movs	r2, #4
 8007bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bd6:	f043 0202 	orr.w	r2, r3, #2
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be4:	f003 0308 	and.w	r3, r3, #8
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d017      	beq.n	8007c1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d105      	bne.n	8007c04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2208      	movs	r2, #8
 8007c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c12:	f043 0208 	orr.w	r2, r3, #8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d012      	beq.n	8007c4e <HAL_UART_IRQHandler+0x18a>
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d00c      	beq.n	8007c4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 820c 	beq.w	8008072 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d00d      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d007      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d003      	beq.n	8007c82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	689b      	ldr	r3, [r3, #8]
 8007c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c96:	2b40      	cmp	r3, #64	; 0x40
 8007c98:	d005      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d04f      	beq.n	8007d46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fe75 	bl	8008996 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb6:	2b40      	cmp	r3, #64	; 0x40
 8007cb8:	d141      	bne.n	8007d3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cc8:	e853 3f00 	ldrex	r3, [r3]
 8007ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ce6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1d9      	bne.n	8007cba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d013      	beq.n	8007d36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d12:	4a13      	ldr	r2, [pc, #76]	; (8007d60 <HAL_UART_IRQHandler+0x29c>)
 8007d14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7fc f82b 	bl	8003d76 <HAL_DMA_Abort_IT>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d017      	beq.n	8007d56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007d30:	4610      	mov	r0, r2
 8007d32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d34:	e00f      	b.n	8007d56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f9b0 	bl	800809c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d3c:	e00b      	b.n	8007d56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f9ac 	bl	800809c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d44:	e007      	b.n	8007d56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f9a8 	bl	800809c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007d54:	e18d      	b.n	8008072 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d56:	bf00      	nop
    return;
 8007d58:	e18b      	b.n	8008072 <HAL_UART_IRQHandler+0x5ae>
 8007d5a:	bf00      	nop
 8007d5c:	04000120 	.word	0x04000120
 8007d60:	08008a5d 	.word	0x08008a5d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	f040 8146 	bne.w	8007ffa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d72:	f003 0310 	and.w	r3, r3, #16
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 813f 	beq.w	8007ffa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d80:	f003 0310 	and.w	r3, r3, #16
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 8138 	beq.w	8007ffa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2210      	movs	r2, #16
 8007d90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b40      	cmp	r3, #64	; 0x40
 8007d9e:	f040 80b4 	bne.w	8007f0a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 815f 	beq.w	8008076 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	f080 8157 	bcs.w	8008076 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 0320 	and.w	r3, r3, #32
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f040 8085 	bne.w	8007eee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1da      	bne.n	8007de4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3308      	adds	r3, #8
 8007e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e5e:	e841 2300 	strex	r3, r2, [r1]
 8007e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1e1      	bne.n	8007e2e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	3308      	adds	r3, #8
 8007e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e74:	e853 3f00 	ldrex	r3, [r3]
 8007e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	3308      	adds	r3, #8
 8007e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e3      	bne.n	8007e6a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2220      	movs	r2, #32
 8007ea6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ebe:	f023 0310 	bic.w	r3, r3, #16
 8007ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ed2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ed8:	e841 2300 	strex	r3, r2, [r1]
 8007edc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1e4      	bne.n	8007eae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fb ff06 	bl	8003cfa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	4619      	mov	r1, r3
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f8d4 	bl	80080b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f08:	e0b5      	b.n	8008076 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	1ad3      	subs	r3, r2, r3
 8007f1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 80a7 	beq.w	800807a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	f000 80a2 	beq.w	800807a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3e:	e853 3f00 	ldrex	r3, [r3]
 8007f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f58:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f60:	e841 2300 	strex	r3, r2, [r1]
 8007f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1e4      	bne.n	8007f36 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3308      	adds	r3, #8
 8007f72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	e853 3f00 	ldrex	r3, [r3]
 8007f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	f023 0301 	bic.w	r3, r3, #1
 8007f82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3308      	adds	r3, #8
 8007f8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f90:	633a      	str	r2, [r7, #48]	; 0x30
 8007f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e3      	bne.n	8007f6c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	e853 3f00 	ldrex	r3, [r3]
 8007fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 0310 	bic.w	r3, r3, #16
 8007fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007fd8:	61fb      	str	r3, [r7, #28]
 8007fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	69b9      	ldr	r1, [r7, #24]
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e4      	bne.n	8007fb6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f85c 	bl	80080b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ff8:	e03f      	b.n	800807a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00e      	beq.n	8008024 <HAL_UART_IRQHandler+0x560>
 8008006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800800a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d008      	beq.n	8008024 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800801a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fd5d 	bl	8008adc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008022:	e02d      	b.n	8008080 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802c:	2b00      	cmp	r3, #0
 800802e:	d00e      	beq.n	800804e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008038:	2b00      	cmp	r3, #0
 800803a:	d008      	beq.n	800804e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008040:	2b00      	cmp	r3, #0
 8008042:	d01c      	beq.n	800807e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	4798      	blx	r3
    }
    return;
 800804c:	e017      	b.n	800807e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800804e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008056:	2b00      	cmp	r3, #0
 8008058:	d012      	beq.n	8008080 <HAL_UART_IRQHandler+0x5bc>
 800805a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00c      	beq.n	8008080 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fd0e 	bl	8008a88 <UART_EndTransmit_IT>
    return;
 800806c:	e008      	b.n	8008080 <HAL_UART_IRQHandler+0x5bc>
      return;
 800806e:	bf00      	nop
 8008070:	e006      	b.n	8008080 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008072:	bf00      	nop
 8008074:	e004      	b.n	8008080 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008076:	bf00      	nop
 8008078:	e002      	b.n	8008080 <HAL_UART_IRQHandler+0x5bc>
      return;
 800807a:	bf00      	nop
 800807c:	e000      	b.n	8008080 <HAL_UART_IRQHandler+0x5bc>
    return;
 800807e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008080:	37e8      	adds	r7, #232	; 0xe8
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop

08008088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008088:	b480      	push	{r7}
 800808a:	b083      	sub	sp, #12
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080cc:	b08a      	sub	sp, #40	; 0x28
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	689a      	ldr	r2, [r3, #8]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	431a      	orrs	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	695b      	ldr	r3, [r3, #20]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	69db      	ldr	r3, [r3, #28]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	4ba4      	ldr	r3, [pc, #656]	; (8008388 <UART_SetConfig+0x2c0>)
 80080f8:	4013      	ands	r3, r2
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	6812      	ldr	r2, [r2, #0]
 80080fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008100:	430b      	orrs	r3, r1
 8008102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	430a      	orrs	r2, r1
 8008118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	699b      	ldr	r3, [r3, #24]
 800811e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a99      	ldr	r2, [pc, #612]	; (800838c <UART_SetConfig+0x2c4>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d004      	beq.n	8008134 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008130:	4313      	orrs	r3, r2
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008144:	430a      	orrs	r2, r1
 8008146:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a90      	ldr	r2, [pc, #576]	; (8008390 <UART_SetConfig+0x2c8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d126      	bne.n	80081a0 <UART_SetConfig+0xd8>
 8008152:	4b90      	ldr	r3, [pc, #576]	; (8008394 <UART_SetConfig+0x2cc>)
 8008154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008158:	f003 0303 	and.w	r3, r3, #3
 800815c:	2b03      	cmp	r3, #3
 800815e:	d81b      	bhi.n	8008198 <UART_SetConfig+0xd0>
 8008160:	a201      	add	r2, pc, #4	; (adr r2, 8008168 <UART_SetConfig+0xa0>)
 8008162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008166:	bf00      	nop
 8008168:	08008179 	.word	0x08008179
 800816c:	08008189 	.word	0x08008189
 8008170:	08008181 	.word	0x08008181
 8008174:	08008191 	.word	0x08008191
 8008178:	2301      	movs	r3, #1
 800817a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800817e:	e116      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008180:	2302      	movs	r3, #2
 8008182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008186:	e112      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008188:	2304      	movs	r3, #4
 800818a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818e:	e10e      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008190:	2308      	movs	r3, #8
 8008192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008196:	e10a      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008198:	2310      	movs	r3, #16
 800819a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819e:	e106      	b.n	80083ae <UART_SetConfig+0x2e6>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a7c      	ldr	r2, [pc, #496]	; (8008398 <UART_SetConfig+0x2d0>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d138      	bne.n	800821c <UART_SetConfig+0x154>
 80081aa:	4b7a      	ldr	r3, [pc, #488]	; (8008394 <UART_SetConfig+0x2cc>)
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	f003 030c 	and.w	r3, r3, #12
 80081b4:	2b0c      	cmp	r3, #12
 80081b6:	d82d      	bhi.n	8008214 <UART_SetConfig+0x14c>
 80081b8:	a201      	add	r2, pc, #4	; (adr r2, 80081c0 <UART_SetConfig+0xf8>)
 80081ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081be:	bf00      	nop
 80081c0:	080081f5 	.word	0x080081f5
 80081c4:	08008215 	.word	0x08008215
 80081c8:	08008215 	.word	0x08008215
 80081cc:	08008215 	.word	0x08008215
 80081d0:	08008205 	.word	0x08008205
 80081d4:	08008215 	.word	0x08008215
 80081d8:	08008215 	.word	0x08008215
 80081dc:	08008215 	.word	0x08008215
 80081e0:	080081fd 	.word	0x080081fd
 80081e4:	08008215 	.word	0x08008215
 80081e8:	08008215 	.word	0x08008215
 80081ec:	08008215 	.word	0x08008215
 80081f0:	0800820d 	.word	0x0800820d
 80081f4:	2300      	movs	r3, #0
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fa:	e0d8      	b.n	80083ae <UART_SetConfig+0x2e6>
 80081fc:	2302      	movs	r3, #2
 80081fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008202:	e0d4      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008204:	2304      	movs	r3, #4
 8008206:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800820a:	e0d0      	b.n	80083ae <UART_SetConfig+0x2e6>
 800820c:	2308      	movs	r3, #8
 800820e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008212:	e0cc      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008214:	2310      	movs	r3, #16
 8008216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800821a:	e0c8      	b.n	80083ae <UART_SetConfig+0x2e6>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a5e      	ldr	r2, [pc, #376]	; (800839c <UART_SetConfig+0x2d4>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d125      	bne.n	8008272 <UART_SetConfig+0x1aa>
 8008226:	4b5b      	ldr	r3, [pc, #364]	; (8008394 <UART_SetConfig+0x2cc>)
 8008228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800822c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008230:	2b30      	cmp	r3, #48	; 0x30
 8008232:	d016      	beq.n	8008262 <UART_SetConfig+0x19a>
 8008234:	2b30      	cmp	r3, #48	; 0x30
 8008236:	d818      	bhi.n	800826a <UART_SetConfig+0x1a2>
 8008238:	2b20      	cmp	r3, #32
 800823a:	d00a      	beq.n	8008252 <UART_SetConfig+0x18a>
 800823c:	2b20      	cmp	r3, #32
 800823e:	d814      	bhi.n	800826a <UART_SetConfig+0x1a2>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <UART_SetConfig+0x182>
 8008244:	2b10      	cmp	r3, #16
 8008246:	d008      	beq.n	800825a <UART_SetConfig+0x192>
 8008248:	e00f      	b.n	800826a <UART_SetConfig+0x1a2>
 800824a:	2300      	movs	r3, #0
 800824c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008250:	e0ad      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008252:	2302      	movs	r3, #2
 8008254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008258:	e0a9      	b.n	80083ae <UART_SetConfig+0x2e6>
 800825a:	2304      	movs	r3, #4
 800825c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008260:	e0a5      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008262:	2308      	movs	r3, #8
 8008264:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008268:	e0a1      	b.n	80083ae <UART_SetConfig+0x2e6>
 800826a:	2310      	movs	r3, #16
 800826c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008270:	e09d      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a4a      	ldr	r2, [pc, #296]	; (80083a0 <UART_SetConfig+0x2d8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d125      	bne.n	80082c8 <UART_SetConfig+0x200>
 800827c:	4b45      	ldr	r3, [pc, #276]	; (8008394 <UART_SetConfig+0x2cc>)
 800827e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008282:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008286:	2bc0      	cmp	r3, #192	; 0xc0
 8008288:	d016      	beq.n	80082b8 <UART_SetConfig+0x1f0>
 800828a:	2bc0      	cmp	r3, #192	; 0xc0
 800828c:	d818      	bhi.n	80082c0 <UART_SetConfig+0x1f8>
 800828e:	2b80      	cmp	r3, #128	; 0x80
 8008290:	d00a      	beq.n	80082a8 <UART_SetConfig+0x1e0>
 8008292:	2b80      	cmp	r3, #128	; 0x80
 8008294:	d814      	bhi.n	80082c0 <UART_SetConfig+0x1f8>
 8008296:	2b00      	cmp	r3, #0
 8008298:	d002      	beq.n	80082a0 <UART_SetConfig+0x1d8>
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d008      	beq.n	80082b0 <UART_SetConfig+0x1e8>
 800829e:	e00f      	b.n	80082c0 <UART_SetConfig+0x1f8>
 80082a0:	2300      	movs	r3, #0
 80082a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082a6:	e082      	b.n	80083ae <UART_SetConfig+0x2e6>
 80082a8:	2302      	movs	r3, #2
 80082aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082ae:	e07e      	b.n	80083ae <UART_SetConfig+0x2e6>
 80082b0:	2304      	movs	r3, #4
 80082b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082b6:	e07a      	b.n	80083ae <UART_SetConfig+0x2e6>
 80082b8:	2308      	movs	r3, #8
 80082ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082be:	e076      	b.n	80083ae <UART_SetConfig+0x2e6>
 80082c0:	2310      	movs	r3, #16
 80082c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c6:	e072      	b.n	80083ae <UART_SetConfig+0x2e6>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a35      	ldr	r2, [pc, #212]	; (80083a4 <UART_SetConfig+0x2dc>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d12a      	bne.n	8008328 <UART_SetConfig+0x260>
 80082d2:	4b30      	ldr	r3, [pc, #192]	; (8008394 <UART_SetConfig+0x2cc>)
 80082d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e0:	d01a      	beq.n	8008318 <UART_SetConfig+0x250>
 80082e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082e6:	d81b      	bhi.n	8008320 <UART_SetConfig+0x258>
 80082e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082ec:	d00c      	beq.n	8008308 <UART_SetConfig+0x240>
 80082ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f2:	d815      	bhi.n	8008320 <UART_SetConfig+0x258>
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <UART_SetConfig+0x238>
 80082f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082fc:	d008      	beq.n	8008310 <UART_SetConfig+0x248>
 80082fe:	e00f      	b.n	8008320 <UART_SetConfig+0x258>
 8008300:	2300      	movs	r3, #0
 8008302:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008306:	e052      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008308:	2302      	movs	r3, #2
 800830a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800830e:	e04e      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008310:	2304      	movs	r3, #4
 8008312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008316:	e04a      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008318:	2308      	movs	r3, #8
 800831a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800831e:	e046      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008320:	2310      	movs	r3, #16
 8008322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008326:	e042      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a17      	ldr	r2, [pc, #92]	; (800838c <UART_SetConfig+0x2c4>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d13a      	bne.n	80083a8 <UART_SetConfig+0x2e0>
 8008332:	4b18      	ldr	r3, [pc, #96]	; (8008394 <UART_SetConfig+0x2cc>)
 8008334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008338:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800833c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008340:	d01a      	beq.n	8008378 <UART_SetConfig+0x2b0>
 8008342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008346:	d81b      	bhi.n	8008380 <UART_SetConfig+0x2b8>
 8008348:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800834c:	d00c      	beq.n	8008368 <UART_SetConfig+0x2a0>
 800834e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008352:	d815      	bhi.n	8008380 <UART_SetConfig+0x2b8>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <UART_SetConfig+0x298>
 8008358:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800835c:	d008      	beq.n	8008370 <UART_SetConfig+0x2a8>
 800835e:	e00f      	b.n	8008380 <UART_SetConfig+0x2b8>
 8008360:	2300      	movs	r3, #0
 8008362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008366:	e022      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008368:	2302      	movs	r3, #2
 800836a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800836e:	e01e      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008370:	2304      	movs	r3, #4
 8008372:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008376:	e01a      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008378:	2308      	movs	r3, #8
 800837a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800837e:	e016      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008380:	2310      	movs	r3, #16
 8008382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008386:	e012      	b.n	80083ae <UART_SetConfig+0x2e6>
 8008388:	efff69f3 	.word	0xefff69f3
 800838c:	40008000 	.word	0x40008000
 8008390:	40013800 	.word	0x40013800
 8008394:	40021000 	.word	0x40021000
 8008398:	40004400 	.word	0x40004400
 800839c:	40004800 	.word	0x40004800
 80083a0:	40004c00 	.word	0x40004c00
 80083a4:	40005000 	.word	0x40005000
 80083a8:	2310      	movs	r3, #16
 80083aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a9f      	ldr	r2, [pc, #636]	; (8008630 <UART_SetConfig+0x568>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d17a      	bne.n	80084ae <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d824      	bhi.n	800840a <UART_SetConfig+0x342>
 80083c0:	a201      	add	r2, pc, #4	; (adr r2, 80083c8 <UART_SetConfig+0x300>)
 80083c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c6:	bf00      	nop
 80083c8:	080083ed 	.word	0x080083ed
 80083cc:	0800840b 	.word	0x0800840b
 80083d0:	080083f5 	.word	0x080083f5
 80083d4:	0800840b 	.word	0x0800840b
 80083d8:	080083fb 	.word	0x080083fb
 80083dc:	0800840b 	.word	0x0800840b
 80083e0:	0800840b 	.word	0x0800840b
 80083e4:	0800840b 	.word	0x0800840b
 80083e8:	08008403 	.word	0x08008403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083ec:	f7fc fef8 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 80083f0:	61f8      	str	r0, [r7, #28]
        break;
 80083f2:	e010      	b.n	8008416 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f4:	4b8f      	ldr	r3, [pc, #572]	; (8008634 <UART_SetConfig+0x56c>)
 80083f6:	61fb      	str	r3, [r7, #28]
        break;
 80083f8:	e00d      	b.n	8008416 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fa:	f7fc fe59 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 80083fe:	61f8      	str	r0, [r7, #28]
        break;
 8008400:	e009      	b.n	8008416 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008406:	61fb      	str	r3, [r7, #28]
        break;
 8008408:	e005      	b.n	8008416 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800840a:	2300      	movs	r3, #0
 800840c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008414:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80fb 	beq.w	8008614 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	685a      	ldr	r2, [r3, #4]
 8008422:	4613      	mov	r3, r2
 8008424:	005b      	lsls	r3, r3, #1
 8008426:	4413      	add	r3, r2
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	429a      	cmp	r2, r3
 800842c:	d305      	bcc.n	800843a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008434:	69fa      	ldr	r2, [r7, #28]
 8008436:	429a      	cmp	r2, r3
 8008438:	d903      	bls.n	8008442 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008440:	e0e8      	b.n	8008614 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	2200      	movs	r2, #0
 8008446:	461c      	mov	r4, r3
 8008448:	4615      	mov	r5, r2
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	022b      	lsls	r3, r5, #8
 8008454:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008458:	0222      	lsls	r2, r4, #8
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	6849      	ldr	r1, [r1, #4]
 800845e:	0849      	lsrs	r1, r1, #1
 8008460:	2000      	movs	r0, #0
 8008462:	4688      	mov	r8, r1
 8008464:	4681      	mov	r9, r0
 8008466:	eb12 0a08 	adds.w	sl, r2, r8
 800846a:	eb43 0b09 	adc.w	fp, r3, r9
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	603b      	str	r3, [r7, #0]
 8008476:	607a      	str	r2, [r7, #4]
 8008478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800847c:	4650      	mov	r0, sl
 800847e:	4659      	mov	r1, fp
 8008480:	f7f7 ff0e 	bl	80002a0 <__aeabi_uldivmod>
 8008484:	4602      	mov	r2, r0
 8008486:	460b      	mov	r3, r1
 8008488:	4613      	mov	r3, r2
 800848a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800848c:	69bb      	ldr	r3, [r7, #24]
 800848e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008492:	d308      	bcc.n	80084a6 <UART_SetConfig+0x3de>
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800849a:	d204      	bcs.n	80084a6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	60da      	str	r2, [r3, #12]
 80084a4:	e0b6      	b.n	8008614 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80084ac:	e0b2      	b.n	8008614 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b6:	d15e      	bne.n	8008576 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80084b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084bc:	2b08      	cmp	r3, #8
 80084be:	d828      	bhi.n	8008512 <UART_SetConfig+0x44a>
 80084c0:	a201      	add	r2, pc, #4	; (adr r2, 80084c8 <UART_SetConfig+0x400>)
 80084c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c6:	bf00      	nop
 80084c8:	080084ed 	.word	0x080084ed
 80084cc:	080084f5 	.word	0x080084f5
 80084d0:	080084fd 	.word	0x080084fd
 80084d4:	08008513 	.word	0x08008513
 80084d8:	08008503 	.word	0x08008503
 80084dc:	08008513 	.word	0x08008513
 80084e0:	08008513 	.word	0x08008513
 80084e4:	08008513 	.word	0x08008513
 80084e8:	0800850b 	.word	0x0800850b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084ec:	f7fc fe78 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 80084f0:	61f8      	str	r0, [r7, #28]
        break;
 80084f2:	e014      	b.n	800851e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084f4:	f7fc fe8a 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 80084f8:	61f8      	str	r0, [r7, #28]
        break;
 80084fa:	e010      	b.n	800851e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084fc:	4b4d      	ldr	r3, [pc, #308]	; (8008634 <UART_SetConfig+0x56c>)
 80084fe:	61fb      	str	r3, [r7, #28]
        break;
 8008500:	e00d      	b.n	800851e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008502:	f7fc fdd5 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 8008506:	61f8      	str	r0, [r7, #28]
        break;
 8008508:	e009      	b.n	800851e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800850a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800850e:	61fb      	str	r3, [r7, #28]
        break;
 8008510:	e005      	b.n	800851e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008512:	2300      	movs	r3, #0
 8008514:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800851c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d077      	beq.n	8008614 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	005a      	lsls	r2, r3, #1
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	085b      	lsrs	r3, r3, #1
 800852e:	441a      	add	r2, r3
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	fbb2 f3f3 	udiv	r3, r2, r3
 8008538:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	2b0f      	cmp	r3, #15
 800853e:	d916      	bls.n	800856e <UART_SetConfig+0x4a6>
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008546:	d212      	bcs.n	800856e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	b29b      	uxth	r3, r3
 800854c:	f023 030f 	bic.w	r3, r3, #15
 8008550:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	085b      	lsrs	r3, r3, #1
 8008556:	b29b      	uxth	r3, r3
 8008558:	f003 0307 	and.w	r3, r3, #7
 800855c:	b29a      	uxth	r2, r3
 800855e:	8afb      	ldrh	r3, [r7, #22]
 8008560:	4313      	orrs	r3, r2
 8008562:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	8afa      	ldrh	r2, [r7, #22]
 800856a:	60da      	str	r2, [r3, #12]
 800856c:	e052      	b.n	8008614 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008574:	e04e      	b.n	8008614 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008576:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800857a:	2b08      	cmp	r3, #8
 800857c:	d827      	bhi.n	80085ce <UART_SetConfig+0x506>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <UART_SetConfig+0x4bc>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	080085a9 	.word	0x080085a9
 8008588:	080085b1 	.word	0x080085b1
 800858c:	080085b9 	.word	0x080085b9
 8008590:	080085cf 	.word	0x080085cf
 8008594:	080085bf 	.word	0x080085bf
 8008598:	080085cf 	.word	0x080085cf
 800859c:	080085cf 	.word	0x080085cf
 80085a0:	080085cf 	.word	0x080085cf
 80085a4:	080085c7 	.word	0x080085c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085a8:	f7fc fe1a 	bl	80051e0 <HAL_RCC_GetPCLK1Freq>
 80085ac:	61f8      	str	r0, [r7, #28]
        break;
 80085ae:	e014      	b.n	80085da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80085b0:	f7fc fe2c 	bl	800520c <HAL_RCC_GetPCLK2Freq>
 80085b4:	61f8      	str	r0, [r7, #28]
        break;
 80085b6:	e010      	b.n	80085da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80085b8:	4b1e      	ldr	r3, [pc, #120]	; (8008634 <UART_SetConfig+0x56c>)
 80085ba:	61fb      	str	r3, [r7, #28]
        break;
 80085bc:	e00d      	b.n	80085da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80085be:	f7fc fd77 	bl	80050b0 <HAL_RCC_GetSysClockFreq>
 80085c2:	61f8      	str	r0, [r7, #28]
        break;
 80085c4:	e009      	b.n	80085da <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80085ca:	61fb      	str	r3, [r7, #28]
        break;
 80085cc:	e005      	b.n	80085da <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80085d8:	bf00      	nop
    }

    if (pclk != 0U)
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d019      	beq.n	8008614 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	085a      	lsrs	r2, r3, #1
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	441a      	add	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	2b0f      	cmp	r3, #15
 80085f8:	d909      	bls.n	800860e <UART_SetConfig+0x546>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008600:	d205      	bcs.n	800860e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	b29a      	uxth	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60da      	str	r2, [r3, #12]
 800860c:	e002      	b.n	8008614 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008620:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008624:	4618      	mov	r0, r3
 8008626:	3728      	adds	r7, #40	; 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800862e:	bf00      	nop
 8008630:	40008000 	.word	0x40008000
 8008634:	00f42400 	.word	0x00f42400

08008638 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00a      	beq.n	8008662 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008666:	f003 0302 	and.w	r3, r3, #2
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00a      	beq.n	8008684 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	430a      	orrs	r2, r1
 8008682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00a      	beq.n	80086a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086aa:	f003 0308 	and.w	r3, r3, #8
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00a      	beq.n	80086c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00a      	beq.n	80086ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00a      	beq.n	800870c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	430a      	orrs	r2, r1
 800870a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008714:	2b00      	cmp	r3, #0
 8008716:	d01a      	beq.n	800874e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	430a      	orrs	r2, r1
 800872c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008736:	d10a      	bne.n	800874e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	430a      	orrs	r2, r1
 800874c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00a      	beq.n	8008770 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	430a      	orrs	r2, r1
 800876e:	605a      	str	r2, [r3, #4]
  }
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b086      	sub	sp, #24
 8008780:	af02      	add	r7, sp, #8
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800878c:	f7f9 fd4a 	bl	8002224 <HAL_GetTick>
 8008790:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0308 	and.w	r3, r3, #8
 800879c:	2b08      	cmp	r3, #8
 800879e:	d10e      	bne.n	80087be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f82d 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087ba:	2303      	movs	r3, #3
 80087bc:	e023      	b.n	8008806 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0304 	and.w	r3, r3, #4
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d10e      	bne.n	80087ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f817 	bl	800880e <UART_WaitOnFlagUntilTimeout>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e00d      	b.n	8008806 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2220      	movs	r2, #32
 80087ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2220      	movs	r2, #32
 80087f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800880e:	b580      	push	{r7, lr}
 8008810:	b09c      	sub	sp, #112	; 0x70
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	603b      	str	r3, [r7, #0]
 800881a:	4613      	mov	r3, r2
 800881c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800881e:	e0a5      	b.n	800896c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008826:	f000 80a1 	beq.w	800896c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800882a:	f7f9 fcfb 	bl	8002224 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008836:	429a      	cmp	r2, r3
 8008838:	d302      	bcc.n	8008840 <UART_WaitOnFlagUntilTimeout+0x32>
 800883a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800883c:	2b00      	cmp	r3, #0
 800883e:	d13e      	bne.n	80088be <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008848:	e853 3f00 	ldrex	r3, [r3]
 800884c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800884e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008850:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008854:	667b      	str	r3, [r7, #100]	; 0x64
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	461a      	mov	r2, r3
 800885c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800885e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008860:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008862:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008866:	e841 2300 	strex	r3, r2, [r1]
 800886a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800886c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1e6      	bne.n	8008840 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	3308      	adds	r3, #8
 8008878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800887a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800887c:	e853 3f00 	ldrex	r3, [r3]
 8008880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008884:	f023 0301 	bic.w	r3, r3, #1
 8008888:	663b      	str	r3, [r7, #96]	; 0x60
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008892:	64ba      	str	r2, [r7, #72]	; 0x48
 8008894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800889a:	e841 2300 	strex	r3, r2, [r1]
 800889e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80088a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1e5      	bne.n	8008872 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2220      	movs	r2, #32
 80088aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2220      	movs	r2, #32
 80088b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e067      	b.n	800898e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0304 	and.w	r3, r3, #4
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d04f      	beq.n	800896c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088da:	d147      	bne.n	800896c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088e4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	461a      	mov	r2, r3
 8008902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
 8008906:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800890a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e6      	bne.n	80088e6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	3308      	adds	r3, #8
 800891e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	e853 3f00 	ldrex	r3, [r3]
 8008926:	613b      	str	r3, [r7, #16]
   return(result);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f023 0301 	bic.w	r3, r3, #1
 800892e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3308      	adds	r3, #8
 8008936:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008938:	623a      	str	r2, [r7, #32]
 800893a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893c:	69f9      	ldr	r1, [r7, #28]
 800893e:	6a3a      	ldr	r2, [r7, #32]
 8008940:	e841 2300 	strex	r3, r2, [r1]
 8008944:	61bb      	str	r3, [r7, #24]
   return(result);
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1e5      	bne.n	8008918 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2220      	movs	r2, #32
 8008950:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2220      	movs	r2, #32
 8008956:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008968:	2303      	movs	r3, #3
 800896a:	e010      	b.n	800898e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	69da      	ldr	r2, [r3, #28]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	4013      	ands	r3, r2
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	429a      	cmp	r2, r3
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	429a      	cmp	r2, r3
 8008988:	f43f af4a 	beq.w	8008820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	3770      	adds	r7, #112	; 0x70
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008996:	b480      	push	{r7}
 8008998:	b095      	sub	sp, #84	; 0x54
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089bc:	643b      	str	r3, [r7, #64]	; 0x40
 80089be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e6      	bne.n	800899e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3308      	adds	r3, #8
 80089d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	e853 3f00 	ldrex	r3, [r3]
 80089de:	61fb      	str	r3, [r7, #28]
   return(result);
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	f023 0301 	bic.w	r3, r3, #1
 80089e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	3308      	adds	r3, #8
 80089ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089f8:	e841 2300 	strex	r3, r2, [r1]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d1e5      	bne.n	80089d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d118      	bne.n	8008a3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f023 0310 	bic.w	r3, r3, #16
 8008a20:	647b      	str	r3, [r7, #68]	; 0x44
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a2a:	61bb      	str	r3, [r7, #24]
 8008a2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6979      	ldr	r1, [r7, #20]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	613b      	str	r3, [r7, #16]
   return(result);
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e6      	bne.n	8008a0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2220      	movs	r2, #32
 8008a42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008a50:	bf00      	nop
 8008a52:	3754      	adds	r7, #84	; 0x54
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a7a:	68f8      	ldr	r0, [r7, #12]
 8008a7c:	f7ff fb0e 	bl	800809c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a80:	bf00      	nop
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa4:	61fb      	str	r3, [r7, #28]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	61bb      	str	r3, [r7, #24]
 8008ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6979      	ldr	r1, [r7, #20]
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	613b      	str	r3, [r7, #16]
   return(result);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e6      	bne.n	8008a90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2220      	movs	r2, #32
 8008ac6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f7ff fada 	bl	8008088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad4:	bf00      	nop
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <atoi>:
 8008af0:	220a      	movs	r2, #10
 8008af2:	2100      	movs	r1, #0
 8008af4:	f000 b9b6 	b.w	8008e64 <strtol>

08008af8 <__errno>:
 8008af8:	4b01      	ldr	r3, [pc, #4]	; (8008b00 <__errno+0x8>)
 8008afa:	6818      	ldr	r0, [r3, #0]
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	20000424 	.word	0x20000424

08008b04 <__libc_init_array>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4d0d      	ldr	r5, [pc, #52]	; (8008b3c <__libc_init_array+0x38>)
 8008b08:	4c0d      	ldr	r4, [pc, #52]	; (8008b40 <__libc_init_array+0x3c>)
 8008b0a:	1b64      	subs	r4, r4, r5
 8008b0c:	10a4      	asrs	r4, r4, #2
 8008b0e:	2600      	movs	r6, #0
 8008b10:	42a6      	cmp	r6, r4
 8008b12:	d109      	bne.n	8008b28 <__libc_init_array+0x24>
 8008b14:	4d0b      	ldr	r5, [pc, #44]	; (8008b44 <__libc_init_array+0x40>)
 8008b16:	4c0c      	ldr	r4, [pc, #48]	; (8008b48 <__libc_init_array+0x44>)
 8008b18:	f001 fd30 	bl	800a57c <_init>
 8008b1c:	1b64      	subs	r4, r4, r5
 8008b1e:	10a4      	asrs	r4, r4, #2
 8008b20:	2600      	movs	r6, #0
 8008b22:	42a6      	cmp	r6, r4
 8008b24:	d105      	bne.n	8008b32 <__libc_init_array+0x2e>
 8008b26:	bd70      	pop	{r4, r5, r6, pc}
 8008b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2c:	4798      	blx	r3
 8008b2e:	3601      	adds	r6, #1
 8008b30:	e7ee      	b.n	8008b10 <__libc_init_array+0xc>
 8008b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b36:	4798      	blx	r3
 8008b38:	3601      	adds	r6, #1
 8008b3a:	e7f2      	b.n	8008b22 <__libc_init_array+0x1e>
 8008b3c:	0800a8b4 	.word	0x0800a8b4
 8008b40:	0800a8b4 	.word	0x0800a8b4
 8008b44:	0800a8b4 	.word	0x0800a8b4
 8008b48:	0800a8b8 	.word	0x0800a8b8

08008b4c <memset>:
 8008b4c:	4402      	add	r2, r0
 8008b4e:	4603      	mov	r3, r0
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d100      	bne.n	8008b56 <memset+0xa>
 8008b54:	4770      	bx	lr
 8008b56:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5a:	e7f9      	b.n	8008b50 <memset+0x4>

08008b5c <iprintf>:
 8008b5c:	b40f      	push	{r0, r1, r2, r3}
 8008b5e:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <iprintf+0x2c>)
 8008b60:	b513      	push	{r0, r1, r4, lr}
 8008b62:	681c      	ldr	r4, [r3, #0]
 8008b64:	b124      	cbz	r4, 8008b70 <iprintf+0x14>
 8008b66:	69a3      	ldr	r3, [r4, #24]
 8008b68:	b913      	cbnz	r3, 8008b70 <iprintf+0x14>
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	f000 fb80 	bl	8009270 <__sinit>
 8008b70:	ab05      	add	r3, sp, #20
 8008b72:	9a04      	ldr	r2, [sp, #16]
 8008b74:	68a1      	ldr	r1, [r4, #8]
 8008b76:	9301      	str	r3, [sp, #4]
 8008b78:	4620      	mov	r0, r4
 8008b7a:	f000 ff6d 	bl	8009a58 <_vfiprintf_r>
 8008b7e:	b002      	add	sp, #8
 8008b80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b84:	b004      	add	sp, #16
 8008b86:	4770      	bx	lr
 8008b88:	20000424 	.word	0x20000424

08008b8c <_puts_r>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	460e      	mov	r6, r1
 8008b90:	4605      	mov	r5, r0
 8008b92:	b118      	cbz	r0, 8008b9c <_puts_r+0x10>
 8008b94:	6983      	ldr	r3, [r0, #24]
 8008b96:	b90b      	cbnz	r3, 8008b9c <_puts_r+0x10>
 8008b98:	f000 fb6a 	bl	8009270 <__sinit>
 8008b9c:	69ab      	ldr	r3, [r5, #24]
 8008b9e:	68ac      	ldr	r4, [r5, #8]
 8008ba0:	b913      	cbnz	r3, 8008ba8 <_puts_r+0x1c>
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	f000 fb64 	bl	8009270 <__sinit>
 8008ba8:	4b2c      	ldr	r3, [pc, #176]	; (8008c5c <_puts_r+0xd0>)
 8008baa:	429c      	cmp	r4, r3
 8008bac:	d120      	bne.n	8008bf0 <_puts_r+0x64>
 8008bae:	686c      	ldr	r4, [r5, #4]
 8008bb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bb2:	07db      	lsls	r3, r3, #31
 8008bb4:	d405      	bmi.n	8008bc2 <_puts_r+0x36>
 8008bb6:	89a3      	ldrh	r3, [r4, #12]
 8008bb8:	0598      	lsls	r0, r3, #22
 8008bba:	d402      	bmi.n	8008bc2 <_puts_r+0x36>
 8008bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bbe:	f000 fbf5 	bl	80093ac <__retarget_lock_acquire_recursive>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	0719      	lsls	r1, r3, #28
 8008bc6:	d51d      	bpl.n	8008c04 <_puts_r+0x78>
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	b1db      	cbz	r3, 8008c04 <_puts_r+0x78>
 8008bcc:	3e01      	subs	r6, #1
 8008bce:	68a3      	ldr	r3, [r4, #8]
 8008bd0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	60a3      	str	r3, [r4, #8]
 8008bd8:	bb39      	cbnz	r1, 8008c2a <_puts_r+0x9e>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	da38      	bge.n	8008c50 <_puts_r+0xc4>
 8008bde:	4622      	mov	r2, r4
 8008be0:	210a      	movs	r1, #10
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 f948 	bl	8008e78 <__swbuf_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d011      	beq.n	8008c10 <_puts_r+0x84>
 8008bec:	250a      	movs	r5, #10
 8008bee:	e011      	b.n	8008c14 <_puts_r+0x88>
 8008bf0:	4b1b      	ldr	r3, [pc, #108]	; (8008c60 <_puts_r+0xd4>)
 8008bf2:	429c      	cmp	r4, r3
 8008bf4:	d101      	bne.n	8008bfa <_puts_r+0x6e>
 8008bf6:	68ac      	ldr	r4, [r5, #8]
 8008bf8:	e7da      	b.n	8008bb0 <_puts_r+0x24>
 8008bfa:	4b1a      	ldr	r3, [pc, #104]	; (8008c64 <_puts_r+0xd8>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	bf08      	it	eq
 8008c00:	68ec      	ldreq	r4, [r5, #12]
 8008c02:	e7d5      	b.n	8008bb0 <_puts_r+0x24>
 8008c04:	4621      	mov	r1, r4
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 f99a 	bl	8008f40 <__swsetup_r>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	d0dd      	beq.n	8008bcc <_puts_r+0x40>
 8008c10:	f04f 35ff 	mov.w	r5, #4294967295
 8008c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c16:	07da      	lsls	r2, r3, #31
 8008c18:	d405      	bmi.n	8008c26 <_puts_r+0x9a>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	059b      	lsls	r3, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_puts_r+0x9a>
 8008c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c22:	f000 fbc4 	bl	80093ae <__retarget_lock_release_recursive>
 8008c26:	4628      	mov	r0, r5
 8008c28:	bd70      	pop	{r4, r5, r6, pc}
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	da04      	bge.n	8008c38 <_puts_r+0xac>
 8008c2e:	69a2      	ldr	r2, [r4, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	dc06      	bgt.n	8008c42 <_puts_r+0xb6>
 8008c34:	290a      	cmp	r1, #10
 8008c36:	d004      	beq.n	8008c42 <_puts_r+0xb6>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	6022      	str	r2, [r4, #0]
 8008c3e:	7019      	strb	r1, [r3, #0]
 8008c40:	e7c5      	b.n	8008bce <_puts_r+0x42>
 8008c42:	4622      	mov	r2, r4
 8008c44:	4628      	mov	r0, r5
 8008c46:	f000 f917 	bl	8008e78 <__swbuf_r>
 8008c4a:	3001      	adds	r0, #1
 8008c4c:	d1bf      	bne.n	8008bce <_puts_r+0x42>
 8008c4e:	e7df      	b.n	8008c10 <_puts_r+0x84>
 8008c50:	6823      	ldr	r3, [r4, #0]
 8008c52:	250a      	movs	r5, #10
 8008c54:	1c5a      	adds	r2, r3, #1
 8008c56:	6022      	str	r2, [r4, #0]
 8008c58:	701d      	strb	r5, [r3, #0]
 8008c5a:	e7db      	b.n	8008c14 <_puts_r+0x88>
 8008c5c:	0800a81c 	.word	0x0800a81c
 8008c60:	0800a83c 	.word	0x0800a83c
 8008c64:	0800a7fc 	.word	0x0800a7fc

08008c68 <puts>:
 8008c68:	4b02      	ldr	r3, [pc, #8]	; (8008c74 <puts+0xc>)
 8008c6a:	4601      	mov	r1, r0
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	f7ff bf8d 	b.w	8008b8c <_puts_r>
 8008c72:	bf00      	nop
 8008c74:	20000424 	.word	0x20000424

08008c78 <siscanf>:
 8008c78:	b40e      	push	{r1, r2, r3}
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	b09f      	sub	sp, #124	; 0x7c
 8008c7e:	ac21      	add	r4, sp, #132	; 0x84
 8008c80:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008c84:	f854 2b04 	ldr.w	r2, [r4], #4
 8008c88:	9201      	str	r2, [sp, #4]
 8008c8a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008c8e:	9004      	str	r0, [sp, #16]
 8008c90:	9008      	str	r0, [sp, #32]
 8008c92:	f7f7 faa7 	bl	80001e4 <strlen>
 8008c96:	4b0c      	ldr	r3, [pc, #48]	; (8008cc8 <siscanf+0x50>)
 8008c98:	9005      	str	r0, [sp, #20]
 8008c9a:	9009      	str	r0, [sp, #36]	; 0x24
 8008c9c:	930d      	str	r3, [sp, #52]	; 0x34
 8008c9e:	480b      	ldr	r0, [pc, #44]	; (8008ccc <siscanf+0x54>)
 8008ca0:	9a01      	ldr	r2, [sp, #4]
 8008ca2:	6800      	ldr	r0, [r0, #0]
 8008ca4:	9403      	str	r4, [sp, #12]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	9311      	str	r3, [sp, #68]	; 0x44
 8008caa:	9316      	str	r3, [sp, #88]	; 0x58
 8008cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cb0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008cb4:	a904      	add	r1, sp, #16
 8008cb6:	4623      	mov	r3, r4
 8008cb8:	f000 fd2c 	bl	8009714 <__ssvfiscanf_r>
 8008cbc:	b01f      	add	sp, #124	; 0x7c
 8008cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc2:	b003      	add	sp, #12
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	08008cf3 	.word	0x08008cf3
 8008ccc:	20000424 	.word	0x20000424

08008cd0 <__sread>:
 8008cd0:	b510      	push	{r4, lr}
 8008cd2:	460c      	mov	r4, r1
 8008cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cd8:	f001 fad4 	bl	800a284 <_read_r>
 8008cdc:	2800      	cmp	r0, #0
 8008cde:	bfab      	itete	ge
 8008ce0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ce2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ce4:	181b      	addge	r3, r3, r0
 8008ce6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cea:	bfac      	ite	ge
 8008cec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cee:	81a3      	strhlt	r3, [r4, #12]
 8008cf0:	bd10      	pop	{r4, pc}

08008cf2 <__seofread>:
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	4770      	bx	lr

08008cf6 <__swrite>:
 8008cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfa:	461f      	mov	r7, r3
 8008cfc:	898b      	ldrh	r3, [r1, #12]
 8008cfe:	05db      	lsls	r3, r3, #23
 8008d00:	4605      	mov	r5, r0
 8008d02:	460c      	mov	r4, r1
 8008d04:	4616      	mov	r6, r2
 8008d06:	d505      	bpl.n	8008d14 <__swrite+0x1e>
 8008d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f000 fb4e 	bl	80093b0 <_lseek_r>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	4632      	mov	r2, r6
 8008d22:	463b      	mov	r3, r7
 8008d24:	4628      	mov	r0, r5
 8008d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d2a:	f000 b8f7 	b.w	8008f1c <_write_r>

08008d2e <__sseek>:
 8008d2e:	b510      	push	{r4, lr}
 8008d30:	460c      	mov	r4, r1
 8008d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d36:	f000 fb3b 	bl	80093b0 <_lseek_r>
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	89a3      	ldrh	r3, [r4, #12]
 8008d3e:	bf15      	itete	ne
 8008d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d4a:	81a3      	strheq	r3, [r4, #12]
 8008d4c:	bf18      	it	ne
 8008d4e:	81a3      	strhne	r3, [r4, #12]
 8008d50:	bd10      	pop	{r4, pc}

08008d52 <__sclose>:
 8008d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d56:	f000 b961 	b.w	800901c <_close_r>
	...

08008d5c <_strtol_l.constprop.0>:
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d62:	d001      	beq.n	8008d68 <_strtol_l.constprop.0+0xc>
 8008d64:	2b24      	cmp	r3, #36	; 0x24
 8008d66:	d906      	bls.n	8008d76 <_strtol_l.constprop.0+0x1a>
 8008d68:	f7ff fec6 	bl	8008af8 <__errno>
 8008d6c:	2316      	movs	r3, #22
 8008d6e:	6003      	str	r3, [r0, #0]
 8008d70:	2000      	movs	r0, #0
 8008d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e5c <_strtol_l.constprop.0+0x100>
 8008d7a:	460d      	mov	r5, r1
 8008d7c:	462e      	mov	r6, r5
 8008d7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d82:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008d86:	f017 0708 	ands.w	r7, r7, #8
 8008d8a:	d1f7      	bne.n	8008d7c <_strtol_l.constprop.0+0x20>
 8008d8c:	2c2d      	cmp	r4, #45	; 0x2d
 8008d8e:	d132      	bne.n	8008df6 <_strtol_l.constprop.0+0x9a>
 8008d90:	782c      	ldrb	r4, [r5, #0]
 8008d92:	2701      	movs	r7, #1
 8008d94:	1cb5      	adds	r5, r6, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d05b      	beq.n	8008e52 <_strtol_l.constprop.0+0xf6>
 8008d9a:	2b10      	cmp	r3, #16
 8008d9c:	d109      	bne.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008d9e:	2c30      	cmp	r4, #48	; 0x30
 8008da0:	d107      	bne.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008da2:	782c      	ldrb	r4, [r5, #0]
 8008da4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008da8:	2c58      	cmp	r4, #88	; 0x58
 8008daa:	d14d      	bne.n	8008e48 <_strtol_l.constprop.0+0xec>
 8008dac:	786c      	ldrb	r4, [r5, #1]
 8008dae:	2310      	movs	r3, #16
 8008db0:	3502      	adds	r5, #2
 8008db2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008db6:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dba:	f04f 0c00 	mov.w	ip, #0
 8008dbe:	fbb8 f9f3 	udiv	r9, r8, r3
 8008dc2:	4666      	mov	r6, ip
 8008dc4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008dc8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008dcc:	f1be 0f09 	cmp.w	lr, #9
 8008dd0:	d816      	bhi.n	8008e00 <_strtol_l.constprop.0+0xa4>
 8008dd2:	4674      	mov	r4, lr
 8008dd4:	42a3      	cmp	r3, r4
 8008dd6:	dd24      	ble.n	8008e22 <_strtol_l.constprop.0+0xc6>
 8008dd8:	f1bc 0f00 	cmp.w	ip, #0
 8008ddc:	db1e      	blt.n	8008e1c <_strtol_l.constprop.0+0xc0>
 8008dde:	45b1      	cmp	r9, r6
 8008de0:	d31c      	bcc.n	8008e1c <_strtol_l.constprop.0+0xc0>
 8008de2:	d101      	bne.n	8008de8 <_strtol_l.constprop.0+0x8c>
 8008de4:	45a2      	cmp	sl, r4
 8008de6:	db19      	blt.n	8008e1c <_strtol_l.constprop.0+0xc0>
 8008de8:	fb06 4603 	mla	r6, r6, r3, r4
 8008dec:	f04f 0c01 	mov.w	ip, #1
 8008df0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008df4:	e7e8      	b.n	8008dc8 <_strtol_l.constprop.0+0x6c>
 8008df6:	2c2b      	cmp	r4, #43	; 0x2b
 8008df8:	bf04      	itt	eq
 8008dfa:	782c      	ldrbeq	r4, [r5, #0]
 8008dfc:	1cb5      	addeq	r5, r6, #2
 8008dfe:	e7ca      	b.n	8008d96 <_strtol_l.constprop.0+0x3a>
 8008e00:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008e04:	f1be 0f19 	cmp.w	lr, #25
 8008e08:	d801      	bhi.n	8008e0e <_strtol_l.constprop.0+0xb2>
 8008e0a:	3c37      	subs	r4, #55	; 0x37
 8008e0c:	e7e2      	b.n	8008dd4 <_strtol_l.constprop.0+0x78>
 8008e0e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008e12:	f1be 0f19 	cmp.w	lr, #25
 8008e16:	d804      	bhi.n	8008e22 <_strtol_l.constprop.0+0xc6>
 8008e18:	3c57      	subs	r4, #87	; 0x57
 8008e1a:	e7db      	b.n	8008dd4 <_strtol_l.constprop.0+0x78>
 8008e1c:	f04f 3cff 	mov.w	ip, #4294967295
 8008e20:	e7e6      	b.n	8008df0 <_strtol_l.constprop.0+0x94>
 8008e22:	f1bc 0f00 	cmp.w	ip, #0
 8008e26:	da05      	bge.n	8008e34 <_strtol_l.constprop.0+0xd8>
 8008e28:	2322      	movs	r3, #34	; 0x22
 8008e2a:	6003      	str	r3, [r0, #0]
 8008e2c:	4646      	mov	r6, r8
 8008e2e:	b942      	cbnz	r2, 8008e42 <_strtol_l.constprop.0+0xe6>
 8008e30:	4630      	mov	r0, r6
 8008e32:	e79e      	b.n	8008d72 <_strtol_l.constprop.0+0x16>
 8008e34:	b107      	cbz	r7, 8008e38 <_strtol_l.constprop.0+0xdc>
 8008e36:	4276      	negs	r6, r6
 8008e38:	2a00      	cmp	r2, #0
 8008e3a:	d0f9      	beq.n	8008e30 <_strtol_l.constprop.0+0xd4>
 8008e3c:	f1bc 0f00 	cmp.w	ip, #0
 8008e40:	d000      	beq.n	8008e44 <_strtol_l.constprop.0+0xe8>
 8008e42:	1e69      	subs	r1, r5, #1
 8008e44:	6011      	str	r1, [r2, #0]
 8008e46:	e7f3      	b.n	8008e30 <_strtol_l.constprop.0+0xd4>
 8008e48:	2430      	movs	r4, #48	; 0x30
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1b1      	bne.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008e4e:	2308      	movs	r3, #8
 8008e50:	e7af      	b.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008e52:	2c30      	cmp	r4, #48	; 0x30
 8008e54:	d0a5      	beq.n	8008da2 <_strtol_l.constprop.0+0x46>
 8008e56:	230a      	movs	r3, #10
 8008e58:	e7ab      	b.n	8008db2 <_strtol_l.constprop.0+0x56>
 8008e5a:	bf00      	nop
 8008e5c:	0800a6f9 	.word	0x0800a6f9

08008e60 <_strtol_r>:
 8008e60:	f7ff bf7c 	b.w	8008d5c <_strtol_l.constprop.0>

08008e64 <strtol>:
 8008e64:	4613      	mov	r3, r2
 8008e66:	460a      	mov	r2, r1
 8008e68:	4601      	mov	r1, r0
 8008e6a:	4802      	ldr	r0, [pc, #8]	; (8008e74 <strtol+0x10>)
 8008e6c:	6800      	ldr	r0, [r0, #0]
 8008e6e:	f7ff bf75 	b.w	8008d5c <_strtol_l.constprop.0>
 8008e72:	bf00      	nop
 8008e74:	20000424 	.word	0x20000424

08008e78 <__swbuf_r>:
 8008e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7a:	460e      	mov	r6, r1
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	4605      	mov	r5, r0
 8008e80:	b118      	cbz	r0, 8008e8a <__swbuf_r+0x12>
 8008e82:	6983      	ldr	r3, [r0, #24]
 8008e84:	b90b      	cbnz	r3, 8008e8a <__swbuf_r+0x12>
 8008e86:	f000 f9f3 	bl	8009270 <__sinit>
 8008e8a:	4b21      	ldr	r3, [pc, #132]	; (8008f10 <__swbuf_r+0x98>)
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	d12b      	bne.n	8008ee8 <__swbuf_r+0x70>
 8008e90:	686c      	ldr	r4, [r5, #4]
 8008e92:	69a3      	ldr	r3, [r4, #24]
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	071a      	lsls	r2, r3, #28
 8008e9a:	d52f      	bpl.n	8008efc <__swbuf_r+0x84>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	b36b      	cbz	r3, 8008efc <__swbuf_r+0x84>
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	6820      	ldr	r0, [r4, #0]
 8008ea4:	1ac0      	subs	r0, r0, r3
 8008ea6:	6963      	ldr	r3, [r4, #20]
 8008ea8:	b2f6      	uxtb	r6, r6
 8008eaa:	4283      	cmp	r3, r0
 8008eac:	4637      	mov	r7, r6
 8008eae:	dc04      	bgt.n	8008eba <__swbuf_r+0x42>
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f000 f948 	bl	8009148 <_fflush_r>
 8008eb8:	bb30      	cbnz	r0, 8008f08 <__swbuf_r+0x90>
 8008eba:	68a3      	ldr	r3, [r4, #8]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	60a3      	str	r3, [r4, #8]
 8008ec0:	6823      	ldr	r3, [r4, #0]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	6022      	str	r2, [r4, #0]
 8008ec6:	701e      	strb	r6, [r3, #0]
 8008ec8:	6963      	ldr	r3, [r4, #20]
 8008eca:	3001      	adds	r0, #1
 8008ecc:	4283      	cmp	r3, r0
 8008ece:	d004      	beq.n	8008eda <__swbuf_r+0x62>
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	07db      	lsls	r3, r3, #31
 8008ed4:	d506      	bpl.n	8008ee4 <__swbuf_r+0x6c>
 8008ed6:	2e0a      	cmp	r6, #10
 8008ed8:	d104      	bne.n	8008ee4 <__swbuf_r+0x6c>
 8008eda:	4621      	mov	r1, r4
 8008edc:	4628      	mov	r0, r5
 8008ede:	f000 f933 	bl	8009148 <_fflush_r>
 8008ee2:	b988      	cbnz	r0, 8008f08 <__swbuf_r+0x90>
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee8:	4b0a      	ldr	r3, [pc, #40]	; (8008f14 <__swbuf_r+0x9c>)
 8008eea:	429c      	cmp	r4, r3
 8008eec:	d101      	bne.n	8008ef2 <__swbuf_r+0x7a>
 8008eee:	68ac      	ldr	r4, [r5, #8]
 8008ef0:	e7cf      	b.n	8008e92 <__swbuf_r+0x1a>
 8008ef2:	4b09      	ldr	r3, [pc, #36]	; (8008f18 <__swbuf_r+0xa0>)
 8008ef4:	429c      	cmp	r4, r3
 8008ef6:	bf08      	it	eq
 8008ef8:	68ec      	ldreq	r4, [r5, #12]
 8008efa:	e7ca      	b.n	8008e92 <__swbuf_r+0x1a>
 8008efc:	4621      	mov	r1, r4
 8008efe:	4628      	mov	r0, r5
 8008f00:	f000 f81e 	bl	8008f40 <__swsetup_r>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d0cb      	beq.n	8008ea0 <__swbuf_r+0x28>
 8008f08:	f04f 37ff 	mov.w	r7, #4294967295
 8008f0c:	e7ea      	b.n	8008ee4 <__swbuf_r+0x6c>
 8008f0e:	bf00      	nop
 8008f10:	0800a81c 	.word	0x0800a81c
 8008f14:	0800a83c 	.word	0x0800a83c
 8008f18:	0800a7fc 	.word	0x0800a7fc

08008f1c <_write_r>:
 8008f1c:	b538      	push	{r3, r4, r5, lr}
 8008f1e:	4d07      	ldr	r5, [pc, #28]	; (8008f3c <_write_r+0x20>)
 8008f20:	4604      	mov	r4, r0
 8008f22:	4608      	mov	r0, r1
 8008f24:	4611      	mov	r1, r2
 8008f26:	2200      	movs	r2, #0
 8008f28:	602a      	str	r2, [r5, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f7f8 fcec 	bl	8001908 <_write>
 8008f30:	1c43      	adds	r3, r0, #1
 8008f32:	d102      	bne.n	8008f3a <_write_r+0x1e>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	b103      	cbz	r3, 8008f3a <_write_r+0x1e>
 8008f38:	6023      	str	r3, [r4, #0]
 8008f3a:	bd38      	pop	{r3, r4, r5, pc}
 8008f3c:	20001158 	.word	0x20001158

08008f40 <__swsetup_r>:
 8008f40:	4b32      	ldr	r3, [pc, #200]	; (800900c <__swsetup_r+0xcc>)
 8008f42:	b570      	push	{r4, r5, r6, lr}
 8008f44:	681d      	ldr	r5, [r3, #0]
 8008f46:	4606      	mov	r6, r0
 8008f48:	460c      	mov	r4, r1
 8008f4a:	b125      	cbz	r5, 8008f56 <__swsetup_r+0x16>
 8008f4c:	69ab      	ldr	r3, [r5, #24]
 8008f4e:	b913      	cbnz	r3, 8008f56 <__swsetup_r+0x16>
 8008f50:	4628      	mov	r0, r5
 8008f52:	f000 f98d 	bl	8009270 <__sinit>
 8008f56:	4b2e      	ldr	r3, [pc, #184]	; (8009010 <__swsetup_r+0xd0>)
 8008f58:	429c      	cmp	r4, r3
 8008f5a:	d10f      	bne.n	8008f7c <__swsetup_r+0x3c>
 8008f5c:	686c      	ldr	r4, [r5, #4]
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f64:	0719      	lsls	r1, r3, #28
 8008f66:	d42c      	bmi.n	8008fc2 <__swsetup_r+0x82>
 8008f68:	06dd      	lsls	r5, r3, #27
 8008f6a:	d411      	bmi.n	8008f90 <__swsetup_r+0x50>
 8008f6c:	2309      	movs	r3, #9
 8008f6e:	6033      	str	r3, [r6, #0]
 8008f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	f04f 30ff 	mov.w	r0, #4294967295
 8008f7a:	e03e      	b.n	8008ffa <__swsetup_r+0xba>
 8008f7c:	4b25      	ldr	r3, [pc, #148]	; (8009014 <__swsetup_r+0xd4>)
 8008f7e:	429c      	cmp	r4, r3
 8008f80:	d101      	bne.n	8008f86 <__swsetup_r+0x46>
 8008f82:	68ac      	ldr	r4, [r5, #8]
 8008f84:	e7eb      	b.n	8008f5e <__swsetup_r+0x1e>
 8008f86:	4b24      	ldr	r3, [pc, #144]	; (8009018 <__swsetup_r+0xd8>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	bf08      	it	eq
 8008f8c:	68ec      	ldreq	r4, [r5, #12]
 8008f8e:	e7e6      	b.n	8008f5e <__swsetup_r+0x1e>
 8008f90:	0758      	lsls	r0, r3, #29
 8008f92:	d512      	bpl.n	8008fba <__swsetup_r+0x7a>
 8008f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f96:	b141      	cbz	r1, 8008faa <__swsetup_r+0x6a>
 8008f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f9c:	4299      	cmp	r1, r3
 8008f9e:	d002      	beq.n	8008fa6 <__swsetup_r+0x66>
 8008fa0:	4630      	mov	r0, r6
 8008fa2:	f000 fa7d 	bl	80094a0 <_free_r>
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	6063      	str	r3, [r4, #4]
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f043 0308 	orr.w	r3, r3, #8
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	6923      	ldr	r3, [r4, #16]
 8008fc4:	b94b      	cbnz	r3, 8008fda <__swsetup_r+0x9a>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fd0:	d003      	beq.n	8008fda <__swsetup_r+0x9a>
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4630      	mov	r0, r6
 8008fd6:	f000 fa23 	bl	8009420 <__smakebuf_r>
 8008fda:	89a0      	ldrh	r0, [r4, #12]
 8008fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fe0:	f010 0301 	ands.w	r3, r0, #1
 8008fe4:	d00a      	beq.n	8008ffc <__swsetup_r+0xbc>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60a3      	str	r3, [r4, #8]
 8008fea:	6963      	ldr	r3, [r4, #20]
 8008fec:	425b      	negs	r3, r3
 8008fee:	61a3      	str	r3, [r4, #24]
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	b943      	cbnz	r3, 8009006 <__swsetup_r+0xc6>
 8008ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ff8:	d1ba      	bne.n	8008f70 <__swsetup_r+0x30>
 8008ffa:	bd70      	pop	{r4, r5, r6, pc}
 8008ffc:	0781      	lsls	r1, r0, #30
 8008ffe:	bf58      	it	pl
 8009000:	6963      	ldrpl	r3, [r4, #20]
 8009002:	60a3      	str	r3, [r4, #8]
 8009004:	e7f4      	b.n	8008ff0 <__swsetup_r+0xb0>
 8009006:	2000      	movs	r0, #0
 8009008:	e7f7      	b.n	8008ffa <__swsetup_r+0xba>
 800900a:	bf00      	nop
 800900c:	20000424 	.word	0x20000424
 8009010:	0800a81c 	.word	0x0800a81c
 8009014:	0800a83c 	.word	0x0800a83c
 8009018:	0800a7fc 	.word	0x0800a7fc

0800901c <_close_r>:
 800901c:	b538      	push	{r3, r4, r5, lr}
 800901e:	4d06      	ldr	r5, [pc, #24]	; (8009038 <_close_r+0x1c>)
 8009020:	2300      	movs	r3, #0
 8009022:	4604      	mov	r4, r0
 8009024:	4608      	mov	r0, r1
 8009026:	602b      	str	r3, [r5, #0]
 8009028:	f7f8 ffe5 	bl	8001ff6 <_close>
 800902c:	1c43      	adds	r3, r0, #1
 800902e:	d102      	bne.n	8009036 <_close_r+0x1a>
 8009030:	682b      	ldr	r3, [r5, #0]
 8009032:	b103      	cbz	r3, 8009036 <_close_r+0x1a>
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	bd38      	pop	{r3, r4, r5, pc}
 8009038:	20001158 	.word	0x20001158

0800903c <__sflush_r>:
 800903c:	898a      	ldrh	r2, [r1, #12]
 800903e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009042:	4605      	mov	r5, r0
 8009044:	0710      	lsls	r0, r2, #28
 8009046:	460c      	mov	r4, r1
 8009048:	d458      	bmi.n	80090fc <__sflush_r+0xc0>
 800904a:	684b      	ldr	r3, [r1, #4]
 800904c:	2b00      	cmp	r3, #0
 800904e:	dc05      	bgt.n	800905c <__sflush_r+0x20>
 8009050:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	dc02      	bgt.n	800905c <__sflush_r+0x20>
 8009056:	2000      	movs	r0, #0
 8009058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800905e:	2e00      	cmp	r6, #0
 8009060:	d0f9      	beq.n	8009056 <__sflush_r+0x1a>
 8009062:	2300      	movs	r3, #0
 8009064:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009068:	682f      	ldr	r7, [r5, #0]
 800906a:	602b      	str	r3, [r5, #0]
 800906c:	d032      	beq.n	80090d4 <__sflush_r+0x98>
 800906e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	075a      	lsls	r2, r3, #29
 8009074:	d505      	bpl.n	8009082 <__sflush_r+0x46>
 8009076:	6863      	ldr	r3, [r4, #4]
 8009078:	1ac0      	subs	r0, r0, r3
 800907a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800907c:	b10b      	cbz	r3, 8009082 <__sflush_r+0x46>
 800907e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009080:	1ac0      	subs	r0, r0, r3
 8009082:	2300      	movs	r3, #0
 8009084:	4602      	mov	r2, r0
 8009086:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009088:	6a21      	ldr	r1, [r4, #32]
 800908a:	4628      	mov	r0, r5
 800908c:	47b0      	blx	r6
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	d106      	bne.n	80090a2 <__sflush_r+0x66>
 8009094:	6829      	ldr	r1, [r5, #0]
 8009096:	291d      	cmp	r1, #29
 8009098:	d82c      	bhi.n	80090f4 <__sflush_r+0xb8>
 800909a:	4a2a      	ldr	r2, [pc, #168]	; (8009144 <__sflush_r+0x108>)
 800909c:	40ca      	lsrs	r2, r1
 800909e:	07d6      	lsls	r6, r2, #31
 80090a0:	d528      	bpl.n	80090f4 <__sflush_r+0xb8>
 80090a2:	2200      	movs	r2, #0
 80090a4:	6062      	str	r2, [r4, #4]
 80090a6:	04d9      	lsls	r1, r3, #19
 80090a8:	6922      	ldr	r2, [r4, #16]
 80090aa:	6022      	str	r2, [r4, #0]
 80090ac:	d504      	bpl.n	80090b8 <__sflush_r+0x7c>
 80090ae:	1c42      	adds	r2, r0, #1
 80090b0:	d101      	bne.n	80090b6 <__sflush_r+0x7a>
 80090b2:	682b      	ldr	r3, [r5, #0]
 80090b4:	b903      	cbnz	r3, 80090b8 <__sflush_r+0x7c>
 80090b6:	6560      	str	r0, [r4, #84]	; 0x54
 80090b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090ba:	602f      	str	r7, [r5, #0]
 80090bc:	2900      	cmp	r1, #0
 80090be:	d0ca      	beq.n	8009056 <__sflush_r+0x1a>
 80090c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090c4:	4299      	cmp	r1, r3
 80090c6:	d002      	beq.n	80090ce <__sflush_r+0x92>
 80090c8:	4628      	mov	r0, r5
 80090ca:	f000 f9e9 	bl	80094a0 <_free_r>
 80090ce:	2000      	movs	r0, #0
 80090d0:	6360      	str	r0, [r4, #52]	; 0x34
 80090d2:	e7c1      	b.n	8009058 <__sflush_r+0x1c>
 80090d4:	6a21      	ldr	r1, [r4, #32]
 80090d6:	2301      	movs	r3, #1
 80090d8:	4628      	mov	r0, r5
 80090da:	47b0      	blx	r6
 80090dc:	1c41      	adds	r1, r0, #1
 80090de:	d1c7      	bne.n	8009070 <__sflush_r+0x34>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0c4      	beq.n	8009070 <__sflush_r+0x34>
 80090e6:	2b1d      	cmp	r3, #29
 80090e8:	d001      	beq.n	80090ee <__sflush_r+0xb2>
 80090ea:	2b16      	cmp	r3, #22
 80090ec:	d101      	bne.n	80090f2 <__sflush_r+0xb6>
 80090ee:	602f      	str	r7, [r5, #0]
 80090f0:	e7b1      	b.n	8009056 <__sflush_r+0x1a>
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f8:	81a3      	strh	r3, [r4, #12]
 80090fa:	e7ad      	b.n	8009058 <__sflush_r+0x1c>
 80090fc:	690f      	ldr	r7, [r1, #16]
 80090fe:	2f00      	cmp	r7, #0
 8009100:	d0a9      	beq.n	8009056 <__sflush_r+0x1a>
 8009102:	0793      	lsls	r3, r2, #30
 8009104:	680e      	ldr	r6, [r1, #0]
 8009106:	bf08      	it	eq
 8009108:	694b      	ldreq	r3, [r1, #20]
 800910a:	600f      	str	r7, [r1, #0]
 800910c:	bf18      	it	ne
 800910e:	2300      	movne	r3, #0
 8009110:	eba6 0807 	sub.w	r8, r6, r7
 8009114:	608b      	str	r3, [r1, #8]
 8009116:	f1b8 0f00 	cmp.w	r8, #0
 800911a:	dd9c      	ble.n	8009056 <__sflush_r+0x1a>
 800911c:	6a21      	ldr	r1, [r4, #32]
 800911e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009120:	4643      	mov	r3, r8
 8009122:	463a      	mov	r2, r7
 8009124:	4628      	mov	r0, r5
 8009126:	47b0      	blx	r6
 8009128:	2800      	cmp	r0, #0
 800912a:	dc06      	bgt.n	800913a <__sflush_r+0xfe>
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009132:	81a3      	strh	r3, [r4, #12]
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	e78e      	b.n	8009058 <__sflush_r+0x1c>
 800913a:	4407      	add	r7, r0
 800913c:	eba8 0800 	sub.w	r8, r8, r0
 8009140:	e7e9      	b.n	8009116 <__sflush_r+0xda>
 8009142:	bf00      	nop
 8009144:	20400001 	.word	0x20400001

08009148 <_fflush_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	690b      	ldr	r3, [r1, #16]
 800914c:	4605      	mov	r5, r0
 800914e:	460c      	mov	r4, r1
 8009150:	b913      	cbnz	r3, 8009158 <_fflush_r+0x10>
 8009152:	2500      	movs	r5, #0
 8009154:	4628      	mov	r0, r5
 8009156:	bd38      	pop	{r3, r4, r5, pc}
 8009158:	b118      	cbz	r0, 8009162 <_fflush_r+0x1a>
 800915a:	6983      	ldr	r3, [r0, #24]
 800915c:	b90b      	cbnz	r3, 8009162 <_fflush_r+0x1a>
 800915e:	f000 f887 	bl	8009270 <__sinit>
 8009162:	4b14      	ldr	r3, [pc, #80]	; (80091b4 <_fflush_r+0x6c>)
 8009164:	429c      	cmp	r4, r3
 8009166:	d11b      	bne.n	80091a0 <_fflush_r+0x58>
 8009168:	686c      	ldr	r4, [r5, #4]
 800916a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d0ef      	beq.n	8009152 <_fflush_r+0xa>
 8009172:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009174:	07d0      	lsls	r0, r2, #31
 8009176:	d404      	bmi.n	8009182 <_fflush_r+0x3a>
 8009178:	0599      	lsls	r1, r3, #22
 800917a:	d402      	bmi.n	8009182 <_fflush_r+0x3a>
 800917c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800917e:	f000 f915 	bl	80093ac <__retarget_lock_acquire_recursive>
 8009182:	4628      	mov	r0, r5
 8009184:	4621      	mov	r1, r4
 8009186:	f7ff ff59 	bl	800903c <__sflush_r>
 800918a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800918c:	07da      	lsls	r2, r3, #31
 800918e:	4605      	mov	r5, r0
 8009190:	d4e0      	bmi.n	8009154 <_fflush_r+0xc>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	059b      	lsls	r3, r3, #22
 8009196:	d4dd      	bmi.n	8009154 <_fflush_r+0xc>
 8009198:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800919a:	f000 f908 	bl	80093ae <__retarget_lock_release_recursive>
 800919e:	e7d9      	b.n	8009154 <_fflush_r+0xc>
 80091a0:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <_fflush_r+0x70>)
 80091a2:	429c      	cmp	r4, r3
 80091a4:	d101      	bne.n	80091aa <_fflush_r+0x62>
 80091a6:	68ac      	ldr	r4, [r5, #8]
 80091a8:	e7df      	b.n	800916a <_fflush_r+0x22>
 80091aa:	4b04      	ldr	r3, [pc, #16]	; (80091bc <_fflush_r+0x74>)
 80091ac:	429c      	cmp	r4, r3
 80091ae:	bf08      	it	eq
 80091b0:	68ec      	ldreq	r4, [r5, #12]
 80091b2:	e7da      	b.n	800916a <_fflush_r+0x22>
 80091b4:	0800a81c 	.word	0x0800a81c
 80091b8:	0800a83c 	.word	0x0800a83c
 80091bc:	0800a7fc 	.word	0x0800a7fc

080091c0 <std>:
 80091c0:	2300      	movs	r3, #0
 80091c2:	b510      	push	{r4, lr}
 80091c4:	4604      	mov	r4, r0
 80091c6:	e9c0 3300 	strd	r3, r3, [r0]
 80091ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ce:	6083      	str	r3, [r0, #8]
 80091d0:	8181      	strh	r1, [r0, #12]
 80091d2:	6643      	str	r3, [r0, #100]	; 0x64
 80091d4:	81c2      	strh	r2, [r0, #14]
 80091d6:	6183      	str	r3, [r0, #24]
 80091d8:	4619      	mov	r1, r3
 80091da:	2208      	movs	r2, #8
 80091dc:	305c      	adds	r0, #92	; 0x5c
 80091de:	f7ff fcb5 	bl	8008b4c <memset>
 80091e2:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <std+0x38>)
 80091e4:	6263      	str	r3, [r4, #36]	; 0x24
 80091e6:	4b05      	ldr	r3, [pc, #20]	; (80091fc <std+0x3c>)
 80091e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80091ea:	4b05      	ldr	r3, [pc, #20]	; (8009200 <std+0x40>)
 80091ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091ee:	4b05      	ldr	r3, [pc, #20]	; (8009204 <std+0x44>)
 80091f0:	6224      	str	r4, [r4, #32]
 80091f2:	6323      	str	r3, [r4, #48]	; 0x30
 80091f4:	bd10      	pop	{r4, pc}
 80091f6:	bf00      	nop
 80091f8:	08008cd1 	.word	0x08008cd1
 80091fc:	08008cf7 	.word	0x08008cf7
 8009200:	08008d2f 	.word	0x08008d2f
 8009204:	08008d53 	.word	0x08008d53

08009208 <_cleanup_r>:
 8009208:	4901      	ldr	r1, [pc, #4]	; (8009210 <_cleanup_r+0x8>)
 800920a:	f000 b8af 	b.w	800936c <_fwalk_reent>
 800920e:	bf00      	nop
 8009210:	08009149 	.word	0x08009149

08009214 <__sfmoreglue>:
 8009214:	b570      	push	{r4, r5, r6, lr}
 8009216:	2268      	movs	r2, #104	; 0x68
 8009218:	1e4d      	subs	r5, r1, #1
 800921a:	4355      	muls	r5, r2
 800921c:	460e      	mov	r6, r1
 800921e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009222:	f000 f9a9 	bl	8009578 <_malloc_r>
 8009226:	4604      	mov	r4, r0
 8009228:	b140      	cbz	r0, 800923c <__sfmoreglue+0x28>
 800922a:	2100      	movs	r1, #0
 800922c:	e9c0 1600 	strd	r1, r6, [r0]
 8009230:	300c      	adds	r0, #12
 8009232:	60a0      	str	r0, [r4, #8]
 8009234:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009238:	f7ff fc88 	bl	8008b4c <memset>
 800923c:	4620      	mov	r0, r4
 800923e:	bd70      	pop	{r4, r5, r6, pc}

08009240 <__sfp_lock_acquire>:
 8009240:	4801      	ldr	r0, [pc, #4]	; (8009248 <__sfp_lock_acquire+0x8>)
 8009242:	f000 b8b3 	b.w	80093ac <__retarget_lock_acquire_recursive>
 8009246:	bf00      	nop
 8009248:	2000114d 	.word	0x2000114d

0800924c <__sfp_lock_release>:
 800924c:	4801      	ldr	r0, [pc, #4]	; (8009254 <__sfp_lock_release+0x8>)
 800924e:	f000 b8ae 	b.w	80093ae <__retarget_lock_release_recursive>
 8009252:	bf00      	nop
 8009254:	2000114d 	.word	0x2000114d

08009258 <__sinit_lock_acquire>:
 8009258:	4801      	ldr	r0, [pc, #4]	; (8009260 <__sinit_lock_acquire+0x8>)
 800925a:	f000 b8a7 	b.w	80093ac <__retarget_lock_acquire_recursive>
 800925e:	bf00      	nop
 8009260:	2000114e 	.word	0x2000114e

08009264 <__sinit_lock_release>:
 8009264:	4801      	ldr	r0, [pc, #4]	; (800926c <__sinit_lock_release+0x8>)
 8009266:	f000 b8a2 	b.w	80093ae <__retarget_lock_release_recursive>
 800926a:	bf00      	nop
 800926c:	2000114e 	.word	0x2000114e

08009270 <__sinit>:
 8009270:	b510      	push	{r4, lr}
 8009272:	4604      	mov	r4, r0
 8009274:	f7ff fff0 	bl	8009258 <__sinit_lock_acquire>
 8009278:	69a3      	ldr	r3, [r4, #24]
 800927a:	b11b      	cbz	r3, 8009284 <__sinit+0x14>
 800927c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009280:	f7ff bff0 	b.w	8009264 <__sinit_lock_release>
 8009284:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009288:	6523      	str	r3, [r4, #80]	; 0x50
 800928a:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <__sinit+0x68>)
 800928c:	4a13      	ldr	r2, [pc, #76]	; (80092dc <__sinit+0x6c>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	62a2      	str	r2, [r4, #40]	; 0x28
 8009292:	42a3      	cmp	r3, r4
 8009294:	bf04      	itt	eq
 8009296:	2301      	moveq	r3, #1
 8009298:	61a3      	streq	r3, [r4, #24]
 800929a:	4620      	mov	r0, r4
 800929c:	f000 f820 	bl	80092e0 <__sfp>
 80092a0:	6060      	str	r0, [r4, #4]
 80092a2:	4620      	mov	r0, r4
 80092a4:	f000 f81c 	bl	80092e0 <__sfp>
 80092a8:	60a0      	str	r0, [r4, #8]
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 f818 	bl	80092e0 <__sfp>
 80092b0:	2200      	movs	r2, #0
 80092b2:	60e0      	str	r0, [r4, #12]
 80092b4:	2104      	movs	r1, #4
 80092b6:	6860      	ldr	r0, [r4, #4]
 80092b8:	f7ff ff82 	bl	80091c0 <std>
 80092bc:	68a0      	ldr	r0, [r4, #8]
 80092be:	2201      	movs	r2, #1
 80092c0:	2109      	movs	r1, #9
 80092c2:	f7ff ff7d 	bl	80091c0 <std>
 80092c6:	68e0      	ldr	r0, [r4, #12]
 80092c8:	2202      	movs	r2, #2
 80092ca:	2112      	movs	r1, #18
 80092cc:	f7ff ff78 	bl	80091c0 <std>
 80092d0:	2301      	movs	r3, #1
 80092d2:	61a3      	str	r3, [r4, #24]
 80092d4:	e7d2      	b.n	800927c <__sinit+0xc>
 80092d6:	bf00      	nop
 80092d8:	0800a6f4 	.word	0x0800a6f4
 80092dc:	08009209 	.word	0x08009209

080092e0 <__sfp>:
 80092e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e2:	4607      	mov	r7, r0
 80092e4:	f7ff ffac 	bl	8009240 <__sfp_lock_acquire>
 80092e8:	4b1e      	ldr	r3, [pc, #120]	; (8009364 <__sfp+0x84>)
 80092ea:	681e      	ldr	r6, [r3, #0]
 80092ec:	69b3      	ldr	r3, [r6, #24]
 80092ee:	b913      	cbnz	r3, 80092f6 <__sfp+0x16>
 80092f0:	4630      	mov	r0, r6
 80092f2:	f7ff ffbd 	bl	8009270 <__sinit>
 80092f6:	3648      	adds	r6, #72	; 0x48
 80092f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	d503      	bpl.n	8009308 <__sfp+0x28>
 8009300:	6833      	ldr	r3, [r6, #0]
 8009302:	b30b      	cbz	r3, 8009348 <__sfp+0x68>
 8009304:	6836      	ldr	r6, [r6, #0]
 8009306:	e7f7      	b.n	80092f8 <__sfp+0x18>
 8009308:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800930c:	b9d5      	cbnz	r5, 8009344 <__sfp+0x64>
 800930e:	4b16      	ldr	r3, [pc, #88]	; (8009368 <__sfp+0x88>)
 8009310:	60e3      	str	r3, [r4, #12]
 8009312:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009316:	6665      	str	r5, [r4, #100]	; 0x64
 8009318:	f000 f847 	bl	80093aa <__retarget_lock_init_recursive>
 800931c:	f7ff ff96 	bl	800924c <__sfp_lock_release>
 8009320:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009324:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009328:	6025      	str	r5, [r4, #0]
 800932a:	61a5      	str	r5, [r4, #24]
 800932c:	2208      	movs	r2, #8
 800932e:	4629      	mov	r1, r5
 8009330:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009334:	f7ff fc0a 	bl	8008b4c <memset>
 8009338:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800933c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009340:	4620      	mov	r0, r4
 8009342:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009344:	3468      	adds	r4, #104	; 0x68
 8009346:	e7d9      	b.n	80092fc <__sfp+0x1c>
 8009348:	2104      	movs	r1, #4
 800934a:	4638      	mov	r0, r7
 800934c:	f7ff ff62 	bl	8009214 <__sfmoreglue>
 8009350:	4604      	mov	r4, r0
 8009352:	6030      	str	r0, [r6, #0]
 8009354:	2800      	cmp	r0, #0
 8009356:	d1d5      	bne.n	8009304 <__sfp+0x24>
 8009358:	f7ff ff78 	bl	800924c <__sfp_lock_release>
 800935c:	230c      	movs	r3, #12
 800935e:	603b      	str	r3, [r7, #0]
 8009360:	e7ee      	b.n	8009340 <__sfp+0x60>
 8009362:	bf00      	nop
 8009364:	0800a6f4 	.word	0x0800a6f4
 8009368:	ffff0001 	.word	0xffff0001

0800936c <_fwalk_reent>:
 800936c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009370:	4606      	mov	r6, r0
 8009372:	4688      	mov	r8, r1
 8009374:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009378:	2700      	movs	r7, #0
 800937a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800937e:	f1b9 0901 	subs.w	r9, r9, #1
 8009382:	d505      	bpl.n	8009390 <_fwalk_reent+0x24>
 8009384:	6824      	ldr	r4, [r4, #0]
 8009386:	2c00      	cmp	r4, #0
 8009388:	d1f7      	bne.n	800937a <_fwalk_reent+0xe>
 800938a:	4638      	mov	r0, r7
 800938c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009390:	89ab      	ldrh	r3, [r5, #12]
 8009392:	2b01      	cmp	r3, #1
 8009394:	d907      	bls.n	80093a6 <_fwalk_reent+0x3a>
 8009396:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800939a:	3301      	adds	r3, #1
 800939c:	d003      	beq.n	80093a6 <_fwalk_reent+0x3a>
 800939e:	4629      	mov	r1, r5
 80093a0:	4630      	mov	r0, r6
 80093a2:	47c0      	blx	r8
 80093a4:	4307      	orrs	r7, r0
 80093a6:	3568      	adds	r5, #104	; 0x68
 80093a8:	e7e9      	b.n	800937e <_fwalk_reent+0x12>

080093aa <__retarget_lock_init_recursive>:
 80093aa:	4770      	bx	lr

080093ac <__retarget_lock_acquire_recursive>:
 80093ac:	4770      	bx	lr

080093ae <__retarget_lock_release_recursive>:
 80093ae:	4770      	bx	lr

080093b0 <_lseek_r>:
 80093b0:	b538      	push	{r3, r4, r5, lr}
 80093b2:	4d07      	ldr	r5, [pc, #28]	; (80093d0 <_lseek_r+0x20>)
 80093b4:	4604      	mov	r4, r0
 80093b6:	4608      	mov	r0, r1
 80093b8:	4611      	mov	r1, r2
 80093ba:	2200      	movs	r2, #0
 80093bc:	602a      	str	r2, [r5, #0]
 80093be:	461a      	mov	r2, r3
 80093c0:	f7f8 fe40 	bl	8002044 <_lseek>
 80093c4:	1c43      	adds	r3, r0, #1
 80093c6:	d102      	bne.n	80093ce <_lseek_r+0x1e>
 80093c8:	682b      	ldr	r3, [r5, #0]
 80093ca:	b103      	cbz	r3, 80093ce <_lseek_r+0x1e>
 80093cc:	6023      	str	r3, [r4, #0]
 80093ce:	bd38      	pop	{r3, r4, r5, pc}
 80093d0:	20001158 	.word	0x20001158

080093d4 <__swhatbuf_r>:
 80093d4:	b570      	push	{r4, r5, r6, lr}
 80093d6:	460e      	mov	r6, r1
 80093d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093dc:	2900      	cmp	r1, #0
 80093de:	b096      	sub	sp, #88	; 0x58
 80093e0:	4614      	mov	r4, r2
 80093e2:	461d      	mov	r5, r3
 80093e4:	da08      	bge.n	80093f8 <__swhatbuf_r+0x24>
 80093e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	602a      	str	r2, [r5, #0]
 80093ee:	061a      	lsls	r2, r3, #24
 80093f0:	d410      	bmi.n	8009414 <__swhatbuf_r+0x40>
 80093f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093f6:	e00e      	b.n	8009416 <__swhatbuf_r+0x42>
 80093f8:	466a      	mov	r2, sp
 80093fa:	f001 f84b 	bl	800a494 <_fstat_r>
 80093fe:	2800      	cmp	r0, #0
 8009400:	dbf1      	blt.n	80093e6 <__swhatbuf_r+0x12>
 8009402:	9a01      	ldr	r2, [sp, #4]
 8009404:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009408:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800940c:	425a      	negs	r2, r3
 800940e:	415a      	adcs	r2, r3
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	e7ee      	b.n	80093f2 <__swhatbuf_r+0x1e>
 8009414:	2340      	movs	r3, #64	; 0x40
 8009416:	2000      	movs	r0, #0
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	b016      	add	sp, #88	; 0x58
 800941c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009420 <__smakebuf_r>:
 8009420:	898b      	ldrh	r3, [r1, #12]
 8009422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009424:	079d      	lsls	r5, r3, #30
 8009426:	4606      	mov	r6, r0
 8009428:	460c      	mov	r4, r1
 800942a:	d507      	bpl.n	800943c <__smakebuf_r+0x1c>
 800942c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009430:	6023      	str	r3, [r4, #0]
 8009432:	6123      	str	r3, [r4, #16]
 8009434:	2301      	movs	r3, #1
 8009436:	6163      	str	r3, [r4, #20]
 8009438:	b002      	add	sp, #8
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	ab01      	add	r3, sp, #4
 800943e:	466a      	mov	r2, sp
 8009440:	f7ff ffc8 	bl	80093d4 <__swhatbuf_r>
 8009444:	9900      	ldr	r1, [sp, #0]
 8009446:	4605      	mov	r5, r0
 8009448:	4630      	mov	r0, r6
 800944a:	f000 f895 	bl	8009578 <_malloc_r>
 800944e:	b948      	cbnz	r0, 8009464 <__smakebuf_r+0x44>
 8009450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009454:	059a      	lsls	r2, r3, #22
 8009456:	d4ef      	bmi.n	8009438 <__smakebuf_r+0x18>
 8009458:	f023 0303 	bic.w	r3, r3, #3
 800945c:	f043 0302 	orr.w	r3, r3, #2
 8009460:	81a3      	strh	r3, [r4, #12]
 8009462:	e7e3      	b.n	800942c <__smakebuf_r+0xc>
 8009464:	4b0d      	ldr	r3, [pc, #52]	; (800949c <__smakebuf_r+0x7c>)
 8009466:	62b3      	str	r3, [r6, #40]	; 0x28
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	6020      	str	r0, [r4, #0]
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	9b00      	ldr	r3, [sp, #0]
 8009474:	6163      	str	r3, [r4, #20]
 8009476:	9b01      	ldr	r3, [sp, #4]
 8009478:	6120      	str	r0, [r4, #16]
 800947a:	b15b      	cbz	r3, 8009494 <__smakebuf_r+0x74>
 800947c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009480:	4630      	mov	r0, r6
 8009482:	f001 f819 	bl	800a4b8 <_isatty_r>
 8009486:	b128      	cbz	r0, 8009494 <__smakebuf_r+0x74>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	f023 0303 	bic.w	r3, r3, #3
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	81a3      	strh	r3, [r4, #12]
 8009494:	89a0      	ldrh	r0, [r4, #12]
 8009496:	4305      	orrs	r5, r0
 8009498:	81a5      	strh	r5, [r4, #12]
 800949a:	e7cd      	b.n	8009438 <__smakebuf_r+0x18>
 800949c:	08009209 	.word	0x08009209

080094a0 <_free_r>:
 80094a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80094a2:	2900      	cmp	r1, #0
 80094a4:	d044      	beq.n	8009530 <_free_r+0x90>
 80094a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094aa:	9001      	str	r0, [sp, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f1a1 0404 	sub.w	r4, r1, #4
 80094b2:	bfb8      	it	lt
 80094b4:	18e4      	addlt	r4, r4, r3
 80094b6:	f001 f81d 	bl	800a4f4 <__malloc_lock>
 80094ba:	4a1e      	ldr	r2, [pc, #120]	; (8009534 <_free_r+0x94>)
 80094bc:	9801      	ldr	r0, [sp, #4]
 80094be:	6813      	ldr	r3, [r2, #0]
 80094c0:	b933      	cbnz	r3, 80094d0 <_free_r+0x30>
 80094c2:	6063      	str	r3, [r4, #4]
 80094c4:	6014      	str	r4, [r2, #0]
 80094c6:	b003      	add	sp, #12
 80094c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80094cc:	f001 b818 	b.w	800a500 <__malloc_unlock>
 80094d0:	42a3      	cmp	r3, r4
 80094d2:	d908      	bls.n	80094e6 <_free_r+0x46>
 80094d4:	6825      	ldr	r5, [r4, #0]
 80094d6:	1961      	adds	r1, r4, r5
 80094d8:	428b      	cmp	r3, r1
 80094da:	bf01      	itttt	eq
 80094dc:	6819      	ldreq	r1, [r3, #0]
 80094de:	685b      	ldreq	r3, [r3, #4]
 80094e0:	1949      	addeq	r1, r1, r5
 80094e2:	6021      	streq	r1, [r4, #0]
 80094e4:	e7ed      	b.n	80094c2 <_free_r+0x22>
 80094e6:	461a      	mov	r2, r3
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	b10b      	cbz	r3, 80094f0 <_free_r+0x50>
 80094ec:	42a3      	cmp	r3, r4
 80094ee:	d9fa      	bls.n	80094e6 <_free_r+0x46>
 80094f0:	6811      	ldr	r1, [r2, #0]
 80094f2:	1855      	adds	r5, r2, r1
 80094f4:	42a5      	cmp	r5, r4
 80094f6:	d10b      	bne.n	8009510 <_free_r+0x70>
 80094f8:	6824      	ldr	r4, [r4, #0]
 80094fa:	4421      	add	r1, r4
 80094fc:	1854      	adds	r4, r2, r1
 80094fe:	42a3      	cmp	r3, r4
 8009500:	6011      	str	r1, [r2, #0]
 8009502:	d1e0      	bne.n	80094c6 <_free_r+0x26>
 8009504:	681c      	ldr	r4, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	6053      	str	r3, [r2, #4]
 800950a:	4421      	add	r1, r4
 800950c:	6011      	str	r1, [r2, #0]
 800950e:	e7da      	b.n	80094c6 <_free_r+0x26>
 8009510:	d902      	bls.n	8009518 <_free_r+0x78>
 8009512:	230c      	movs	r3, #12
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	e7d6      	b.n	80094c6 <_free_r+0x26>
 8009518:	6825      	ldr	r5, [r4, #0]
 800951a:	1961      	adds	r1, r4, r5
 800951c:	428b      	cmp	r3, r1
 800951e:	bf04      	itt	eq
 8009520:	6819      	ldreq	r1, [r3, #0]
 8009522:	685b      	ldreq	r3, [r3, #4]
 8009524:	6063      	str	r3, [r4, #4]
 8009526:	bf04      	itt	eq
 8009528:	1949      	addeq	r1, r1, r5
 800952a:	6021      	streq	r1, [r4, #0]
 800952c:	6054      	str	r4, [r2, #4]
 800952e:	e7ca      	b.n	80094c6 <_free_r+0x26>
 8009530:	b003      	add	sp, #12
 8009532:	bd30      	pop	{r4, r5, pc}
 8009534:	20001150 	.word	0x20001150

08009538 <sbrk_aligned>:
 8009538:	b570      	push	{r4, r5, r6, lr}
 800953a:	4e0e      	ldr	r6, [pc, #56]	; (8009574 <sbrk_aligned+0x3c>)
 800953c:	460c      	mov	r4, r1
 800953e:	6831      	ldr	r1, [r6, #0]
 8009540:	4605      	mov	r5, r0
 8009542:	b911      	cbnz	r1, 800954a <sbrk_aligned+0x12>
 8009544:	f000 feb0 	bl	800a2a8 <_sbrk_r>
 8009548:	6030      	str	r0, [r6, #0]
 800954a:	4621      	mov	r1, r4
 800954c:	4628      	mov	r0, r5
 800954e:	f000 feab 	bl	800a2a8 <_sbrk_r>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d00a      	beq.n	800956c <sbrk_aligned+0x34>
 8009556:	1cc4      	adds	r4, r0, #3
 8009558:	f024 0403 	bic.w	r4, r4, #3
 800955c:	42a0      	cmp	r0, r4
 800955e:	d007      	beq.n	8009570 <sbrk_aligned+0x38>
 8009560:	1a21      	subs	r1, r4, r0
 8009562:	4628      	mov	r0, r5
 8009564:	f000 fea0 	bl	800a2a8 <_sbrk_r>
 8009568:	3001      	adds	r0, #1
 800956a:	d101      	bne.n	8009570 <sbrk_aligned+0x38>
 800956c:	f04f 34ff 	mov.w	r4, #4294967295
 8009570:	4620      	mov	r0, r4
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	20001154 	.word	0x20001154

08009578 <_malloc_r>:
 8009578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957c:	1ccd      	adds	r5, r1, #3
 800957e:	f025 0503 	bic.w	r5, r5, #3
 8009582:	3508      	adds	r5, #8
 8009584:	2d0c      	cmp	r5, #12
 8009586:	bf38      	it	cc
 8009588:	250c      	movcc	r5, #12
 800958a:	2d00      	cmp	r5, #0
 800958c:	4607      	mov	r7, r0
 800958e:	db01      	blt.n	8009594 <_malloc_r+0x1c>
 8009590:	42a9      	cmp	r1, r5
 8009592:	d905      	bls.n	80095a0 <_malloc_r+0x28>
 8009594:	230c      	movs	r3, #12
 8009596:	603b      	str	r3, [r7, #0]
 8009598:	2600      	movs	r6, #0
 800959a:	4630      	mov	r0, r6
 800959c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095a0:	4e2e      	ldr	r6, [pc, #184]	; (800965c <_malloc_r+0xe4>)
 80095a2:	f000 ffa7 	bl	800a4f4 <__malloc_lock>
 80095a6:	6833      	ldr	r3, [r6, #0]
 80095a8:	461c      	mov	r4, r3
 80095aa:	bb34      	cbnz	r4, 80095fa <_malloc_r+0x82>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4638      	mov	r0, r7
 80095b0:	f7ff ffc2 	bl	8009538 <sbrk_aligned>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	4604      	mov	r4, r0
 80095b8:	d14d      	bne.n	8009656 <_malloc_r+0xde>
 80095ba:	6834      	ldr	r4, [r6, #0]
 80095bc:	4626      	mov	r6, r4
 80095be:	2e00      	cmp	r6, #0
 80095c0:	d140      	bne.n	8009644 <_malloc_r+0xcc>
 80095c2:	6823      	ldr	r3, [r4, #0]
 80095c4:	4631      	mov	r1, r6
 80095c6:	4638      	mov	r0, r7
 80095c8:	eb04 0803 	add.w	r8, r4, r3
 80095cc:	f000 fe6c 	bl	800a2a8 <_sbrk_r>
 80095d0:	4580      	cmp	r8, r0
 80095d2:	d13a      	bne.n	800964a <_malloc_r+0xd2>
 80095d4:	6821      	ldr	r1, [r4, #0]
 80095d6:	3503      	adds	r5, #3
 80095d8:	1a6d      	subs	r5, r5, r1
 80095da:	f025 0503 	bic.w	r5, r5, #3
 80095de:	3508      	adds	r5, #8
 80095e0:	2d0c      	cmp	r5, #12
 80095e2:	bf38      	it	cc
 80095e4:	250c      	movcc	r5, #12
 80095e6:	4629      	mov	r1, r5
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7ff ffa5 	bl	8009538 <sbrk_aligned>
 80095ee:	3001      	adds	r0, #1
 80095f0:	d02b      	beq.n	800964a <_malloc_r+0xd2>
 80095f2:	6823      	ldr	r3, [r4, #0]
 80095f4:	442b      	add	r3, r5
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	e00e      	b.n	8009618 <_malloc_r+0xa0>
 80095fa:	6822      	ldr	r2, [r4, #0]
 80095fc:	1b52      	subs	r2, r2, r5
 80095fe:	d41e      	bmi.n	800963e <_malloc_r+0xc6>
 8009600:	2a0b      	cmp	r2, #11
 8009602:	d916      	bls.n	8009632 <_malloc_r+0xba>
 8009604:	1961      	adds	r1, r4, r5
 8009606:	42a3      	cmp	r3, r4
 8009608:	6025      	str	r5, [r4, #0]
 800960a:	bf18      	it	ne
 800960c:	6059      	strne	r1, [r3, #4]
 800960e:	6863      	ldr	r3, [r4, #4]
 8009610:	bf08      	it	eq
 8009612:	6031      	streq	r1, [r6, #0]
 8009614:	5162      	str	r2, [r4, r5]
 8009616:	604b      	str	r3, [r1, #4]
 8009618:	4638      	mov	r0, r7
 800961a:	f104 060b 	add.w	r6, r4, #11
 800961e:	f000 ff6f 	bl	800a500 <__malloc_unlock>
 8009622:	f026 0607 	bic.w	r6, r6, #7
 8009626:	1d23      	adds	r3, r4, #4
 8009628:	1af2      	subs	r2, r6, r3
 800962a:	d0b6      	beq.n	800959a <_malloc_r+0x22>
 800962c:	1b9b      	subs	r3, r3, r6
 800962e:	50a3      	str	r3, [r4, r2]
 8009630:	e7b3      	b.n	800959a <_malloc_r+0x22>
 8009632:	6862      	ldr	r2, [r4, #4]
 8009634:	42a3      	cmp	r3, r4
 8009636:	bf0c      	ite	eq
 8009638:	6032      	streq	r2, [r6, #0]
 800963a:	605a      	strne	r2, [r3, #4]
 800963c:	e7ec      	b.n	8009618 <_malloc_r+0xa0>
 800963e:	4623      	mov	r3, r4
 8009640:	6864      	ldr	r4, [r4, #4]
 8009642:	e7b2      	b.n	80095aa <_malloc_r+0x32>
 8009644:	4634      	mov	r4, r6
 8009646:	6876      	ldr	r6, [r6, #4]
 8009648:	e7b9      	b.n	80095be <_malloc_r+0x46>
 800964a:	230c      	movs	r3, #12
 800964c:	603b      	str	r3, [r7, #0]
 800964e:	4638      	mov	r0, r7
 8009650:	f000 ff56 	bl	800a500 <__malloc_unlock>
 8009654:	e7a1      	b.n	800959a <_malloc_r+0x22>
 8009656:	6025      	str	r5, [r4, #0]
 8009658:	e7de      	b.n	8009618 <_malloc_r+0xa0>
 800965a:	bf00      	nop
 800965c:	20001150 	.word	0x20001150

08009660 <_sungetc_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	1c4b      	adds	r3, r1, #1
 8009664:	4614      	mov	r4, r2
 8009666:	d103      	bne.n	8009670 <_sungetc_r+0x10>
 8009668:	f04f 35ff 	mov.w	r5, #4294967295
 800966c:	4628      	mov	r0, r5
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	8993      	ldrh	r3, [r2, #12]
 8009672:	f023 0320 	bic.w	r3, r3, #32
 8009676:	8193      	strh	r3, [r2, #12]
 8009678:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800967a:	6852      	ldr	r2, [r2, #4]
 800967c:	b2cd      	uxtb	r5, r1
 800967e:	b18b      	cbz	r3, 80096a4 <_sungetc_r+0x44>
 8009680:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009682:	4293      	cmp	r3, r2
 8009684:	dd08      	ble.n	8009698 <_sungetc_r+0x38>
 8009686:	6823      	ldr	r3, [r4, #0]
 8009688:	1e5a      	subs	r2, r3, #1
 800968a:	6022      	str	r2, [r4, #0]
 800968c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009690:	6863      	ldr	r3, [r4, #4]
 8009692:	3301      	adds	r3, #1
 8009694:	6063      	str	r3, [r4, #4]
 8009696:	e7e9      	b.n	800966c <_sungetc_r+0xc>
 8009698:	4621      	mov	r1, r4
 800969a:	f000 fec1 	bl	800a420 <__submore>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d0f1      	beq.n	8009686 <_sungetc_r+0x26>
 80096a2:	e7e1      	b.n	8009668 <_sungetc_r+0x8>
 80096a4:	6921      	ldr	r1, [r4, #16]
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	b151      	cbz	r1, 80096c0 <_sungetc_r+0x60>
 80096aa:	4299      	cmp	r1, r3
 80096ac:	d208      	bcs.n	80096c0 <_sungetc_r+0x60>
 80096ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80096b2:	42a9      	cmp	r1, r5
 80096b4:	d104      	bne.n	80096c0 <_sungetc_r+0x60>
 80096b6:	3b01      	subs	r3, #1
 80096b8:	3201      	adds	r2, #1
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	6062      	str	r2, [r4, #4]
 80096be:	e7d5      	b.n	800966c <_sungetc_r+0xc>
 80096c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80096c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096c8:	6363      	str	r3, [r4, #52]	; 0x34
 80096ca:	2303      	movs	r3, #3
 80096cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80096ce:	4623      	mov	r3, r4
 80096d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80096d4:	6023      	str	r3, [r4, #0]
 80096d6:	2301      	movs	r3, #1
 80096d8:	e7dc      	b.n	8009694 <_sungetc_r+0x34>

080096da <__ssrefill_r>:
 80096da:	b510      	push	{r4, lr}
 80096dc:	460c      	mov	r4, r1
 80096de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80096e0:	b169      	cbz	r1, 80096fe <__ssrefill_r+0x24>
 80096e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096e6:	4299      	cmp	r1, r3
 80096e8:	d001      	beq.n	80096ee <__ssrefill_r+0x14>
 80096ea:	f7ff fed9 	bl	80094a0 <_free_r>
 80096ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096f0:	6063      	str	r3, [r4, #4]
 80096f2:	2000      	movs	r0, #0
 80096f4:	6360      	str	r0, [r4, #52]	; 0x34
 80096f6:	b113      	cbz	r3, 80096fe <__ssrefill_r+0x24>
 80096f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80096fa:	6023      	str	r3, [r4, #0]
 80096fc:	bd10      	pop	{r4, pc}
 80096fe:	6923      	ldr	r3, [r4, #16]
 8009700:	6023      	str	r3, [r4, #0]
 8009702:	2300      	movs	r3, #0
 8009704:	6063      	str	r3, [r4, #4]
 8009706:	89a3      	ldrh	r3, [r4, #12]
 8009708:	f043 0320 	orr.w	r3, r3, #32
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	f04f 30ff 	mov.w	r0, #4294967295
 8009712:	e7f3      	b.n	80096fc <__ssrefill_r+0x22>

08009714 <__ssvfiscanf_r>:
 8009714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009718:	460c      	mov	r4, r1
 800971a:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800971e:	2100      	movs	r1, #0
 8009720:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8009724:	49a6      	ldr	r1, [pc, #664]	; (80099c0 <__ssvfiscanf_r+0x2ac>)
 8009726:	91a0      	str	r1, [sp, #640]	; 0x280
 8009728:	f10d 0804 	add.w	r8, sp, #4
 800972c:	49a5      	ldr	r1, [pc, #660]	; (80099c4 <__ssvfiscanf_r+0x2b0>)
 800972e:	4fa6      	ldr	r7, [pc, #664]	; (80099c8 <__ssvfiscanf_r+0x2b4>)
 8009730:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80099cc <__ssvfiscanf_r+0x2b8>
 8009734:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009738:	4606      	mov	r6, r0
 800973a:	91a1      	str	r1, [sp, #644]	; 0x284
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	7813      	ldrb	r3, [r2, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 815a 	beq.w	80099fa <__ssvfiscanf_r+0x2e6>
 8009746:	5dd9      	ldrb	r1, [r3, r7]
 8009748:	f011 0108 	ands.w	r1, r1, #8
 800974c:	f102 0501 	add.w	r5, r2, #1
 8009750:	d019      	beq.n	8009786 <__ssvfiscanf_r+0x72>
 8009752:	6863      	ldr	r3, [r4, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	dd0f      	ble.n	8009778 <__ssvfiscanf_r+0x64>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	781a      	ldrb	r2, [r3, #0]
 800975c:	5cba      	ldrb	r2, [r7, r2]
 800975e:	0712      	lsls	r2, r2, #28
 8009760:	d401      	bmi.n	8009766 <__ssvfiscanf_r+0x52>
 8009762:	462a      	mov	r2, r5
 8009764:	e7eb      	b.n	800973e <__ssvfiscanf_r+0x2a>
 8009766:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009768:	3201      	adds	r2, #1
 800976a:	9245      	str	r2, [sp, #276]	; 0x114
 800976c:	6862      	ldr	r2, [r4, #4]
 800976e:	3301      	adds	r3, #1
 8009770:	3a01      	subs	r2, #1
 8009772:	6062      	str	r2, [r4, #4]
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	e7ec      	b.n	8009752 <__ssvfiscanf_r+0x3e>
 8009778:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800977a:	4621      	mov	r1, r4
 800977c:	4630      	mov	r0, r6
 800977e:	4798      	blx	r3
 8009780:	2800      	cmp	r0, #0
 8009782:	d0e9      	beq.n	8009758 <__ssvfiscanf_r+0x44>
 8009784:	e7ed      	b.n	8009762 <__ssvfiscanf_r+0x4e>
 8009786:	2b25      	cmp	r3, #37	; 0x25
 8009788:	d012      	beq.n	80097b0 <__ssvfiscanf_r+0x9c>
 800978a:	469a      	mov	sl, r3
 800978c:	6863      	ldr	r3, [r4, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	f340 8091 	ble.w	80098b6 <__ssvfiscanf_r+0x1a2>
 8009794:	6822      	ldr	r2, [r4, #0]
 8009796:	7813      	ldrb	r3, [r2, #0]
 8009798:	4553      	cmp	r3, sl
 800979a:	f040 812e 	bne.w	80099fa <__ssvfiscanf_r+0x2e6>
 800979e:	6863      	ldr	r3, [r4, #4]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	6063      	str	r3, [r4, #4]
 80097a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80097a6:	3201      	adds	r2, #1
 80097a8:	3301      	adds	r3, #1
 80097aa:	6022      	str	r2, [r4, #0]
 80097ac:	9345      	str	r3, [sp, #276]	; 0x114
 80097ae:	e7d8      	b.n	8009762 <__ssvfiscanf_r+0x4e>
 80097b0:	9141      	str	r1, [sp, #260]	; 0x104
 80097b2:	9143      	str	r1, [sp, #268]	; 0x10c
 80097b4:	7853      	ldrb	r3, [r2, #1]
 80097b6:	2b2a      	cmp	r3, #42	; 0x2a
 80097b8:	bf02      	ittt	eq
 80097ba:	2310      	moveq	r3, #16
 80097bc:	1c95      	addeq	r5, r2, #2
 80097be:	9341      	streq	r3, [sp, #260]	; 0x104
 80097c0:	220a      	movs	r2, #10
 80097c2:	46aa      	mov	sl, r5
 80097c4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80097c8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80097cc:	2b09      	cmp	r3, #9
 80097ce:	d91d      	bls.n	800980c <__ssvfiscanf_r+0xf8>
 80097d0:	487e      	ldr	r0, [pc, #504]	; (80099cc <__ssvfiscanf_r+0x2b8>)
 80097d2:	2203      	movs	r2, #3
 80097d4:	f7f6 fd14 	bl	8000200 <memchr>
 80097d8:	b140      	cbz	r0, 80097ec <__ssvfiscanf_r+0xd8>
 80097da:	2301      	movs	r3, #1
 80097dc:	eba0 0009 	sub.w	r0, r0, r9
 80097e0:	fa03 f000 	lsl.w	r0, r3, r0
 80097e4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80097e6:	4318      	orrs	r0, r3
 80097e8:	9041      	str	r0, [sp, #260]	; 0x104
 80097ea:	4655      	mov	r5, sl
 80097ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097f0:	2b78      	cmp	r3, #120	; 0x78
 80097f2:	d806      	bhi.n	8009802 <__ssvfiscanf_r+0xee>
 80097f4:	2b57      	cmp	r3, #87	; 0x57
 80097f6:	d810      	bhi.n	800981a <__ssvfiscanf_r+0x106>
 80097f8:	2b25      	cmp	r3, #37	; 0x25
 80097fa:	d0c6      	beq.n	800978a <__ssvfiscanf_r+0x76>
 80097fc:	d856      	bhi.n	80098ac <__ssvfiscanf_r+0x198>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d064      	beq.n	80098cc <__ssvfiscanf_r+0x1b8>
 8009802:	2303      	movs	r3, #3
 8009804:	9347      	str	r3, [sp, #284]	; 0x11c
 8009806:	230a      	movs	r3, #10
 8009808:	9342      	str	r3, [sp, #264]	; 0x108
 800980a:	e071      	b.n	80098f0 <__ssvfiscanf_r+0x1dc>
 800980c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800980e:	fb02 1103 	mla	r1, r2, r3, r1
 8009812:	3930      	subs	r1, #48	; 0x30
 8009814:	9143      	str	r1, [sp, #268]	; 0x10c
 8009816:	4655      	mov	r5, sl
 8009818:	e7d3      	b.n	80097c2 <__ssvfiscanf_r+0xae>
 800981a:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800981e:	2a20      	cmp	r2, #32
 8009820:	d8ef      	bhi.n	8009802 <__ssvfiscanf_r+0xee>
 8009822:	a101      	add	r1, pc, #4	; (adr r1, 8009828 <__ssvfiscanf_r+0x114>)
 8009824:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009828:	080098db 	.word	0x080098db
 800982c:	08009803 	.word	0x08009803
 8009830:	08009803 	.word	0x08009803
 8009834:	08009939 	.word	0x08009939
 8009838:	08009803 	.word	0x08009803
 800983c:	08009803 	.word	0x08009803
 8009840:	08009803 	.word	0x08009803
 8009844:	08009803 	.word	0x08009803
 8009848:	08009803 	.word	0x08009803
 800984c:	08009803 	.word	0x08009803
 8009850:	08009803 	.word	0x08009803
 8009854:	0800994f 	.word	0x0800994f
 8009858:	08009925 	.word	0x08009925
 800985c:	080098b3 	.word	0x080098b3
 8009860:	080098b3 	.word	0x080098b3
 8009864:	080098b3 	.word	0x080098b3
 8009868:	08009803 	.word	0x08009803
 800986c:	08009929 	.word	0x08009929
 8009870:	08009803 	.word	0x08009803
 8009874:	08009803 	.word	0x08009803
 8009878:	08009803 	.word	0x08009803
 800987c:	08009803 	.word	0x08009803
 8009880:	0800995f 	.word	0x0800995f
 8009884:	08009931 	.word	0x08009931
 8009888:	080098d3 	.word	0x080098d3
 800988c:	08009803 	.word	0x08009803
 8009890:	08009803 	.word	0x08009803
 8009894:	0800995b 	.word	0x0800995b
 8009898:	08009803 	.word	0x08009803
 800989c:	08009925 	.word	0x08009925
 80098a0:	08009803 	.word	0x08009803
 80098a4:	08009803 	.word	0x08009803
 80098a8:	080098db 	.word	0x080098db
 80098ac:	3b45      	subs	r3, #69	; 0x45
 80098ae:	2b02      	cmp	r3, #2
 80098b0:	d8a7      	bhi.n	8009802 <__ssvfiscanf_r+0xee>
 80098b2:	2305      	movs	r3, #5
 80098b4:	e01b      	b.n	80098ee <__ssvfiscanf_r+0x1da>
 80098b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098b8:	4621      	mov	r1, r4
 80098ba:	4630      	mov	r0, r6
 80098bc:	4798      	blx	r3
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f af68 	beq.w	8009794 <__ssvfiscanf_r+0x80>
 80098c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f040 808d 	bne.w	80099e6 <__ssvfiscanf_r+0x2d2>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e08f      	b.n	80099f2 <__ssvfiscanf_r+0x2de>
 80098d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80098d4:	f042 0220 	orr.w	r2, r2, #32
 80098d8:	9241      	str	r2, [sp, #260]	; 0x104
 80098da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80098dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098e0:	9241      	str	r2, [sp, #260]	; 0x104
 80098e2:	2210      	movs	r2, #16
 80098e4:	2b6f      	cmp	r3, #111	; 0x6f
 80098e6:	9242      	str	r2, [sp, #264]	; 0x108
 80098e8:	bf34      	ite	cc
 80098ea:	2303      	movcc	r3, #3
 80098ec:	2304      	movcs	r3, #4
 80098ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80098f0:	6863      	ldr	r3, [r4, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	dd42      	ble.n	800997c <__ssvfiscanf_r+0x268>
 80098f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098f8:	0659      	lsls	r1, r3, #25
 80098fa:	d404      	bmi.n	8009906 <__ssvfiscanf_r+0x1f2>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	781a      	ldrb	r2, [r3, #0]
 8009900:	5cba      	ldrb	r2, [r7, r2]
 8009902:	0712      	lsls	r2, r2, #28
 8009904:	d441      	bmi.n	800998a <__ssvfiscanf_r+0x276>
 8009906:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009908:	2b02      	cmp	r3, #2
 800990a:	dc50      	bgt.n	80099ae <__ssvfiscanf_r+0x29a>
 800990c:	466b      	mov	r3, sp
 800990e:	4622      	mov	r2, r4
 8009910:	a941      	add	r1, sp, #260	; 0x104
 8009912:	4630      	mov	r0, r6
 8009914:	f000 fb64 	bl	8009fe0 <_scanf_chars>
 8009918:	2801      	cmp	r0, #1
 800991a:	d06e      	beq.n	80099fa <__ssvfiscanf_r+0x2e6>
 800991c:	2802      	cmp	r0, #2
 800991e:	f47f af20 	bne.w	8009762 <__ssvfiscanf_r+0x4e>
 8009922:	e7cf      	b.n	80098c4 <__ssvfiscanf_r+0x1b0>
 8009924:	220a      	movs	r2, #10
 8009926:	e7dd      	b.n	80098e4 <__ssvfiscanf_r+0x1d0>
 8009928:	2300      	movs	r3, #0
 800992a:	9342      	str	r3, [sp, #264]	; 0x108
 800992c:	2303      	movs	r3, #3
 800992e:	e7de      	b.n	80098ee <__ssvfiscanf_r+0x1da>
 8009930:	2308      	movs	r3, #8
 8009932:	9342      	str	r3, [sp, #264]	; 0x108
 8009934:	2304      	movs	r3, #4
 8009936:	e7da      	b.n	80098ee <__ssvfiscanf_r+0x1da>
 8009938:	4629      	mov	r1, r5
 800993a:	4640      	mov	r0, r8
 800993c:	f000 fcc4 	bl	800a2c8 <__sccl>
 8009940:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009946:	9341      	str	r3, [sp, #260]	; 0x104
 8009948:	4605      	mov	r5, r0
 800994a:	2301      	movs	r3, #1
 800994c:	e7cf      	b.n	80098ee <__ssvfiscanf_r+0x1da>
 800994e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009954:	9341      	str	r3, [sp, #260]	; 0x104
 8009956:	2300      	movs	r3, #0
 8009958:	e7c9      	b.n	80098ee <__ssvfiscanf_r+0x1da>
 800995a:	2302      	movs	r3, #2
 800995c:	e7c7      	b.n	80098ee <__ssvfiscanf_r+0x1da>
 800995e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009960:	06c3      	lsls	r3, r0, #27
 8009962:	f53f aefe 	bmi.w	8009762 <__ssvfiscanf_r+0x4e>
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800996a:	1d19      	adds	r1, r3, #4
 800996c:	9100      	str	r1, [sp, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f010 0f01 	tst.w	r0, #1
 8009974:	bf14      	ite	ne
 8009976:	801a      	strhne	r2, [r3, #0]
 8009978:	601a      	streq	r2, [r3, #0]
 800997a:	e6f2      	b.n	8009762 <__ssvfiscanf_r+0x4e>
 800997c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800997e:	4621      	mov	r1, r4
 8009980:	4630      	mov	r0, r6
 8009982:	4798      	blx	r3
 8009984:	2800      	cmp	r0, #0
 8009986:	d0b6      	beq.n	80098f6 <__ssvfiscanf_r+0x1e2>
 8009988:	e79c      	b.n	80098c4 <__ssvfiscanf_r+0x1b0>
 800998a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800998c:	3201      	adds	r2, #1
 800998e:	9245      	str	r2, [sp, #276]	; 0x114
 8009990:	6862      	ldr	r2, [r4, #4]
 8009992:	3a01      	subs	r2, #1
 8009994:	2a00      	cmp	r2, #0
 8009996:	6062      	str	r2, [r4, #4]
 8009998:	dd02      	ble.n	80099a0 <__ssvfiscanf_r+0x28c>
 800999a:	3301      	adds	r3, #1
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	e7ad      	b.n	80098fc <__ssvfiscanf_r+0x1e8>
 80099a0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099a2:	4621      	mov	r1, r4
 80099a4:	4630      	mov	r0, r6
 80099a6:	4798      	blx	r3
 80099a8:	2800      	cmp	r0, #0
 80099aa:	d0a7      	beq.n	80098fc <__ssvfiscanf_r+0x1e8>
 80099ac:	e78a      	b.n	80098c4 <__ssvfiscanf_r+0x1b0>
 80099ae:	2b04      	cmp	r3, #4
 80099b0:	dc0e      	bgt.n	80099d0 <__ssvfiscanf_r+0x2bc>
 80099b2:	466b      	mov	r3, sp
 80099b4:	4622      	mov	r2, r4
 80099b6:	a941      	add	r1, sp, #260	; 0x104
 80099b8:	4630      	mov	r0, r6
 80099ba:	f000 fb6b 	bl	800a094 <_scanf_i>
 80099be:	e7ab      	b.n	8009918 <__ssvfiscanf_r+0x204>
 80099c0:	08009661 	.word	0x08009661
 80099c4:	080096db 	.word	0x080096db
 80099c8:	0800a6f9 	.word	0x0800a6f9
 80099cc:	0800a85c 	.word	0x0800a85c
 80099d0:	4b0b      	ldr	r3, [pc, #44]	; (8009a00 <__ssvfiscanf_r+0x2ec>)
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	f43f aec5 	beq.w	8009762 <__ssvfiscanf_r+0x4e>
 80099d8:	466b      	mov	r3, sp
 80099da:	4622      	mov	r2, r4
 80099dc:	a941      	add	r1, sp, #260	; 0x104
 80099de:	4630      	mov	r0, r6
 80099e0:	f3af 8000 	nop.w
 80099e4:	e798      	b.n	8009918 <__ssvfiscanf_r+0x204>
 80099e6:	89a3      	ldrh	r3, [r4, #12]
 80099e8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80099ec:	bf18      	it	ne
 80099ee:	f04f 30ff 	movne.w	r0, #4294967295
 80099f2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80099f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099fa:	9844      	ldr	r0, [sp, #272]	; 0x110
 80099fc:	e7f9      	b.n	80099f2 <__ssvfiscanf_r+0x2de>
 80099fe:	bf00      	nop
 8009a00:	00000000 	.word	0x00000000

08009a04 <__sfputc_r>:
 8009a04:	6893      	ldr	r3, [r2, #8]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	b410      	push	{r4}
 8009a0c:	6093      	str	r3, [r2, #8]
 8009a0e:	da08      	bge.n	8009a22 <__sfputc_r+0x1e>
 8009a10:	6994      	ldr	r4, [r2, #24]
 8009a12:	42a3      	cmp	r3, r4
 8009a14:	db01      	blt.n	8009a1a <__sfputc_r+0x16>
 8009a16:	290a      	cmp	r1, #10
 8009a18:	d103      	bne.n	8009a22 <__sfputc_r+0x1e>
 8009a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1e:	f7ff ba2b 	b.w	8008e78 <__swbuf_r>
 8009a22:	6813      	ldr	r3, [r2, #0]
 8009a24:	1c58      	adds	r0, r3, #1
 8009a26:	6010      	str	r0, [r2, #0]
 8009a28:	7019      	strb	r1, [r3, #0]
 8009a2a:	4608      	mov	r0, r1
 8009a2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <__sfputs_r>:
 8009a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a34:	4606      	mov	r6, r0
 8009a36:	460f      	mov	r7, r1
 8009a38:	4614      	mov	r4, r2
 8009a3a:	18d5      	adds	r5, r2, r3
 8009a3c:	42ac      	cmp	r4, r5
 8009a3e:	d101      	bne.n	8009a44 <__sfputs_r+0x12>
 8009a40:	2000      	movs	r0, #0
 8009a42:	e007      	b.n	8009a54 <__sfputs_r+0x22>
 8009a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a48:	463a      	mov	r2, r7
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7ff ffda 	bl	8009a04 <__sfputc_r>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d1f3      	bne.n	8009a3c <__sfputs_r+0xa>
 8009a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a58 <_vfiprintf_r>:
 8009a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a5c:	460d      	mov	r5, r1
 8009a5e:	b09d      	sub	sp, #116	; 0x74
 8009a60:	4614      	mov	r4, r2
 8009a62:	4698      	mov	r8, r3
 8009a64:	4606      	mov	r6, r0
 8009a66:	b118      	cbz	r0, 8009a70 <_vfiprintf_r+0x18>
 8009a68:	6983      	ldr	r3, [r0, #24]
 8009a6a:	b90b      	cbnz	r3, 8009a70 <_vfiprintf_r+0x18>
 8009a6c:	f7ff fc00 	bl	8009270 <__sinit>
 8009a70:	4b89      	ldr	r3, [pc, #548]	; (8009c98 <_vfiprintf_r+0x240>)
 8009a72:	429d      	cmp	r5, r3
 8009a74:	d11b      	bne.n	8009aae <_vfiprintf_r+0x56>
 8009a76:	6875      	ldr	r5, [r6, #4]
 8009a78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7a:	07d9      	lsls	r1, r3, #31
 8009a7c:	d405      	bmi.n	8009a8a <_vfiprintf_r+0x32>
 8009a7e:	89ab      	ldrh	r3, [r5, #12]
 8009a80:	059a      	lsls	r2, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_vfiprintf_r+0x32>
 8009a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a86:	f7ff fc91 	bl	80093ac <__retarget_lock_acquire_recursive>
 8009a8a:	89ab      	ldrh	r3, [r5, #12]
 8009a8c:	071b      	lsls	r3, r3, #28
 8009a8e:	d501      	bpl.n	8009a94 <_vfiprintf_r+0x3c>
 8009a90:	692b      	ldr	r3, [r5, #16]
 8009a92:	b9eb      	cbnz	r3, 8009ad0 <_vfiprintf_r+0x78>
 8009a94:	4629      	mov	r1, r5
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff fa52 	bl	8008f40 <__swsetup_r>
 8009a9c:	b1c0      	cbz	r0, 8009ad0 <_vfiprintf_r+0x78>
 8009a9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa0:	07dc      	lsls	r4, r3, #31
 8009aa2:	d50e      	bpl.n	8009ac2 <_vfiprintf_r+0x6a>
 8009aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa8:	b01d      	add	sp, #116	; 0x74
 8009aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aae:	4b7b      	ldr	r3, [pc, #492]	; (8009c9c <_vfiprintf_r+0x244>)
 8009ab0:	429d      	cmp	r5, r3
 8009ab2:	d101      	bne.n	8009ab8 <_vfiprintf_r+0x60>
 8009ab4:	68b5      	ldr	r5, [r6, #8]
 8009ab6:	e7df      	b.n	8009a78 <_vfiprintf_r+0x20>
 8009ab8:	4b79      	ldr	r3, [pc, #484]	; (8009ca0 <_vfiprintf_r+0x248>)
 8009aba:	429d      	cmp	r5, r3
 8009abc:	bf08      	it	eq
 8009abe:	68f5      	ldreq	r5, [r6, #12]
 8009ac0:	e7da      	b.n	8009a78 <_vfiprintf_r+0x20>
 8009ac2:	89ab      	ldrh	r3, [r5, #12]
 8009ac4:	0598      	lsls	r0, r3, #22
 8009ac6:	d4ed      	bmi.n	8009aa4 <_vfiprintf_r+0x4c>
 8009ac8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aca:	f7ff fc70 	bl	80093ae <__retarget_lock_release_recursive>
 8009ace:	e7e9      	b.n	8009aa4 <_vfiprintf_r+0x4c>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad4:	2320      	movs	r3, #32
 8009ad6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ada:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ade:	2330      	movs	r3, #48	; 0x30
 8009ae0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009ca4 <_vfiprintf_r+0x24c>
 8009ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ae8:	f04f 0901 	mov.w	r9, #1
 8009aec:	4623      	mov	r3, r4
 8009aee:	469a      	mov	sl, r3
 8009af0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af4:	b10a      	cbz	r2, 8009afa <_vfiprintf_r+0xa2>
 8009af6:	2a25      	cmp	r2, #37	; 0x25
 8009af8:	d1f9      	bne.n	8009aee <_vfiprintf_r+0x96>
 8009afa:	ebba 0b04 	subs.w	fp, sl, r4
 8009afe:	d00b      	beq.n	8009b18 <_vfiprintf_r+0xc0>
 8009b00:	465b      	mov	r3, fp
 8009b02:	4622      	mov	r2, r4
 8009b04:	4629      	mov	r1, r5
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7ff ff93 	bl	8009a32 <__sfputs_r>
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f000 80aa 	beq.w	8009c66 <_vfiprintf_r+0x20e>
 8009b12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b14:	445a      	add	r2, fp
 8009b16:	9209      	str	r2, [sp, #36]	; 0x24
 8009b18:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	f000 80a2 	beq.w	8009c66 <_vfiprintf_r+0x20e>
 8009b22:	2300      	movs	r3, #0
 8009b24:	f04f 32ff 	mov.w	r2, #4294967295
 8009b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b2c:	f10a 0a01 	add.w	sl, sl, #1
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	9307      	str	r3, [sp, #28]
 8009b34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b38:	931a      	str	r3, [sp, #104]	; 0x68
 8009b3a:	4654      	mov	r4, sl
 8009b3c:	2205      	movs	r2, #5
 8009b3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b42:	4858      	ldr	r0, [pc, #352]	; (8009ca4 <_vfiprintf_r+0x24c>)
 8009b44:	f7f6 fb5c 	bl	8000200 <memchr>
 8009b48:	9a04      	ldr	r2, [sp, #16]
 8009b4a:	b9d8      	cbnz	r0, 8009b84 <_vfiprintf_r+0x12c>
 8009b4c:	06d1      	lsls	r1, r2, #27
 8009b4e:	bf44      	itt	mi
 8009b50:	2320      	movmi	r3, #32
 8009b52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b56:	0713      	lsls	r3, r2, #28
 8009b58:	bf44      	itt	mi
 8009b5a:	232b      	movmi	r3, #43	; 0x2b
 8009b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b60:	f89a 3000 	ldrb.w	r3, [sl]
 8009b64:	2b2a      	cmp	r3, #42	; 0x2a
 8009b66:	d015      	beq.n	8009b94 <_vfiprintf_r+0x13c>
 8009b68:	9a07      	ldr	r2, [sp, #28]
 8009b6a:	4654      	mov	r4, sl
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4621      	mov	r1, r4
 8009b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b78:	3b30      	subs	r3, #48	; 0x30
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	d94e      	bls.n	8009c1c <_vfiprintf_r+0x1c4>
 8009b7e:	b1b0      	cbz	r0, 8009bae <_vfiprintf_r+0x156>
 8009b80:	9207      	str	r2, [sp, #28]
 8009b82:	e014      	b.n	8009bae <_vfiprintf_r+0x156>
 8009b84:	eba0 0308 	sub.w	r3, r0, r8
 8009b88:	fa09 f303 	lsl.w	r3, r9, r3
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	9304      	str	r3, [sp, #16]
 8009b90:	46a2      	mov	sl, r4
 8009b92:	e7d2      	b.n	8009b3a <_vfiprintf_r+0xe2>
 8009b94:	9b03      	ldr	r3, [sp, #12]
 8009b96:	1d19      	adds	r1, r3, #4
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	9103      	str	r1, [sp, #12]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	bfbb      	ittet	lt
 8009ba0:	425b      	neglt	r3, r3
 8009ba2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ba6:	9307      	strge	r3, [sp, #28]
 8009ba8:	9307      	strlt	r3, [sp, #28]
 8009baa:	bfb8      	it	lt
 8009bac:	9204      	strlt	r2, [sp, #16]
 8009bae:	7823      	ldrb	r3, [r4, #0]
 8009bb0:	2b2e      	cmp	r3, #46	; 0x2e
 8009bb2:	d10c      	bne.n	8009bce <_vfiprintf_r+0x176>
 8009bb4:	7863      	ldrb	r3, [r4, #1]
 8009bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8009bb8:	d135      	bne.n	8009c26 <_vfiprintf_r+0x1ce>
 8009bba:	9b03      	ldr	r3, [sp, #12]
 8009bbc:	1d1a      	adds	r2, r3, #4
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	9203      	str	r2, [sp, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfb8      	it	lt
 8009bc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bca:	3402      	adds	r4, #2
 8009bcc:	9305      	str	r3, [sp, #20]
 8009bce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009cb4 <_vfiprintf_r+0x25c>
 8009bd2:	7821      	ldrb	r1, [r4, #0]
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	f7f6 fb12 	bl	8000200 <memchr>
 8009bdc:	b140      	cbz	r0, 8009bf0 <_vfiprintf_r+0x198>
 8009bde:	2340      	movs	r3, #64	; 0x40
 8009be0:	eba0 000a 	sub.w	r0, r0, sl
 8009be4:	fa03 f000 	lsl.w	r0, r3, r0
 8009be8:	9b04      	ldr	r3, [sp, #16]
 8009bea:	4303      	orrs	r3, r0
 8009bec:	3401      	adds	r4, #1
 8009bee:	9304      	str	r3, [sp, #16]
 8009bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bf4:	482c      	ldr	r0, [pc, #176]	; (8009ca8 <_vfiprintf_r+0x250>)
 8009bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bfa:	2206      	movs	r2, #6
 8009bfc:	f7f6 fb00 	bl	8000200 <memchr>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d03f      	beq.n	8009c84 <_vfiprintf_r+0x22c>
 8009c04:	4b29      	ldr	r3, [pc, #164]	; (8009cac <_vfiprintf_r+0x254>)
 8009c06:	bb1b      	cbnz	r3, 8009c50 <_vfiprintf_r+0x1f8>
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	3307      	adds	r3, #7
 8009c0c:	f023 0307 	bic.w	r3, r3, #7
 8009c10:	3308      	adds	r3, #8
 8009c12:	9303      	str	r3, [sp, #12]
 8009c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c16:	443b      	add	r3, r7
 8009c18:	9309      	str	r3, [sp, #36]	; 0x24
 8009c1a:	e767      	b.n	8009aec <_vfiprintf_r+0x94>
 8009c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c20:	460c      	mov	r4, r1
 8009c22:	2001      	movs	r0, #1
 8009c24:	e7a5      	b.n	8009b72 <_vfiprintf_r+0x11a>
 8009c26:	2300      	movs	r3, #0
 8009c28:	3401      	adds	r4, #1
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	f04f 0c0a 	mov.w	ip, #10
 8009c32:	4620      	mov	r0, r4
 8009c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c38:	3a30      	subs	r2, #48	; 0x30
 8009c3a:	2a09      	cmp	r2, #9
 8009c3c:	d903      	bls.n	8009c46 <_vfiprintf_r+0x1ee>
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d0c5      	beq.n	8009bce <_vfiprintf_r+0x176>
 8009c42:	9105      	str	r1, [sp, #20]
 8009c44:	e7c3      	b.n	8009bce <_vfiprintf_r+0x176>
 8009c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e7f0      	b.n	8009c32 <_vfiprintf_r+0x1da>
 8009c50:	ab03      	add	r3, sp, #12
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	462a      	mov	r2, r5
 8009c56:	4b16      	ldr	r3, [pc, #88]	; (8009cb0 <_vfiprintf_r+0x258>)
 8009c58:	a904      	add	r1, sp, #16
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	f3af 8000 	nop.w
 8009c60:	4607      	mov	r7, r0
 8009c62:	1c78      	adds	r0, r7, #1
 8009c64:	d1d6      	bne.n	8009c14 <_vfiprintf_r+0x1bc>
 8009c66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c68:	07d9      	lsls	r1, r3, #31
 8009c6a:	d405      	bmi.n	8009c78 <_vfiprintf_r+0x220>
 8009c6c:	89ab      	ldrh	r3, [r5, #12]
 8009c6e:	059a      	lsls	r2, r3, #22
 8009c70:	d402      	bmi.n	8009c78 <_vfiprintf_r+0x220>
 8009c72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c74:	f7ff fb9b 	bl	80093ae <__retarget_lock_release_recursive>
 8009c78:	89ab      	ldrh	r3, [r5, #12]
 8009c7a:	065b      	lsls	r3, r3, #25
 8009c7c:	f53f af12 	bmi.w	8009aa4 <_vfiprintf_r+0x4c>
 8009c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c82:	e711      	b.n	8009aa8 <_vfiprintf_r+0x50>
 8009c84:	ab03      	add	r3, sp, #12
 8009c86:	9300      	str	r3, [sp, #0]
 8009c88:	462a      	mov	r2, r5
 8009c8a:	4b09      	ldr	r3, [pc, #36]	; (8009cb0 <_vfiprintf_r+0x258>)
 8009c8c:	a904      	add	r1, sp, #16
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f000 f880 	bl	8009d94 <_printf_i>
 8009c94:	e7e4      	b.n	8009c60 <_vfiprintf_r+0x208>
 8009c96:	bf00      	nop
 8009c98:	0800a81c 	.word	0x0800a81c
 8009c9c:	0800a83c 	.word	0x0800a83c
 8009ca0:	0800a7fc 	.word	0x0800a7fc
 8009ca4:	0800a860 	.word	0x0800a860
 8009ca8:	0800a866 	.word	0x0800a866
 8009cac:	00000000 	.word	0x00000000
 8009cb0:	08009a33 	.word	0x08009a33
 8009cb4:	0800a85c 	.word	0x0800a85c

08009cb8 <_printf_common>:
 8009cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	4616      	mov	r6, r2
 8009cbe:	4699      	mov	r9, r3
 8009cc0:	688a      	ldr	r2, [r1, #8]
 8009cc2:	690b      	ldr	r3, [r1, #16]
 8009cc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	bfb8      	it	lt
 8009ccc:	4613      	movlt	r3, r2
 8009cce:	6033      	str	r3, [r6, #0]
 8009cd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cd4:	4607      	mov	r7, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	b10a      	cbz	r2, 8009cde <_printf_common+0x26>
 8009cda:	3301      	adds	r3, #1
 8009cdc:	6033      	str	r3, [r6, #0]
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	0699      	lsls	r1, r3, #26
 8009ce2:	bf42      	ittt	mi
 8009ce4:	6833      	ldrmi	r3, [r6, #0]
 8009ce6:	3302      	addmi	r3, #2
 8009ce8:	6033      	strmi	r3, [r6, #0]
 8009cea:	6825      	ldr	r5, [r4, #0]
 8009cec:	f015 0506 	ands.w	r5, r5, #6
 8009cf0:	d106      	bne.n	8009d00 <_printf_common+0x48>
 8009cf2:	f104 0a19 	add.w	sl, r4, #25
 8009cf6:	68e3      	ldr	r3, [r4, #12]
 8009cf8:	6832      	ldr	r2, [r6, #0]
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	42ab      	cmp	r3, r5
 8009cfe:	dc26      	bgt.n	8009d4e <_printf_common+0x96>
 8009d00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d04:	1e13      	subs	r3, r2, #0
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	bf18      	it	ne
 8009d0a:	2301      	movne	r3, #1
 8009d0c:	0692      	lsls	r2, r2, #26
 8009d0e:	d42b      	bmi.n	8009d68 <_printf_common+0xb0>
 8009d10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d14:	4649      	mov	r1, r9
 8009d16:	4638      	mov	r0, r7
 8009d18:	47c0      	blx	r8
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d01e      	beq.n	8009d5c <_printf_common+0xa4>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	68e5      	ldr	r5, [r4, #12]
 8009d22:	6832      	ldr	r2, [r6, #0]
 8009d24:	f003 0306 	and.w	r3, r3, #6
 8009d28:	2b04      	cmp	r3, #4
 8009d2a:	bf08      	it	eq
 8009d2c:	1aad      	subeq	r5, r5, r2
 8009d2e:	68a3      	ldr	r3, [r4, #8]
 8009d30:	6922      	ldr	r2, [r4, #16]
 8009d32:	bf0c      	ite	eq
 8009d34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d38:	2500      	movne	r5, #0
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	bfc4      	itt	gt
 8009d3e:	1a9b      	subgt	r3, r3, r2
 8009d40:	18ed      	addgt	r5, r5, r3
 8009d42:	2600      	movs	r6, #0
 8009d44:	341a      	adds	r4, #26
 8009d46:	42b5      	cmp	r5, r6
 8009d48:	d11a      	bne.n	8009d80 <_printf_common+0xc8>
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	e008      	b.n	8009d60 <_printf_common+0xa8>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	4652      	mov	r2, sl
 8009d52:	4649      	mov	r1, r9
 8009d54:	4638      	mov	r0, r7
 8009d56:	47c0      	blx	r8
 8009d58:	3001      	adds	r0, #1
 8009d5a:	d103      	bne.n	8009d64 <_printf_common+0xac>
 8009d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d64:	3501      	adds	r5, #1
 8009d66:	e7c6      	b.n	8009cf6 <_printf_common+0x3e>
 8009d68:	18e1      	adds	r1, r4, r3
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	2030      	movs	r0, #48	; 0x30
 8009d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d72:	4422      	add	r2, r4
 8009d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	e7c7      	b.n	8009d10 <_printf_common+0x58>
 8009d80:	2301      	movs	r3, #1
 8009d82:	4622      	mov	r2, r4
 8009d84:	4649      	mov	r1, r9
 8009d86:	4638      	mov	r0, r7
 8009d88:	47c0      	blx	r8
 8009d8a:	3001      	adds	r0, #1
 8009d8c:	d0e6      	beq.n	8009d5c <_printf_common+0xa4>
 8009d8e:	3601      	adds	r6, #1
 8009d90:	e7d9      	b.n	8009d46 <_printf_common+0x8e>
	...

08009d94 <_printf_i>:
 8009d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d98:	7e0f      	ldrb	r7, [r1, #24]
 8009d9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d9c:	2f78      	cmp	r7, #120	; 0x78
 8009d9e:	4691      	mov	r9, r2
 8009da0:	4680      	mov	r8, r0
 8009da2:	460c      	mov	r4, r1
 8009da4:	469a      	mov	sl, r3
 8009da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009daa:	d807      	bhi.n	8009dbc <_printf_i+0x28>
 8009dac:	2f62      	cmp	r7, #98	; 0x62
 8009dae:	d80a      	bhi.n	8009dc6 <_printf_i+0x32>
 8009db0:	2f00      	cmp	r7, #0
 8009db2:	f000 80d8 	beq.w	8009f66 <_printf_i+0x1d2>
 8009db6:	2f58      	cmp	r7, #88	; 0x58
 8009db8:	f000 80a3 	beq.w	8009f02 <_printf_i+0x16e>
 8009dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009dc4:	e03a      	b.n	8009e3c <_printf_i+0xa8>
 8009dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dca:	2b15      	cmp	r3, #21
 8009dcc:	d8f6      	bhi.n	8009dbc <_printf_i+0x28>
 8009dce:	a101      	add	r1, pc, #4	; (adr r1, 8009dd4 <_printf_i+0x40>)
 8009dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009dd4:	08009e2d 	.word	0x08009e2d
 8009dd8:	08009e41 	.word	0x08009e41
 8009ddc:	08009dbd 	.word	0x08009dbd
 8009de0:	08009dbd 	.word	0x08009dbd
 8009de4:	08009dbd 	.word	0x08009dbd
 8009de8:	08009dbd 	.word	0x08009dbd
 8009dec:	08009e41 	.word	0x08009e41
 8009df0:	08009dbd 	.word	0x08009dbd
 8009df4:	08009dbd 	.word	0x08009dbd
 8009df8:	08009dbd 	.word	0x08009dbd
 8009dfc:	08009dbd 	.word	0x08009dbd
 8009e00:	08009f4d 	.word	0x08009f4d
 8009e04:	08009e71 	.word	0x08009e71
 8009e08:	08009f2f 	.word	0x08009f2f
 8009e0c:	08009dbd 	.word	0x08009dbd
 8009e10:	08009dbd 	.word	0x08009dbd
 8009e14:	08009f6f 	.word	0x08009f6f
 8009e18:	08009dbd 	.word	0x08009dbd
 8009e1c:	08009e71 	.word	0x08009e71
 8009e20:	08009dbd 	.word	0x08009dbd
 8009e24:	08009dbd 	.word	0x08009dbd
 8009e28:	08009f37 	.word	0x08009f37
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	602a      	str	r2, [r5, #0]
 8009e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e0a3      	b.n	8009f88 <_printf_i+0x1f4>
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	6829      	ldr	r1, [r5, #0]
 8009e44:	0606      	lsls	r6, r0, #24
 8009e46:	f101 0304 	add.w	r3, r1, #4
 8009e4a:	d50a      	bpl.n	8009e62 <_printf_i+0xce>
 8009e4c:	680e      	ldr	r6, [r1, #0]
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	2e00      	cmp	r6, #0
 8009e52:	da03      	bge.n	8009e5c <_printf_i+0xc8>
 8009e54:	232d      	movs	r3, #45	; 0x2d
 8009e56:	4276      	negs	r6, r6
 8009e58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e5c:	485e      	ldr	r0, [pc, #376]	; (8009fd8 <_printf_i+0x244>)
 8009e5e:	230a      	movs	r3, #10
 8009e60:	e019      	b.n	8009e96 <_printf_i+0x102>
 8009e62:	680e      	ldr	r6, [r1, #0]
 8009e64:	602b      	str	r3, [r5, #0]
 8009e66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e6a:	bf18      	it	ne
 8009e6c:	b236      	sxthne	r6, r6
 8009e6e:	e7ef      	b.n	8009e50 <_printf_i+0xbc>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	6820      	ldr	r0, [r4, #0]
 8009e74:	1d19      	adds	r1, r3, #4
 8009e76:	6029      	str	r1, [r5, #0]
 8009e78:	0601      	lsls	r1, r0, #24
 8009e7a:	d501      	bpl.n	8009e80 <_printf_i+0xec>
 8009e7c:	681e      	ldr	r6, [r3, #0]
 8009e7e:	e002      	b.n	8009e86 <_printf_i+0xf2>
 8009e80:	0646      	lsls	r6, r0, #25
 8009e82:	d5fb      	bpl.n	8009e7c <_printf_i+0xe8>
 8009e84:	881e      	ldrh	r6, [r3, #0]
 8009e86:	4854      	ldr	r0, [pc, #336]	; (8009fd8 <_printf_i+0x244>)
 8009e88:	2f6f      	cmp	r7, #111	; 0x6f
 8009e8a:	bf0c      	ite	eq
 8009e8c:	2308      	moveq	r3, #8
 8009e8e:	230a      	movne	r3, #10
 8009e90:	2100      	movs	r1, #0
 8009e92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e96:	6865      	ldr	r5, [r4, #4]
 8009e98:	60a5      	str	r5, [r4, #8]
 8009e9a:	2d00      	cmp	r5, #0
 8009e9c:	bfa2      	ittt	ge
 8009e9e:	6821      	ldrge	r1, [r4, #0]
 8009ea0:	f021 0104 	bicge.w	r1, r1, #4
 8009ea4:	6021      	strge	r1, [r4, #0]
 8009ea6:	b90e      	cbnz	r6, 8009eac <_printf_i+0x118>
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	d04d      	beq.n	8009f48 <_printf_i+0x1b4>
 8009eac:	4615      	mov	r5, r2
 8009eae:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eb2:	fb03 6711 	mls	r7, r3, r1, r6
 8009eb6:	5dc7      	ldrb	r7, [r0, r7]
 8009eb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ebc:	4637      	mov	r7, r6
 8009ebe:	42bb      	cmp	r3, r7
 8009ec0:	460e      	mov	r6, r1
 8009ec2:	d9f4      	bls.n	8009eae <_printf_i+0x11a>
 8009ec4:	2b08      	cmp	r3, #8
 8009ec6:	d10b      	bne.n	8009ee0 <_printf_i+0x14c>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	07de      	lsls	r6, r3, #31
 8009ecc:	d508      	bpl.n	8009ee0 <_printf_i+0x14c>
 8009ece:	6923      	ldr	r3, [r4, #16]
 8009ed0:	6861      	ldr	r1, [r4, #4]
 8009ed2:	4299      	cmp	r1, r3
 8009ed4:	bfde      	ittt	le
 8009ed6:	2330      	movle	r3, #48	; 0x30
 8009ed8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009edc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ee0:	1b52      	subs	r2, r2, r5
 8009ee2:	6122      	str	r2, [r4, #16]
 8009ee4:	f8cd a000 	str.w	sl, [sp]
 8009ee8:	464b      	mov	r3, r9
 8009eea:	aa03      	add	r2, sp, #12
 8009eec:	4621      	mov	r1, r4
 8009eee:	4640      	mov	r0, r8
 8009ef0:	f7ff fee2 	bl	8009cb8 <_printf_common>
 8009ef4:	3001      	adds	r0, #1
 8009ef6:	d14c      	bne.n	8009f92 <_printf_i+0x1fe>
 8009ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8009efc:	b004      	add	sp, #16
 8009efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f02:	4835      	ldr	r0, [pc, #212]	; (8009fd8 <_printf_i+0x244>)
 8009f04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f08:	6829      	ldr	r1, [r5, #0]
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f10:	6029      	str	r1, [r5, #0]
 8009f12:	061d      	lsls	r5, r3, #24
 8009f14:	d514      	bpl.n	8009f40 <_printf_i+0x1ac>
 8009f16:	07df      	lsls	r7, r3, #31
 8009f18:	bf44      	itt	mi
 8009f1a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f1e:	6023      	strmi	r3, [r4, #0]
 8009f20:	b91e      	cbnz	r6, 8009f2a <_printf_i+0x196>
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	f023 0320 	bic.w	r3, r3, #32
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	2310      	movs	r3, #16
 8009f2c:	e7b0      	b.n	8009e90 <_printf_i+0xfc>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	f043 0320 	orr.w	r3, r3, #32
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	2378      	movs	r3, #120	; 0x78
 8009f38:	4828      	ldr	r0, [pc, #160]	; (8009fdc <_printf_i+0x248>)
 8009f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f3e:	e7e3      	b.n	8009f08 <_printf_i+0x174>
 8009f40:	0659      	lsls	r1, r3, #25
 8009f42:	bf48      	it	mi
 8009f44:	b2b6      	uxthmi	r6, r6
 8009f46:	e7e6      	b.n	8009f16 <_printf_i+0x182>
 8009f48:	4615      	mov	r5, r2
 8009f4a:	e7bb      	b.n	8009ec4 <_printf_i+0x130>
 8009f4c:	682b      	ldr	r3, [r5, #0]
 8009f4e:	6826      	ldr	r6, [r4, #0]
 8009f50:	6961      	ldr	r1, [r4, #20]
 8009f52:	1d18      	adds	r0, r3, #4
 8009f54:	6028      	str	r0, [r5, #0]
 8009f56:	0635      	lsls	r5, r6, #24
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	d501      	bpl.n	8009f60 <_printf_i+0x1cc>
 8009f5c:	6019      	str	r1, [r3, #0]
 8009f5e:	e002      	b.n	8009f66 <_printf_i+0x1d2>
 8009f60:	0670      	lsls	r0, r6, #25
 8009f62:	d5fb      	bpl.n	8009f5c <_printf_i+0x1c8>
 8009f64:	8019      	strh	r1, [r3, #0]
 8009f66:	2300      	movs	r3, #0
 8009f68:	6123      	str	r3, [r4, #16]
 8009f6a:	4615      	mov	r5, r2
 8009f6c:	e7ba      	b.n	8009ee4 <_printf_i+0x150>
 8009f6e:	682b      	ldr	r3, [r5, #0]
 8009f70:	1d1a      	adds	r2, r3, #4
 8009f72:	602a      	str	r2, [r5, #0]
 8009f74:	681d      	ldr	r5, [r3, #0]
 8009f76:	6862      	ldr	r2, [r4, #4]
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	f7f6 f940 	bl	8000200 <memchr>
 8009f80:	b108      	cbz	r0, 8009f86 <_printf_i+0x1f2>
 8009f82:	1b40      	subs	r0, r0, r5
 8009f84:	6060      	str	r0, [r4, #4]
 8009f86:	6863      	ldr	r3, [r4, #4]
 8009f88:	6123      	str	r3, [r4, #16]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f90:	e7a8      	b.n	8009ee4 <_printf_i+0x150>
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4649      	mov	r1, r9
 8009f98:	4640      	mov	r0, r8
 8009f9a:	47d0      	blx	sl
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d0ab      	beq.n	8009ef8 <_printf_i+0x164>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	079b      	lsls	r3, r3, #30
 8009fa4:	d413      	bmi.n	8009fce <_printf_i+0x23a>
 8009fa6:	68e0      	ldr	r0, [r4, #12]
 8009fa8:	9b03      	ldr	r3, [sp, #12]
 8009faa:	4298      	cmp	r0, r3
 8009fac:	bfb8      	it	lt
 8009fae:	4618      	movlt	r0, r3
 8009fb0:	e7a4      	b.n	8009efc <_printf_i+0x168>
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	4632      	mov	r2, r6
 8009fb6:	4649      	mov	r1, r9
 8009fb8:	4640      	mov	r0, r8
 8009fba:	47d0      	blx	sl
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d09b      	beq.n	8009ef8 <_printf_i+0x164>
 8009fc0:	3501      	adds	r5, #1
 8009fc2:	68e3      	ldr	r3, [r4, #12]
 8009fc4:	9903      	ldr	r1, [sp, #12]
 8009fc6:	1a5b      	subs	r3, r3, r1
 8009fc8:	42ab      	cmp	r3, r5
 8009fca:	dcf2      	bgt.n	8009fb2 <_printf_i+0x21e>
 8009fcc:	e7eb      	b.n	8009fa6 <_printf_i+0x212>
 8009fce:	2500      	movs	r5, #0
 8009fd0:	f104 0619 	add.w	r6, r4, #25
 8009fd4:	e7f5      	b.n	8009fc2 <_printf_i+0x22e>
 8009fd6:	bf00      	nop
 8009fd8:	0800a86d 	.word	0x0800a86d
 8009fdc:	0800a87e 	.word	0x0800a87e

08009fe0 <_scanf_chars>:
 8009fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fe4:	4615      	mov	r5, r2
 8009fe6:	688a      	ldr	r2, [r1, #8]
 8009fe8:	4680      	mov	r8, r0
 8009fea:	460c      	mov	r4, r1
 8009fec:	b932      	cbnz	r2, 8009ffc <_scanf_chars+0x1c>
 8009fee:	698a      	ldr	r2, [r1, #24]
 8009ff0:	2a00      	cmp	r2, #0
 8009ff2:	bf0c      	ite	eq
 8009ff4:	2201      	moveq	r2, #1
 8009ff6:	f04f 32ff 	movne.w	r2, #4294967295
 8009ffa:	608a      	str	r2, [r1, #8]
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a090 <_scanf_chars+0xb0>
 800a002:	06d1      	lsls	r1, r2, #27
 800a004:	bf5f      	itttt	pl
 800a006:	681a      	ldrpl	r2, [r3, #0]
 800a008:	1d11      	addpl	r1, r2, #4
 800a00a:	6019      	strpl	r1, [r3, #0]
 800a00c:	6816      	ldrpl	r6, [r2, #0]
 800a00e:	2700      	movs	r7, #0
 800a010:	69a0      	ldr	r0, [r4, #24]
 800a012:	b188      	cbz	r0, 800a038 <_scanf_chars+0x58>
 800a014:	2801      	cmp	r0, #1
 800a016:	d107      	bne.n	800a028 <_scanf_chars+0x48>
 800a018:	682a      	ldr	r2, [r5, #0]
 800a01a:	7811      	ldrb	r1, [r2, #0]
 800a01c:	6962      	ldr	r2, [r4, #20]
 800a01e:	5c52      	ldrb	r2, [r2, r1]
 800a020:	b952      	cbnz	r2, 800a038 <_scanf_chars+0x58>
 800a022:	2f00      	cmp	r7, #0
 800a024:	d031      	beq.n	800a08a <_scanf_chars+0xaa>
 800a026:	e022      	b.n	800a06e <_scanf_chars+0x8e>
 800a028:	2802      	cmp	r0, #2
 800a02a:	d120      	bne.n	800a06e <_scanf_chars+0x8e>
 800a02c:	682b      	ldr	r3, [r5, #0]
 800a02e:	781b      	ldrb	r3, [r3, #0]
 800a030:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a034:	071b      	lsls	r3, r3, #28
 800a036:	d41a      	bmi.n	800a06e <_scanf_chars+0x8e>
 800a038:	6823      	ldr	r3, [r4, #0]
 800a03a:	06da      	lsls	r2, r3, #27
 800a03c:	bf5e      	ittt	pl
 800a03e:	682b      	ldrpl	r3, [r5, #0]
 800a040:	781b      	ldrbpl	r3, [r3, #0]
 800a042:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a046:	682a      	ldr	r2, [r5, #0]
 800a048:	686b      	ldr	r3, [r5, #4]
 800a04a:	3201      	adds	r2, #1
 800a04c:	602a      	str	r2, [r5, #0]
 800a04e:	68a2      	ldr	r2, [r4, #8]
 800a050:	3b01      	subs	r3, #1
 800a052:	3a01      	subs	r2, #1
 800a054:	606b      	str	r3, [r5, #4]
 800a056:	3701      	adds	r7, #1
 800a058:	60a2      	str	r2, [r4, #8]
 800a05a:	b142      	cbz	r2, 800a06e <_scanf_chars+0x8e>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	dcd7      	bgt.n	800a010 <_scanf_chars+0x30>
 800a060:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a064:	4629      	mov	r1, r5
 800a066:	4640      	mov	r0, r8
 800a068:	4798      	blx	r3
 800a06a:	2800      	cmp	r0, #0
 800a06c:	d0d0      	beq.n	800a010 <_scanf_chars+0x30>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	f013 0310 	ands.w	r3, r3, #16
 800a074:	d105      	bne.n	800a082 <_scanf_chars+0xa2>
 800a076:	68e2      	ldr	r2, [r4, #12]
 800a078:	3201      	adds	r2, #1
 800a07a:	60e2      	str	r2, [r4, #12]
 800a07c:	69a2      	ldr	r2, [r4, #24]
 800a07e:	b102      	cbz	r2, 800a082 <_scanf_chars+0xa2>
 800a080:	7033      	strb	r3, [r6, #0]
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	443b      	add	r3, r7
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	2000      	movs	r0, #0
 800a08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a08e:	bf00      	nop
 800a090:	0800a6f9 	.word	0x0800a6f9

0800a094 <_scanf_i>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	4698      	mov	r8, r3
 800a09a:	4b76      	ldr	r3, [pc, #472]	; (800a274 <_scanf_i+0x1e0>)
 800a09c:	460c      	mov	r4, r1
 800a09e:	4682      	mov	sl, r0
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	ab03      	add	r3, sp, #12
 800a0aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0ae:	4b72      	ldr	r3, [pc, #456]	; (800a278 <_scanf_i+0x1e4>)
 800a0b0:	69a1      	ldr	r1, [r4, #24]
 800a0b2:	4a72      	ldr	r2, [pc, #456]	; (800a27c <_scanf_i+0x1e8>)
 800a0b4:	2903      	cmp	r1, #3
 800a0b6:	bf18      	it	ne
 800a0b8:	461a      	movne	r2, r3
 800a0ba:	68a3      	ldr	r3, [r4, #8]
 800a0bc:	9201      	str	r2, [sp, #4]
 800a0be:	1e5a      	subs	r2, r3, #1
 800a0c0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0c4:	bf88      	it	hi
 800a0c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0ca:	4627      	mov	r7, r4
 800a0cc:	bf82      	ittt	hi
 800a0ce:	eb03 0905 	addhi.w	r9, r3, r5
 800a0d2:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0d6:	60a3      	strhi	r3, [r4, #8]
 800a0d8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a0dc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a0e0:	bf98      	it	ls
 800a0e2:	f04f 0900 	movls.w	r9, #0
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	463d      	mov	r5, r7
 800a0ea:	f04f 0b00 	mov.w	fp, #0
 800a0ee:	6831      	ldr	r1, [r6, #0]
 800a0f0:	ab03      	add	r3, sp, #12
 800a0f2:	7809      	ldrb	r1, [r1, #0]
 800a0f4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	f7f6 f881 	bl	8000200 <memchr>
 800a0fe:	b328      	cbz	r0, 800a14c <_scanf_i+0xb8>
 800a100:	f1bb 0f01 	cmp.w	fp, #1
 800a104:	d159      	bne.n	800a1ba <_scanf_i+0x126>
 800a106:	6862      	ldr	r2, [r4, #4]
 800a108:	b92a      	cbnz	r2, 800a116 <_scanf_i+0x82>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	2308      	movs	r3, #8
 800a10e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a112:	6063      	str	r3, [r4, #4]
 800a114:	6022      	str	r2, [r4, #0]
 800a116:	6822      	ldr	r2, [r4, #0]
 800a118:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a11c:	6022      	str	r2, [r4, #0]
 800a11e:	68a2      	ldr	r2, [r4, #8]
 800a120:	1e51      	subs	r1, r2, #1
 800a122:	60a1      	str	r1, [r4, #8]
 800a124:	b192      	cbz	r2, 800a14c <_scanf_i+0xb8>
 800a126:	6832      	ldr	r2, [r6, #0]
 800a128:	1c51      	adds	r1, r2, #1
 800a12a:	6031      	str	r1, [r6, #0]
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	f805 2b01 	strb.w	r2, [r5], #1
 800a132:	6872      	ldr	r2, [r6, #4]
 800a134:	3a01      	subs	r2, #1
 800a136:	2a00      	cmp	r2, #0
 800a138:	6072      	str	r2, [r6, #4]
 800a13a:	dc07      	bgt.n	800a14c <_scanf_i+0xb8>
 800a13c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a140:	4631      	mov	r1, r6
 800a142:	4650      	mov	r0, sl
 800a144:	4790      	blx	r2
 800a146:	2800      	cmp	r0, #0
 800a148:	f040 8085 	bne.w	800a256 <_scanf_i+0x1c2>
 800a14c:	f10b 0b01 	add.w	fp, fp, #1
 800a150:	f1bb 0f03 	cmp.w	fp, #3
 800a154:	d1cb      	bne.n	800a0ee <_scanf_i+0x5a>
 800a156:	6863      	ldr	r3, [r4, #4]
 800a158:	b90b      	cbnz	r3, 800a15e <_scanf_i+0xca>
 800a15a:	230a      	movs	r3, #10
 800a15c:	6063      	str	r3, [r4, #4]
 800a15e:	6863      	ldr	r3, [r4, #4]
 800a160:	4947      	ldr	r1, [pc, #284]	; (800a280 <_scanf_i+0x1ec>)
 800a162:	6960      	ldr	r0, [r4, #20]
 800a164:	1ac9      	subs	r1, r1, r3
 800a166:	f000 f8af 	bl	800a2c8 <__sccl>
 800a16a:	f04f 0b00 	mov.w	fp, #0
 800a16e:	68a3      	ldr	r3, [r4, #8]
 800a170:	6822      	ldr	r2, [r4, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d03d      	beq.n	800a1f2 <_scanf_i+0x15e>
 800a176:	6831      	ldr	r1, [r6, #0]
 800a178:	6960      	ldr	r0, [r4, #20]
 800a17a:	f891 c000 	ldrb.w	ip, [r1]
 800a17e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a182:	2800      	cmp	r0, #0
 800a184:	d035      	beq.n	800a1f2 <_scanf_i+0x15e>
 800a186:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a18a:	d124      	bne.n	800a1d6 <_scanf_i+0x142>
 800a18c:	0510      	lsls	r0, r2, #20
 800a18e:	d522      	bpl.n	800a1d6 <_scanf_i+0x142>
 800a190:	f10b 0b01 	add.w	fp, fp, #1
 800a194:	f1b9 0f00 	cmp.w	r9, #0
 800a198:	d003      	beq.n	800a1a2 <_scanf_i+0x10e>
 800a19a:	3301      	adds	r3, #1
 800a19c:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1a0:	60a3      	str	r3, [r4, #8]
 800a1a2:	6873      	ldr	r3, [r6, #4]
 800a1a4:	3b01      	subs	r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	6073      	str	r3, [r6, #4]
 800a1aa:	dd1b      	ble.n	800a1e4 <_scanf_i+0x150>
 800a1ac:	6833      	ldr	r3, [r6, #0]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	6033      	str	r3, [r6, #0]
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	60a3      	str	r3, [r4, #8]
 800a1b8:	e7d9      	b.n	800a16e <_scanf_i+0xda>
 800a1ba:	f1bb 0f02 	cmp.w	fp, #2
 800a1be:	d1ae      	bne.n	800a11e <_scanf_i+0x8a>
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a1c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a1ca:	d1bf      	bne.n	800a14c <_scanf_i+0xb8>
 800a1cc:	2310      	movs	r3, #16
 800a1ce:	6063      	str	r3, [r4, #4]
 800a1d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1d4:	e7a2      	b.n	800a11c <_scanf_i+0x88>
 800a1d6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a1da:	6022      	str	r2, [r4, #0]
 800a1dc:	780b      	ldrb	r3, [r1, #0]
 800a1de:	f805 3b01 	strb.w	r3, [r5], #1
 800a1e2:	e7de      	b.n	800a1a2 <_scanf_i+0x10e>
 800a1e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1e8:	4631      	mov	r1, r6
 800a1ea:	4650      	mov	r0, sl
 800a1ec:	4798      	blx	r3
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d0df      	beq.n	800a1b2 <_scanf_i+0x11e>
 800a1f2:	6823      	ldr	r3, [r4, #0]
 800a1f4:	05db      	lsls	r3, r3, #23
 800a1f6:	d50d      	bpl.n	800a214 <_scanf_i+0x180>
 800a1f8:	42bd      	cmp	r5, r7
 800a1fa:	d909      	bls.n	800a210 <_scanf_i+0x17c>
 800a1fc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a200:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a204:	4632      	mov	r2, r6
 800a206:	4650      	mov	r0, sl
 800a208:	4798      	blx	r3
 800a20a:	f105 39ff 	add.w	r9, r5, #4294967295
 800a20e:	464d      	mov	r5, r9
 800a210:	42bd      	cmp	r5, r7
 800a212:	d02d      	beq.n	800a270 <_scanf_i+0x1dc>
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	f012 0210 	ands.w	r2, r2, #16
 800a21a:	d113      	bne.n	800a244 <_scanf_i+0x1b0>
 800a21c:	702a      	strb	r2, [r5, #0]
 800a21e:	6863      	ldr	r3, [r4, #4]
 800a220:	9e01      	ldr	r6, [sp, #4]
 800a222:	4639      	mov	r1, r7
 800a224:	4650      	mov	r0, sl
 800a226:	47b0      	blx	r6
 800a228:	6821      	ldr	r1, [r4, #0]
 800a22a:	f8d8 3000 	ldr.w	r3, [r8]
 800a22e:	f011 0f20 	tst.w	r1, #32
 800a232:	d013      	beq.n	800a25c <_scanf_i+0x1c8>
 800a234:	1d1a      	adds	r2, r3, #4
 800a236:	f8c8 2000 	str.w	r2, [r8]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	6018      	str	r0, [r3, #0]
 800a23e:	68e3      	ldr	r3, [r4, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	60e3      	str	r3, [r4, #12]
 800a244:	1bed      	subs	r5, r5, r7
 800a246:	44ab      	add	fp, r5
 800a248:	6925      	ldr	r5, [r4, #16]
 800a24a:	445d      	add	r5, fp
 800a24c:	6125      	str	r5, [r4, #16]
 800a24e:	2000      	movs	r0, #0
 800a250:	b007      	add	sp, #28
 800a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a256:	f04f 0b00 	mov.w	fp, #0
 800a25a:	e7ca      	b.n	800a1f2 <_scanf_i+0x15e>
 800a25c:	1d1a      	adds	r2, r3, #4
 800a25e:	f8c8 2000 	str.w	r2, [r8]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f011 0f01 	tst.w	r1, #1
 800a268:	bf14      	ite	ne
 800a26a:	8018      	strhne	r0, [r3, #0]
 800a26c:	6018      	streq	r0, [r3, #0]
 800a26e:	e7e6      	b.n	800a23e <_scanf_i+0x1aa>
 800a270:	2001      	movs	r0, #1
 800a272:	e7ed      	b.n	800a250 <_scanf_i+0x1bc>
 800a274:	0800a6a0 	.word	0x0800a6a0
 800a278:	0800a41d 	.word	0x0800a41d
 800a27c:	08008e61 	.word	0x08008e61
 800a280:	0800a8a8 	.word	0x0800a8a8

0800a284 <_read_r>:
 800a284:	b538      	push	{r3, r4, r5, lr}
 800a286:	4d07      	ldr	r5, [pc, #28]	; (800a2a4 <_read_r+0x20>)
 800a288:	4604      	mov	r4, r0
 800a28a:	4608      	mov	r0, r1
 800a28c:	4611      	mov	r1, r2
 800a28e:	2200      	movs	r2, #0
 800a290:	602a      	str	r2, [r5, #0]
 800a292:	461a      	mov	r2, r3
 800a294:	f7f7 fe92 	bl	8001fbc <_read>
 800a298:	1c43      	adds	r3, r0, #1
 800a29a:	d102      	bne.n	800a2a2 <_read_r+0x1e>
 800a29c:	682b      	ldr	r3, [r5, #0]
 800a29e:	b103      	cbz	r3, 800a2a2 <_read_r+0x1e>
 800a2a0:	6023      	str	r3, [r4, #0]
 800a2a2:	bd38      	pop	{r3, r4, r5, pc}
 800a2a4:	20001158 	.word	0x20001158

0800a2a8 <_sbrk_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4d06      	ldr	r5, [pc, #24]	; (800a2c4 <_sbrk_r+0x1c>)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	602b      	str	r3, [r5, #0]
 800a2b4:	f7f7 fed4 	bl	8002060 <_sbrk>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d102      	bne.n	800a2c2 <_sbrk_r+0x1a>
 800a2bc:	682b      	ldr	r3, [r5, #0]
 800a2be:	b103      	cbz	r3, 800a2c2 <_sbrk_r+0x1a>
 800a2c0:	6023      	str	r3, [r4, #0]
 800a2c2:	bd38      	pop	{r3, r4, r5, pc}
 800a2c4:	20001158 	.word	0x20001158

0800a2c8 <__sccl>:
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	780b      	ldrb	r3, [r1, #0]
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	2b5e      	cmp	r3, #94	; 0x5e
 800a2d0:	bf0b      	itete	eq
 800a2d2:	784b      	ldrbeq	r3, [r1, #1]
 800a2d4:	1c48      	addne	r0, r1, #1
 800a2d6:	1c88      	addeq	r0, r1, #2
 800a2d8:	2200      	movne	r2, #0
 800a2da:	bf08      	it	eq
 800a2dc:	2201      	moveq	r2, #1
 800a2de:	1e61      	subs	r1, r4, #1
 800a2e0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a2e4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a2e8:	42a9      	cmp	r1, r5
 800a2ea:	d1fb      	bne.n	800a2e4 <__sccl+0x1c>
 800a2ec:	b90b      	cbnz	r3, 800a2f2 <__sccl+0x2a>
 800a2ee:	3801      	subs	r0, #1
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	f082 0201 	eor.w	r2, r2, #1
 800a2f6:	54e2      	strb	r2, [r4, r3]
 800a2f8:	4605      	mov	r5, r0
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a300:	292d      	cmp	r1, #45	; 0x2d
 800a302:	d006      	beq.n	800a312 <__sccl+0x4a>
 800a304:	295d      	cmp	r1, #93	; 0x5d
 800a306:	d0f3      	beq.n	800a2f0 <__sccl+0x28>
 800a308:	b909      	cbnz	r1, 800a30e <__sccl+0x46>
 800a30a:	4628      	mov	r0, r5
 800a30c:	e7f0      	b.n	800a2f0 <__sccl+0x28>
 800a30e:	460b      	mov	r3, r1
 800a310:	e7f1      	b.n	800a2f6 <__sccl+0x2e>
 800a312:	786e      	ldrb	r6, [r5, #1]
 800a314:	2e5d      	cmp	r6, #93	; 0x5d
 800a316:	d0fa      	beq.n	800a30e <__sccl+0x46>
 800a318:	42b3      	cmp	r3, r6
 800a31a:	dcf8      	bgt.n	800a30e <__sccl+0x46>
 800a31c:	3502      	adds	r5, #2
 800a31e:	4619      	mov	r1, r3
 800a320:	3101      	adds	r1, #1
 800a322:	428e      	cmp	r6, r1
 800a324:	5462      	strb	r2, [r4, r1]
 800a326:	dcfb      	bgt.n	800a320 <__sccl+0x58>
 800a328:	1af1      	subs	r1, r6, r3
 800a32a:	3901      	subs	r1, #1
 800a32c:	1c58      	adds	r0, r3, #1
 800a32e:	42b3      	cmp	r3, r6
 800a330:	bfa8      	it	ge
 800a332:	2100      	movge	r1, #0
 800a334:	1843      	adds	r3, r0, r1
 800a336:	e7e0      	b.n	800a2fa <__sccl+0x32>

0800a338 <_strtoul_l.constprop.0>:
 800a338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a33c:	4f36      	ldr	r7, [pc, #216]	; (800a418 <_strtoul_l.constprop.0+0xe0>)
 800a33e:	4686      	mov	lr, r0
 800a340:	460d      	mov	r5, r1
 800a342:	4628      	mov	r0, r5
 800a344:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a348:	5de6      	ldrb	r6, [r4, r7]
 800a34a:	f016 0608 	ands.w	r6, r6, #8
 800a34e:	d1f8      	bne.n	800a342 <_strtoul_l.constprop.0+0xa>
 800a350:	2c2d      	cmp	r4, #45	; 0x2d
 800a352:	d12f      	bne.n	800a3b4 <_strtoul_l.constprop.0+0x7c>
 800a354:	782c      	ldrb	r4, [r5, #0]
 800a356:	2601      	movs	r6, #1
 800a358:	1c85      	adds	r5, r0, #2
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d057      	beq.n	800a40e <_strtoul_l.constprop.0+0xd6>
 800a35e:	2b10      	cmp	r3, #16
 800a360:	d109      	bne.n	800a376 <_strtoul_l.constprop.0+0x3e>
 800a362:	2c30      	cmp	r4, #48	; 0x30
 800a364:	d107      	bne.n	800a376 <_strtoul_l.constprop.0+0x3e>
 800a366:	7828      	ldrb	r0, [r5, #0]
 800a368:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a36c:	2858      	cmp	r0, #88	; 0x58
 800a36e:	d149      	bne.n	800a404 <_strtoul_l.constprop.0+0xcc>
 800a370:	786c      	ldrb	r4, [r5, #1]
 800a372:	2310      	movs	r3, #16
 800a374:	3502      	adds	r5, #2
 800a376:	f04f 38ff 	mov.w	r8, #4294967295
 800a37a:	2700      	movs	r7, #0
 800a37c:	fbb8 f8f3 	udiv	r8, r8, r3
 800a380:	fb03 f908 	mul.w	r9, r3, r8
 800a384:	ea6f 0909 	mvn.w	r9, r9
 800a388:	4638      	mov	r0, r7
 800a38a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a38e:	f1bc 0f09 	cmp.w	ip, #9
 800a392:	d814      	bhi.n	800a3be <_strtoul_l.constprop.0+0x86>
 800a394:	4664      	mov	r4, ip
 800a396:	42a3      	cmp	r3, r4
 800a398:	dd22      	ble.n	800a3e0 <_strtoul_l.constprop.0+0xa8>
 800a39a:	2f00      	cmp	r7, #0
 800a39c:	db1d      	blt.n	800a3da <_strtoul_l.constprop.0+0xa2>
 800a39e:	4580      	cmp	r8, r0
 800a3a0:	d31b      	bcc.n	800a3da <_strtoul_l.constprop.0+0xa2>
 800a3a2:	d101      	bne.n	800a3a8 <_strtoul_l.constprop.0+0x70>
 800a3a4:	45a1      	cmp	r9, r4
 800a3a6:	db18      	blt.n	800a3da <_strtoul_l.constprop.0+0xa2>
 800a3a8:	fb00 4003 	mla	r0, r0, r3, r4
 800a3ac:	2701      	movs	r7, #1
 800a3ae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3b2:	e7ea      	b.n	800a38a <_strtoul_l.constprop.0+0x52>
 800a3b4:	2c2b      	cmp	r4, #43	; 0x2b
 800a3b6:	bf04      	itt	eq
 800a3b8:	782c      	ldrbeq	r4, [r5, #0]
 800a3ba:	1c85      	addeq	r5, r0, #2
 800a3bc:	e7cd      	b.n	800a35a <_strtoul_l.constprop.0+0x22>
 800a3be:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a3c2:	f1bc 0f19 	cmp.w	ip, #25
 800a3c6:	d801      	bhi.n	800a3cc <_strtoul_l.constprop.0+0x94>
 800a3c8:	3c37      	subs	r4, #55	; 0x37
 800a3ca:	e7e4      	b.n	800a396 <_strtoul_l.constprop.0+0x5e>
 800a3cc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a3d0:	f1bc 0f19 	cmp.w	ip, #25
 800a3d4:	d804      	bhi.n	800a3e0 <_strtoul_l.constprop.0+0xa8>
 800a3d6:	3c57      	subs	r4, #87	; 0x57
 800a3d8:	e7dd      	b.n	800a396 <_strtoul_l.constprop.0+0x5e>
 800a3da:	f04f 37ff 	mov.w	r7, #4294967295
 800a3de:	e7e6      	b.n	800a3ae <_strtoul_l.constprop.0+0x76>
 800a3e0:	2f00      	cmp	r7, #0
 800a3e2:	da07      	bge.n	800a3f4 <_strtoul_l.constprop.0+0xbc>
 800a3e4:	2322      	movs	r3, #34	; 0x22
 800a3e6:	f8ce 3000 	str.w	r3, [lr]
 800a3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ee:	b932      	cbnz	r2, 800a3fe <_strtoul_l.constprop.0+0xc6>
 800a3f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3f4:	b106      	cbz	r6, 800a3f8 <_strtoul_l.constprop.0+0xc0>
 800a3f6:	4240      	negs	r0, r0
 800a3f8:	2a00      	cmp	r2, #0
 800a3fa:	d0f9      	beq.n	800a3f0 <_strtoul_l.constprop.0+0xb8>
 800a3fc:	b107      	cbz	r7, 800a400 <_strtoul_l.constprop.0+0xc8>
 800a3fe:	1e69      	subs	r1, r5, #1
 800a400:	6011      	str	r1, [r2, #0]
 800a402:	e7f5      	b.n	800a3f0 <_strtoul_l.constprop.0+0xb8>
 800a404:	2430      	movs	r4, #48	; 0x30
 800a406:	2b00      	cmp	r3, #0
 800a408:	d1b5      	bne.n	800a376 <_strtoul_l.constprop.0+0x3e>
 800a40a:	2308      	movs	r3, #8
 800a40c:	e7b3      	b.n	800a376 <_strtoul_l.constprop.0+0x3e>
 800a40e:	2c30      	cmp	r4, #48	; 0x30
 800a410:	d0a9      	beq.n	800a366 <_strtoul_l.constprop.0+0x2e>
 800a412:	230a      	movs	r3, #10
 800a414:	e7af      	b.n	800a376 <_strtoul_l.constprop.0+0x3e>
 800a416:	bf00      	nop
 800a418:	0800a6f9 	.word	0x0800a6f9

0800a41c <_strtoul_r>:
 800a41c:	f7ff bf8c 	b.w	800a338 <_strtoul_l.constprop.0>

0800a420 <__submore>:
 800a420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a424:	460c      	mov	r4, r1
 800a426:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a42c:	4299      	cmp	r1, r3
 800a42e:	d11d      	bne.n	800a46c <__submore+0x4c>
 800a430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a434:	f7ff f8a0 	bl	8009578 <_malloc_r>
 800a438:	b918      	cbnz	r0, 800a442 <__submore+0x22>
 800a43a:	f04f 30ff 	mov.w	r0, #4294967295
 800a43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a446:	63a3      	str	r3, [r4, #56]	; 0x38
 800a448:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a44c:	6360      	str	r0, [r4, #52]	; 0x34
 800a44e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a452:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a456:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a45a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a45e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a462:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a466:	6020      	str	r0, [r4, #0]
 800a468:	2000      	movs	r0, #0
 800a46a:	e7e8      	b.n	800a43e <__submore+0x1e>
 800a46c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a46e:	0077      	lsls	r7, r6, #1
 800a470:	463a      	mov	r2, r7
 800a472:	f000 f84b 	bl	800a50c <_realloc_r>
 800a476:	4605      	mov	r5, r0
 800a478:	2800      	cmp	r0, #0
 800a47a:	d0de      	beq.n	800a43a <__submore+0x1a>
 800a47c:	eb00 0806 	add.w	r8, r0, r6
 800a480:	4601      	mov	r1, r0
 800a482:	4632      	mov	r2, r6
 800a484:	4640      	mov	r0, r8
 800a486:	f000 f827 	bl	800a4d8 <memcpy>
 800a48a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a48e:	f8c4 8000 	str.w	r8, [r4]
 800a492:	e7e9      	b.n	800a468 <__submore+0x48>

0800a494 <_fstat_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d07      	ldr	r5, [pc, #28]	; (800a4b4 <_fstat_r+0x20>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	4611      	mov	r1, r2
 800a4a0:	602b      	str	r3, [r5, #0]
 800a4a2:	f7f7 fdb4 	bl	800200e <_fstat>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	d102      	bne.n	800a4b0 <_fstat_r+0x1c>
 800a4aa:	682b      	ldr	r3, [r5, #0]
 800a4ac:	b103      	cbz	r3, 800a4b0 <_fstat_r+0x1c>
 800a4ae:	6023      	str	r3, [r4, #0]
 800a4b0:	bd38      	pop	{r3, r4, r5, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20001158 	.word	0x20001158

0800a4b8 <_isatty_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d06      	ldr	r5, [pc, #24]	; (800a4d4 <_isatty_r+0x1c>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f7 fdb3 	bl	800202e <_isatty>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_isatty_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_isatty_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20001158 	.word	0x20001158

0800a4d8 <memcpy>:
 800a4d8:	440a      	add	r2, r1
 800a4da:	4291      	cmp	r1, r2
 800a4dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4e0:	d100      	bne.n	800a4e4 <memcpy+0xc>
 800a4e2:	4770      	bx	lr
 800a4e4:	b510      	push	{r4, lr}
 800a4e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ee:	4291      	cmp	r1, r2
 800a4f0:	d1f9      	bne.n	800a4e6 <memcpy+0xe>
 800a4f2:	bd10      	pop	{r4, pc}

0800a4f4 <__malloc_lock>:
 800a4f4:	4801      	ldr	r0, [pc, #4]	; (800a4fc <__malloc_lock+0x8>)
 800a4f6:	f7fe bf59 	b.w	80093ac <__retarget_lock_acquire_recursive>
 800a4fa:	bf00      	nop
 800a4fc:	2000114c 	.word	0x2000114c

0800a500 <__malloc_unlock>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__malloc_unlock+0x8>)
 800a502:	f7fe bf54 	b.w	80093ae <__retarget_lock_release_recursive>
 800a506:	bf00      	nop
 800a508:	2000114c 	.word	0x2000114c

0800a50c <_realloc_r>:
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	4680      	mov	r8, r0
 800a512:	4614      	mov	r4, r2
 800a514:	460e      	mov	r6, r1
 800a516:	b921      	cbnz	r1, 800a522 <_realloc_r+0x16>
 800a518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a51c:	4611      	mov	r1, r2
 800a51e:	f7ff b82b 	b.w	8009578 <_malloc_r>
 800a522:	b92a      	cbnz	r2, 800a530 <_realloc_r+0x24>
 800a524:	f7fe ffbc 	bl	80094a0 <_free_r>
 800a528:	4625      	mov	r5, r4
 800a52a:	4628      	mov	r0, r5
 800a52c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a530:	f000 f81b 	bl	800a56a <_malloc_usable_size_r>
 800a534:	4284      	cmp	r4, r0
 800a536:	4607      	mov	r7, r0
 800a538:	d802      	bhi.n	800a540 <_realloc_r+0x34>
 800a53a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a53e:	d812      	bhi.n	800a566 <_realloc_r+0x5a>
 800a540:	4621      	mov	r1, r4
 800a542:	4640      	mov	r0, r8
 800a544:	f7ff f818 	bl	8009578 <_malloc_r>
 800a548:	4605      	mov	r5, r0
 800a54a:	2800      	cmp	r0, #0
 800a54c:	d0ed      	beq.n	800a52a <_realloc_r+0x1e>
 800a54e:	42bc      	cmp	r4, r7
 800a550:	4622      	mov	r2, r4
 800a552:	4631      	mov	r1, r6
 800a554:	bf28      	it	cs
 800a556:	463a      	movcs	r2, r7
 800a558:	f7ff ffbe 	bl	800a4d8 <memcpy>
 800a55c:	4631      	mov	r1, r6
 800a55e:	4640      	mov	r0, r8
 800a560:	f7fe ff9e 	bl	80094a0 <_free_r>
 800a564:	e7e1      	b.n	800a52a <_realloc_r+0x1e>
 800a566:	4635      	mov	r5, r6
 800a568:	e7df      	b.n	800a52a <_realloc_r+0x1e>

0800a56a <_malloc_usable_size_r>:
 800a56a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a56e:	1f18      	subs	r0, r3, #4
 800a570:	2b00      	cmp	r3, #0
 800a572:	bfbc      	itt	lt
 800a574:	580b      	ldrlt	r3, [r1, r0]
 800a576:	18c0      	addlt	r0, r0, r3
 800a578:	4770      	bx	lr
	...

0800a57c <_init>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr

0800a588 <_fini>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	bf00      	nop
 800a58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a58e:	bc08      	pop	{r3}
 800a590:	469e      	mov	lr, r3
 800a592:	4770      	bx	lr
